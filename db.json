{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/avatar.jpeg","path":"img/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/alipay.png","path":"img/alipay.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/icp.png","path":"img/icp.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/benren.jpg","path":"img/benren.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","path":"js/third-party/activate-power-mode.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","path":"js/third-party/click_heart.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","path":"js/third-party/ClickShowText.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"5a45fa481fe4149e26a7087486075399e20aa87c","modified":1590903446775},{"_id":"themes/butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1590899550971},{"_id":"themes/butterfly/.DS_Store","hash":"c389cb94715f364ed7e7b72842c9c47c4f4f769b","modified":1590906464086},{"_id":"themes/butterfly/README.md","hash":"8e4d01331f9a820ec30fca075c6956859772530e","modified":1590899550971},{"_id":"themes/butterfly/README_CN.md","hash":"4fd3e96f5c18f721118c175c807e19ae874a7793","modified":1590899550972},{"_id":"themes/butterfly/_config.yml","hash":"2c250fd7d34de89e038c9af301e91bfa98616659","modified":1590904774001},{"_id":"themes/butterfly/package.json","hash":"43a92e039fe98e01259dc84ee4066b5d5efb8e7f","modified":1590899551303},{"_id":"source/_posts/Centos7 系统快速环境开发搭建.md","hash":"c6338e7aa2c1b8d2f041d0fa7b27637f297c07da","modified":1590856122117},{"_id":"source/_posts/Docker-入门.md","hash":"4fd9674569b87c5dd0292923d31a4fff2d004d95","modified":1590852443985},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1590849049815},{"_id":"source/_posts/Hello-World源码解析.md","hash":"362e6e7db938e153d0a89a03f8ff75552fb8a298","modified":1590853039756},{"_id":"source/_posts/Hexo常用命令.md","hash":"cc9e70d44dc6513336aaaa4e3ebbf5dcb875d26c","modified":1590899012291},{"_id":"source/_posts/SpringBoot-Jdbc.md","hash":"b7235ef7dc5d4ede038f2249ce99dbe0944c3d9c","modified":1590901910304},{"_id":"source/_posts/MySql多数据源(自定义注解完成数据库切库,读写分离).md","hash":"e622ad47626c41b7a1d91d7fbfe6131bf0c9590f","modified":1590853731757},{"_id":"source/_posts/SpringBoot-Mycat（MySql读写分离）.md","hash":"84c8e4dc623735ae5f4927c425d01a4694f955f5","modified":1590854670179},{"_id":"source/_posts/SpringBoot-整合Mybatis.md","hash":"6e0623c23ffb5143e1d52f371c45b04538c56890","modified":1590852570064},{"_id":"source/_posts/StringBoot-Profile.md","hash":"96474b94182cc9dcbea2c734ba4bcb6b88212044","modified":1590852363940},{"_id":"source/_posts/StringBoot-RestfulCRUD.md","hash":"aeb3e77dd952948bee12d6f013e98a3a9f5d8075","modified":1590852409631},{"_id":"source/_posts/StringBoot-Thymeleaf.md","hash":"f2d19e48dfbf09eae7c2d92efa462b90e8038021","modified":1590852384528},{"_id":"source/_posts/StringBoot-异常处理机制.md","hash":"cb738eae6f6386b6fdcd23ef4f7fcd08c36f9339","modified":1590852419652},{"_id":"source/_posts/StringBoot-日志框架.md","hash":"e649e6f3c51780d2b111b708437f73e2d96579b2","modified":1590852372381},{"_id":"source/_posts/StringBoot-自动配置.md","hash":"96bfaa2d4afe4784e569a1ff54c5ddd0f4c3b159","modified":1590852395859},{"_id":"source/_posts/StringBoot-配置嵌入式Servlet容器.md","hash":"8434c298956a13d0be1b33be6965f1ce8572af50","modified":1590852433265},{"_id":"source/_posts/StringBoot之配置值注入.md","hash":"584157e4ce91a140e8079c47742e8e97605187e6","modified":1590852349844},{"_id":"source/_posts/StringBoot之配置文件.md","hash":"447ed11a6b5f0992b447f364f4900d653d8e2544","modified":1590852333459},{"_id":"source/_posts/项目管理禅道Linux.md","hash":"2b9a52b6b34c6a39fd35169c75fb820dec3e1b8b","modified":1590855182451},{"_id":"source/_data/butterfly.yml","hash":"26f963848559ae19442153ff029e352d96545e85","modified":1590907250142},{"_id":"source/_posts/Hello-SpringBoot.md","hash":"b7af7970f239d01d9f4425432b5293a898a17efc","modified":1590853765429},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE.md","hash":"bc427d7f13fec05cfd2dcc10953cbb2a96bc31be","modified":1590899550970},{"_id":"themes/butterfly/.github/stale.yml","hash":"cd5a929ce25a6293a9f449e7b80dfe4307326797","modified":1590899550971},{"_id":"themes/butterfly/languages/default.yml","hash":"8cc398208ebd0326d0bdac09cf96b8aeeed78fcc","modified":1590899550992},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"848871887cc5ea38c50292df7f7c9d9dbb07b5ca","modified":1590899550993},{"_id":"themes/butterfly/languages/en.yml","hash":"8cc398208ebd0326d0bdac09cf96b8aeeed78fcc","modified":1590899550992},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"6dc0abceee6a1c4b47d3ecdae81667ffb4a09f88","modified":1590899550995},{"_id":"themes/butterfly/layout/404.pug","hash":"3ade9903e1e0dedfb11b46d7161f2100defba31e","modified":1590899551008},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1590899551008},{"_id":"themes/butterfly/layout/flink.pug","hash":"f922cafc12857cff327d6621ea5517976e85c229","modified":1590899551009},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1590899551302},{"_id":"themes/butterfly/layout/page.pug","hash":"130ab657a6acfe149dbc59e481dc05d4d7d926a3","modified":1590899551302},{"_id":"themes/butterfly/layout/post.pug","hash":"2e34fd65d36508faec9fd015d6cdb108d4c29b58","modified":1590899551303},{"_id":"themes/butterfly/layout/category.pug","hash":"d014234c26d2c07caaea6703f7b48cb69c51907d","modified":1590899551009},{"_id":"themes/butterfly/layout/tag.pug","hash":"3bb2a700c6d709d2757d55d357eed1fca5644e24","modified":1590899551303},{"_id":"themes/butterfly/source/.DS_Store","hash":"7c674354f48b9cfb942e2fb6004ee2da878479ab","modified":1590906464087},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"5265bfbd6514fde10b42f5f5482776450e2bd582","modified":1590899551010},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"855c5d7e427730178c2f6e4f3e816d7fbee40198","modified":1590899551041},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"901122c065cb08589a52911773d9baf01c599faa","modified":1590899551042},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"055747cdb64b27ac707402481e79c82ce946b0d3","modified":1590899551189},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"385a186f0e77900db685b97d40bb4d26fa48a4d5","modified":1590899551205},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"9ba725c0f9661a156f82dee35a422fdd4639a5ce","modified":1590899551213},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"b41c97424c588209c0d24817f5120b50933135fd","modified":1590899551220},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4c7f4562183f28acb359b7e826eb0a198086e3f0","modified":1590899551305},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"0b4775aaa955b75f03648fc1957fb88a6d440803","modified":1590899551306},{"_id":"themes/butterfly/scripts/events/404.js","hash":"3c30dbd8b910ce7d8d7d8353cf2266cbc5d8775d","modified":1590899551304},{"_id":"themes/butterfly/scripts/events/replace_config.js","hash":"537e556e76760ce2103f359d5a424c6e2b9a0710","modified":1590899551305},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"87c63d5b46fdc13724d5d213cdfde608af6a5bb3","modified":1590899551306},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"729a9f40c5bf603036f6e9443db93b1704cf17d9","modified":1590899551307},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"21c89a1502e9964cb48d32ab0476427cc41b010d","modified":1590899551307},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"7ebe4dc2b42094a5b55799c0af5c28d6ab97d25f","modified":1590899551309},{"_id":"themes/butterfly/scripts/tags/gallery.js","hash":"2fad0a9e6645613631aad36dc3473fe8e032809b","modified":1590899551309},{"_id":"themes/butterfly/scripts/tags/hide.js","hash":"8c70135d5367b9a589ec92be66841488e9acdd29","modified":1590899551310},{"_id":"themes/butterfly/scripts/tags/mermaid.js","hash":"53eaff19d8da32e04e2c871300ea495356d633cd","modified":1590899551310},{"_id":"themes/butterfly/scripts/tags/note.js","hash":"c739846637c48b4779df2f62effb78e15100fd9f","modified":1590899551310},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1590899551330},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1590899551331},{"_id":"themes/butterfly/source/img/avatar.jpeg","hash":"612542ff7711a6ea59a93d9694ab55c6e6f63d4c","modified":1590906756417},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1590899551331},{"_id":"themes/butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1590899551334},{"_id":"themes/butterfly/source/img/wechat.png","hash":"ec623dfbaecbaa3f20934cfef1451080b5c1481b","modified":1590906680799},{"_id":"themes/butterfly/source/css/index.styl","hash":"96eb343f77fc891ff5adedb1f4a3fb34ab4ee20f","modified":1590899551329},{"_id":"themes/butterfly/source/css/var.styl","hash":"907b5ee1d5cb44ebb90493b068c00bef068ef748","modified":1590899551329},{"_id":"themes/butterfly/source/js/main.js","hash":"8a398625427c6dc3d2d23b55faa4ebbd8f45cea4","modified":1590899551335},{"_id":"themes/butterfly/source/img/.DS_Store","hash":"773fa57ac96b6683dad1ccebc93ba74d2a8b7210","modified":1590906844936},{"_id":"themes/butterfly/source/js/utils.js","hash":"1906e1b61590368aa567e7064ff7f2492b57b257","modified":1590899551339},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"d468bf1634950ed1ffd7cedd3c87f2037e27543f","modified":1590899551339},{"_id":"themes/butterfly/source/img/alipay.png","hash":"c5d3138fc10c4abc487a4b5e475a6d58487bfef3","modified":1590906729784},{"_id":"themes/butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1590899551333},{"_id":"themes/butterfly/source/img/benren.jpg","hash":"02302c842400d1bd5c410aa4c0beab4b33d42d77","modified":1590906860718},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1590899551333},{"_id":"themes/butterfly/layout/includes/comments/disqus.pug","hash":"821d968122bab8ce1ce04dc553b731eaf8e0d181","modified":1590899551012},{"_id":"themes/butterfly/layout/includes/comments/disqusjs.pug","hash":"050085054a68942e8833c6a4033fb437b6b01e52","modified":1590899551013},{"_id":"themes/butterfly/layout/includes/comments/facebook_comments.pug","hash":"7b7bb7d2b39b639cc8e1edf1274148460796662e","modified":1590899551024},{"_id":"themes/butterfly/layout/includes/comments/gitalk.pug","hash":"e98f5c199a76ad939a29a46c0dcbf7e85ec60ed2","modified":1590899551025},{"_id":"themes/butterfly/layout/includes/comments/laibili.pug","hash":"00022f763085b6852bc172b0ba91b0eacb403389","modified":1590899551026},{"_id":"themes/butterfly/layout/includes/comments/valine.pug","hash":"4f6e49639896bc8a4d4fe2257502f98ab63f6a7d","modified":1590899551041},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6ba5794cffb47cfd2727e388b7cd7370c43e3559","modified":1590899551042},{"_id":"themes/butterfly/layout/includes/comments/index.pug","hash":"f9556b40b00d5a566c64904afa833aa2e0d9449d","modified":1590899551025},{"_id":"themes/butterfly/layout/includes/comments/utterances.pug","hash":"9427cb07bcfe2bc7198755eeebf60f9fe430a342","modified":1590899551026},{"_id":"themes/butterfly/layout/includes/head/comment.pug","hash":"7de136bdce45afa81341b13e61b7a3926e15f03b","modified":1590899551057},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"dd7cd1b3b20873044e0c0ed1280001a0e06ea358","modified":1590899551057},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"8ec0609f14c284c3e6120940d7c4d7f1f201cd67","modified":1590899551053},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"2c7a5a097a2f815ba43a4e99c810405da3b9eebc","modified":1590899551057},{"_id":"themes/butterfly/layout/includes/head/dns_prefetch.pug","hash":"d2f81fadc68532cd27db8895c1834cdefb7e577e","modified":1590899551058},{"_id":"themes/butterfly/layout/includes/head/darkmode.pug","hash":"dcc8c01e1b0f8a4960ed873f49fb0f18d9912d21","modified":1590899551058},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"be1ff710e4381fc684243313dcadf0140d7469de","modified":1590899551061},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"f5c8ec73c797ff3455e732fa7c92c856692f3ce5","modified":1590899551185},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"47a10164395d8200c8d962df68a01e7deee4053b","modified":1590899551059},{"_id":"themes/butterfly/layout/includes/head/subtitle.pug","hash":"bbdb2280a74cd7b573b8e03e1c2b44c37571ad22","modified":1590899551186},{"_id":"themes/butterfly/layout/includes/header/header.pug","hash":"0b50e70efa91519e3ba7fa7a55e9603f33a8e6eb","modified":1590899551186},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"addeb5765ab0635c665dcca99f7918561131ae09","modified":1590899551187},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"e612fe17bbd8cb39772e9dac54df3fcd1da99ba6","modified":1590899551187},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9c50171335c65533af09a1c11648860b59be3299","modified":1590899551187},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d684f897fcdfe1e98300851b7fd955a30b68dd9","modified":1590899551188},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"3cf431a4f04997b55873f7099c1402155b19cc95","modified":1590899551189},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1590899551190},{"_id":"themes/butterfly/layout/includes/math/index.pug","hash":"ec97f284626b67208370b5084e5c5822844fa30a","modified":1590899551191},{"_id":"themes/butterfly/layout/includes/math/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1590899551191},{"_id":"themes/butterfly/layout/includes/math/mathjax.pug","hash":"6ccfaa776fc913ccf8b34825d918ab2b4d457434","modified":1590899551192},{"_id":"themes/butterfly/layout/includes/math/mermaid.pug","hash":"db848ff451d4c58670af415882ca6bb2e0da971b","modified":1590899551193},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"ff4ceda534cdd711cfa2cb9e95e36258988674e1","modified":1590899551059},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"53cd1b89dc4bc45c315a2f54bfce9d6c3a695f27","modified":1590899551194},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"40108322ce7f5b5ac52765ca39901fa2c00348d6","modified":1590899551196},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/index.pug","hash":"d12fab033fb32b55abbc9be9b04cc6ab6465b98e","modified":1590899551200},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/mobile-menus.pug","hash":"b7f1b9ff32ea868965e5dbb533c0117ce195663f","modified":1590899551201},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"8efc0b7886bdb5959e173b5e11f5ffb8d1c5230e","modified":1590899551208},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"b68b5c359544fd79e738e6f931334cba1155ac84","modified":1590904726510},{"_id":"themes/butterfly/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1590899551214},{"_id":"themes/butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1590899551215},{"_id":"themes/butterfly/layout/includes/search/local-search.pug","hash":"a45b5453e35479e58cd44b6bd2af0e08789890af","modified":1590899551216},{"_id":"themes/butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1590899551216},{"_id":"themes/butterfly/layout/includes/share/addtoany.pug","hash":"bbf5b70460b17c4fecb9ee6880aa71cdb2d807a8","modified":1590899551217},{"_id":"themes/butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1590899551218},{"_id":"themes/butterfly/layout/includes/share/share-js.pug","hash":"828a04c6e8e3a56c3c7f3c9bb1ecf4f99ed842fe","modified":1590899551219},{"_id":"themes/butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1590899551232},{"_id":"themes/butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1590899551232},{"_id":"themes/butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"b4acf48c98ba2a6a5a5fb5387a0fd610bdfd55ef","modified":1590899551233},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"3f7de99f4307ac9bfd89e669aaa7c2ae54d5224a","modified":1590899551234},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"2e940de1a6261fd378e16e4cd3362a9d69c12f50","modified":1590899551235},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"edf9658dbb95c964e4c6d60bd71d1dc7ebfbb0ac","modified":1590899551237},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"8274404ec2f83f1ba6439d42e8a4e29e932067ac","modified":1590899551238},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"56d27e39fa050a4d311d92b572ce291d7618026a","modified":1590899551247},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"9fe3e264236835cfb6a91f54ee96bb3a79e36539","modified":1590899551253},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"07eebb9d024feba44a2c66e04aef19151df8991c","modified":1590899551256},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"c0309c49a92c1176f008ad322f86a8a19031b41e","modified":1590899551301},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"6caff3cb958ccb0da7d88b51d87e22d27fcd9625","modified":1590899551301},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"15fb3730f829e237c102a70ab9781178471fd786","modified":1590899551302},{"_id":"themes/butterfly/source/css/_highlight/diff.styl","hash":"b0079f6da761935b720d70dafd826ef62fad86d2","modified":1590899551312},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"d9d19c2f5dbe671815b6048ff40b876e02d0fd7b","modified":1590899551311},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"efceb8105830544cef5e4afad3243326b3118fc1","modified":1590899551312},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"964d16c30f307ec354b47375aa5f00f0417c7bf0","modified":1590899551313},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"4a61f436cd9a44a3bb4259549b05adf72cd941d7","modified":1590899551312},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"aeadbc2b3a057ab11f409b584d8c39c1d72ed0e7","modified":1590899551313},{"_id":"themes/butterfly/source/css/_layout/category.styl","hash":"7267043e52a9e620adfa860bdb3e4de400ff2596","modified":1590899551314},{"_id":"themes/butterfly/source/css/_layout/flink.styl","hash":"0631c50cdccd29ca41fbac3423b2fd91a9be49b8","modified":1590899551314},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"d8709e29efcfa0a7356384026dfbaac8861d3baa","modified":1590899551314},{"_id":"themes/butterfly/source/css/_layout/loadding.styl","hash":"144ef01b03ae34d3ede4b9aa18f4c8cd3d6651ea","modified":1590899551315},{"_id":"themes/butterfly/source/css/_layout/mobile-sidebar.styl","hash":"5492d68c1c9bb85898d41b357f695d6fb17ec646","modified":1590899551316},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"a23ff8c52bfc581a741158c75f3d4923c4cdf810","modified":1590899551315},{"_id":"themes/butterfly/source/css/_layout/page.styl","hash":"970bd971b06411be85146c97ca30884ff3847910","modified":1590899551317},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"d6f0b7d9dc10761c15a5a2b84cc63e914a10d339","modified":1590899551318},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"e20057cc5a065078cb57821a63595ef9a0c36648","modified":1590899551318},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"1103f2cead8ab1aa9945c20c7d608bb4b829d2cd","modified":1590899551319},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"92b615795f02eff2a018edb425f923968c9e9814","modified":1590899551319},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"9a44881bd4c2aea0b0774809d91d58e4067496ed","modified":1590899551320},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"33da3da65715ce1a85b8ecab92e0eab6ce620a58","modified":1590899551320},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0fcfeef99c0bef8d48be9180b6fed5aace55acba","modified":1590899551320},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"919f0a869203a03ca783dd3fc9df1aeb229de2c2","modified":1590899551325},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"641ef2bc7af135c17fd90f3f974e78ebbaf1ac13","modified":1590899551326},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"da791f46239eabbbf28eb30b9e441f1ac2a8ced1","modified":1590899551326},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"d6af5c4f1966b5b575427c117712c173e23657ad","modified":1590899551327},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"e31b475cbac2af8d3401fba6382d34968c8063ef","modified":1590899551326},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"fa20ccacd51b0c87f4a9ae107bb20b629d5953ab","modified":1590899551321},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"a1de1df9f3cff44bcee7822107ec1e51d9a1b0b1","modified":1590899551328},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"1ec06d5ac4148798babd2475a5d10f0d3a1b5870","modified":1590899551328},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"001bd6d68a9b9af5dd0158fe116889434f36b1fd","modified":1590899551328},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1590899551336},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","hash":"2496200178510a12b2436947a93bb15120560937","modified":1590899551337},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1590899551337},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1590899551337},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1590899551338},{"_id":"themes/butterfly/source/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1590899551338},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"09219d497f54c834ec506a4f63d02f6cad7c2dc7","modified":1590899551336},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"497993860b3c42bdc926a3bd83b4b8f480febd99","modified":1590899551336},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1590899551336}],"Category":[],"Data":[{"_id":"butterfly","data":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"}}}],"Page":[],"Post":[{"title":"Centos7 系统快速环境开发搭建","date":"2019-06-11T17:16:34.000Z","_content":"\n\n\n系统安装略过，很简单！\n需要注意的是：确定需要安装 精简版(纯命令)和桌面版！\n阿里巴巴镜像库：https://opsx.alibaba.com\n\n### 网络配置\n\n```shell\n#进入配置目录\nvi /etc/sysconfig/network-scripts/ifcfg-ens33\n#修改noboot为“yes”\n:wq\n#重启网络\nservice network restart\n```\n\n### 安装基础命令(已装忽略)\n\n```shell\n#安装ipconfig命令 如果已安装请忽略\nyum install net-tools -y\n#安装wget命令\nyum install wget -y\n#brew mac软件源下载卡住问题\nvim ~/.bash_profile\n#新增一行\nexport HOMEBREW_NO_AUTO_UPDATE=true\n```\n\n### 远程ssh配置\n\n```shell\n#安装ssh服务\nyum -y install openssh\n#修改ssh配置\nvim /etc/ssh/sshd_config\n#PermitRootLogin yes\n#RSAAuthentication yes \n#PubkeyAuthentication yes\nssh root@192.168.4.199\n```\n\n### firewalld防火墙配置\n\n```shell\n#下载安装\nyum install -y firewalld\nyum install -y firewall-config \n#查看firewall的状态\nfirewall-cmd --state\n#启动\nsystemctl start firewalld\n#关闭\nsystemctl stop firewalld \n#查看firewalld当前状态\nsystemctl status firewalld \n#开机启动\nsystemctl enable firewalld \n#取消开机启动\nsystemctl disable firewalld \n#查看开放端口命令\nfirewall-cmd --list-ports\n#添加开放端口\nfirewall-cmd --permanent --zone=public --add-port=3306/tcp\nfirewall-cmd --zone=public --add-port=5000/tcp --permanent  #对外网全部开放\nfirewall-cmd --zone=public --permanent --add-rich-rule 'rule family=ipv4 source address=192.168.0.1/24 port port=22 protocol=tcp accept' #添加端口开放\nfirewall-cmd --permanent --remove-rich-rule 'rule family=ipv4 source address=192.168.0.1/2 port port=5000 protocol=tcp accept' #删除端口开放\n```\n\n### iptables-services(防火墙,非必须-可以解决mysql无法远程连接问题)\n\n```shell\n#查询是否已安装\nrpm -qa|grep -i iptables\n#安装\nyum install iptables-services\n#启动防火墙\nsystemctl enable iptables\nsystemctl start iptables\n#查看状态\nservice iptables status\n#打开&关闭\nservice iptables start \nservice iptables stop\n#开放端口(3306端口距离)\nvim /etc/sysconfig/iptables\n#添加  -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\n#重启防火墙\nsystemctl restart iptables\n#设置为系统服务，开机自启动\nsystemctl enable iptables.service\n```\n\n### 配置静态IP地址(防止总是自动修改)\n\n```shell\nvim /etc/sysconfig/network-scripts/ifcfg-enp0s3\n#----------------修改为以下配置---------------#\nTYPE=\"Ethernet\"\nBOOTPROTO=\"static\" #静态方式\nNM_CONTROLLED=\"no\" #不使用网络管理器\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"\nNAME=\"enp0s3\"\nUUID=\"2b4bcec5-6c11-411b-b7b5-177d6b1075b2\"\nDEVICE=\"enp0s3\"\nONBOOT=\"yes\"\n\n\nTYPE=\"Ethernet\"\nPROXY_METHOD=\"none\"\nBROWSER_ONLY=\"no\"\nBOOTPROTO=\"dhcp\"\nNM_CONTROLLED=\"no\"\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"\nNAME=\"em1\"\nUUID=\"a7e4500e-47f5-4df2-828b-205df54500f0\"\nDEVICE=\"em1\"\nONBOOT=\"yes\"\nHWADDR=\"e4:54:e8:c8:6c:31\"\n#设置固定ip\nIPADDR=192.168.4.199 \n#子网掩码为物理机子网掩码(subnet mask)\nNETMASK=255.255.255.0 \n#设置网关为物理机网关(gateway)\nGATEWAY=192.168.4.1 \n#----------------配置完成！---------------#\n#重启网卡\nservice network restart\n#----------------添加DNS服务器(非必须！)---------------#\nvim /etc/resolv.conf\n```\n\n## 安装开发软件\n\n### 安装mysql\n\n```shell\n#查询之前是否安装过MySQL\nrpm -qa|grep -i mysql\n#卸载旧版本MySQL\nrpm -e --nodeps  软件名称(上面查找出来的MySQL旧版本)\n#下载安装mysql wget 资源库\nwget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n#下载安装mysql yum 资源库\nyum -y install mysql57-community-release-el7-10.noarch.rpm\n#安装mysql服务器\nyum -y install mysql-community-server\n#获取mysql创建的随机密码\ngrep \"password\" /var/log/mysqld.log\n#添加可连接授权\ngrant replication slave on *.* to 'root'@'%' identified by '123456';\nflush privileges;\n```\n\n### 安装Mycat\n\n```shell\n#查询之前是否安装过MyCat\nrpm -qa|grep -i mysql\n#下载MyCat\nwget http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz\ntar -zvxf Mycat-server-1.5.1-RELEASE-20160602230303-linux.tar.gz \n#配置环境变量(非必要)\nexport MYCAT_HOME=/usr/local/mycat\nsource /etc/profile\n#测试是否生效：\necho $MYCAT_HOME\n```\n\n### 安装JavaJDK\n\n```shell\nyum install java java-1.8.0-openjdk-devel\n#环境变量\nwhereis java \nll /usr/lib/jvm\nvim /etc/profile\nexport JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.241-2.6.20.0.el7_7.x86_64\nexport JRE_HOME=${JAVA_HOME}\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\nsource /etc/profile\njava-version\n```\n\n### 安装Maven环境变量配置\n\n```shell\n#下载\nhttps://maven.apache.org/download.cgi\nwget https://www-eu.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz\ntar -zxf apache-maven-3.6.1-bin.tar.gz \n#环境变量\nvim /etc/profile\nvim ~/.bash_profile \nexport MAVEN_HOME=/usr/java/dev_tools/apache-maven-3.6.3\nexport PATH=$MAVEN_HOME/bin:$PATH\n#测试\nsource /etc/profile\nmvn -version\n```\n\n### 安装git配置\n\n```shell\n#下载\nyum install git \n#配置git账号密码(非必须)\ngit config --global user.name [username]\ngit config --global user.password [userpassword]\ngit config --global credential.helper store\n```\n\n### 部署Jar项目脚本\n\n```shell\n#! /bin/bash\necho \"测试环境[app]启动部署，使用pipeline分支\"\nsleep 3s;\ncd /root/klks-cloud-source/klks-cloud-platform/\ngit checkout dev\ngit pull\nmvn clean install -Dmaven.test.skip=true\ncd  /usr/java/klks-cloud/\nPID=`ps -ef |grep \"klks-app\" |grep -v \"grep\" | awk '{print $2}'`\necho $PID\nkill -9 $PID\nsleep 5s\nrm klks-app-1.0.0.jar -rf \ncp /root/klks-cloud-source/klks-cloud-platform/klks-app/target/klks-app-1.0.0.jar .\nnohup java -jar -Dspring.profiles.active=dev klks-app-1.0.0.jar >> app.log & tail -f app.log\n```\n\n","source":"_posts/Centos7 系统快速环境开发搭建.md","raw":"---\ntitle: Centos7 系统快速环境开发搭建\n\ndate: 2019/06/12 01:16:34\n\n---\n\n\n\n系统安装略过，很简单！\n需要注意的是：确定需要安装 精简版(纯命令)和桌面版！\n阿里巴巴镜像库：https://opsx.alibaba.com\n\n### 网络配置\n\n```shell\n#进入配置目录\nvi /etc/sysconfig/network-scripts/ifcfg-ens33\n#修改noboot为“yes”\n:wq\n#重启网络\nservice network restart\n```\n\n### 安装基础命令(已装忽略)\n\n```shell\n#安装ipconfig命令 如果已安装请忽略\nyum install net-tools -y\n#安装wget命令\nyum install wget -y\n#brew mac软件源下载卡住问题\nvim ~/.bash_profile\n#新增一行\nexport HOMEBREW_NO_AUTO_UPDATE=true\n```\n\n### 远程ssh配置\n\n```shell\n#安装ssh服务\nyum -y install openssh\n#修改ssh配置\nvim /etc/ssh/sshd_config\n#PermitRootLogin yes\n#RSAAuthentication yes \n#PubkeyAuthentication yes\nssh root@192.168.4.199\n```\n\n### firewalld防火墙配置\n\n```shell\n#下载安装\nyum install -y firewalld\nyum install -y firewall-config \n#查看firewall的状态\nfirewall-cmd --state\n#启动\nsystemctl start firewalld\n#关闭\nsystemctl stop firewalld \n#查看firewalld当前状态\nsystemctl status firewalld \n#开机启动\nsystemctl enable firewalld \n#取消开机启动\nsystemctl disable firewalld \n#查看开放端口命令\nfirewall-cmd --list-ports\n#添加开放端口\nfirewall-cmd --permanent --zone=public --add-port=3306/tcp\nfirewall-cmd --zone=public --add-port=5000/tcp --permanent  #对外网全部开放\nfirewall-cmd --zone=public --permanent --add-rich-rule 'rule family=ipv4 source address=192.168.0.1/24 port port=22 protocol=tcp accept' #添加端口开放\nfirewall-cmd --permanent --remove-rich-rule 'rule family=ipv4 source address=192.168.0.1/2 port port=5000 protocol=tcp accept' #删除端口开放\n```\n\n### iptables-services(防火墙,非必须-可以解决mysql无法远程连接问题)\n\n```shell\n#查询是否已安装\nrpm -qa|grep -i iptables\n#安装\nyum install iptables-services\n#启动防火墙\nsystemctl enable iptables\nsystemctl start iptables\n#查看状态\nservice iptables status\n#打开&关闭\nservice iptables start \nservice iptables stop\n#开放端口(3306端口距离)\nvim /etc/sysconfig/iptables\n#添加  -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\n#重启防火墙\nsystemctl restart iptables\n#设置为系统服务，开机自启动\nsystemctl enable iptables.service\n```\n\n### 配置静态IP地址(防止总是自动修改)\n\n```shell\nvim /etc/sysconfig/network-scripts/ifcfg-enp0s3\n#----------------修改为以下配置---------------#\nTYPE=\"Ethernet\"\nBOOTPROTO=\"static\" #静态方式\nNM_CONTROLLED=\"no\" #不使用网络管理器\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"\nNAME=\"enp0s3\"\nUUID=\"2b4bcec5-6c11-411b-b7b5-177d6b1075b2\"\nDEVICE=\"enp0s3\"\nONBOOT=\"yes\"\n\n\nTYPE=\"Ethernet\"\nPROXY_METHOD=\"none\"\nBROWSER_ONLY=\"no\"\nBOOTPROTO=\"dhcp\"\nNM_CONTROLLED=\"no\"\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"\nNAME=\"em1\"\nUUID=\"a7e4500e-47f5-4df2-828b-205df54500f0\"\nDEVICE=\"em1\"\nONBOOT=\"yes\"\nHWADDR=\"e4:54:e8:c8:6c:31\"\n#设置固定ip\nIPADDR=192.168.4.199 \n#子网掩码为物理机子网掩码(subnet mask)\nNETMASK=255.255.255.0 \n#设置网关为物理机网关(gateway)\nGATEWAY=192.168.4.1 \n#----------------配置完成！---------------#\n#重启网卡\nservice network restart\n#----------------添加DNS服务器(非必须！)---------------#\nvim /etc/resolv.conf\n```\n\n## 安装开发软件\n\n### 安装mysql\n\n```shell\n#查询之前是否安装过MySQL\nrpm -qa|grep -i mysql\n#卸载旧版本MySQL\nrpm -e --nodeps  软件名称(上面查找出来的MySQL旧版本)\n#下载安装mysql wget 资源库\nwget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n#下载安装mysql yum 资源库\nyum -y install mysql57-community-release-el7-10.noarch.rpm\n#安装mysql服务器\nyum -y install mysql-community-server\n#获取mysql创建的随机密码\ngrep \"password\" /var/log/mysqld.log\n#添加可连接授权\ngrant replication slave on *.* to 'root'@'%' identified by '123456';\nflush privileges;\n```\n\n### 安装Mycat\n\n```shell\n#查询之前是否安装过MyCat\nrpm -qa|grep -i mysql\n#下载MyCat\nwget http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz\ntar -zvxf Mycat-server-1.5.1-RELEASE-20160602230303-linux.tar.gz \n#配置环境变量(非必要)\nexport MYCAT_HOME=/usr/local/mycat\nsource /etc/profile\n#测试是否生效：\necho $MYCAT_HOME\n```\n\n### 安装JavaJDK\n\n```shell\nyum install java java-1.8.0-openjdk-devel\n#环境变量\nwhereis java \nll /usr/lib/jvm\nvim /etc/profile\nexport JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.241-2.6.20.0.el7_7.x86_64\nexport JRE_HOME=${JAVA_HOME}\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\nsource /etc/profile\njava-version\n```\n\n### 安装Maven环境变量配置\n\n```shell\n#下载\nhttps://maven.apache.org/download.cgi\nwget https://www-eu.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz\ntar -zxf apache-maven-3.6.1-bin.tar.gz \n#环境变量\nvim /etc/profile\nvim ~/.bash_profile \nexport MAVEN_HOME=/usr/java/dev_tools/apache-maven-3.6.3\nexport PATH=$MAVEN_HOME/bin:$PATH\n#测试\nsource /etc/profile\nmvn -version\n```\n\n### 安装git配置\n\n```shell\n#下载\nyum install git \n#配置git账号密码(非必须)\ngit config --global user.name [username]\ngit config --global user.password [userpassword]\ngit config --global credential.helper store\n```\n\n### 部署Jar项目脚本\n\n```shell\n#! /bin/bash\necho \"测试环境[app]启动部署，使用pipeline分支\"\nsleep 3s;\ncd /root/klks-cloud-source/klks-cloud-platform/\ngit checkout dev\ngit pull\nmvn clean install -Dmaven.test.skip=true\ncd  /usr/java/klks-cloud/\nPID=`ps -ef |grep \"klks-app\" |grep -v \"grep\" | awk '{print $2}'`\necho $PID\nkill -9 $PID\nsleep 5s\nrm klks-app-1.0.0.jar -rf \ncp /root/klks-cloud-source/klks-cloud-platform/klks-app/target/klks-app-1.0.0.jar .\nnohup java -jar -Dspring.profiles.active=dev klks-app-1.0.0.jar >> app.log & tail -f app.log\n```\n\n","slug":"Centos7 系统快速环境开发搭建","published":1,"updated":"2020-05-30T16:28:42.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hp90000sx014kqsfsls","content":"<p>系统安装略过，很简单！<br>需要注意的是：确定需要安装 精简版(纯命令)和桌面版！<br>阿里巴巴镜像库：<a href=\"https://opsx.alibaba.com\" target=\"_blank\" rel=\"noopener\">https://opsx.alibaba.com</a></p>\n<h3 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入配置目录</span></span><br><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改noboot为“yes”</span></span><br><span class=\"line\">:wq</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启网络</span></span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装基础命令-已装忽略\"><a href=\"#安装基础命令-已装忽略\" class=\"headerlink\" title=\"安装基础命令(已装忽略)\"></a>安装基础命令(已装忽略)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装ipconfig命令 如果已安装请忽略</span></span><br><span class=\"line\">yum install net-tools -y</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装wget命令</span></span><br><span class=\"line\">yum install wget -y</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">brew mac软件源下载卡住问题</span></span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">新增一行</span></span><br><span class=\"line\">export HOMEBREW_NO_AUTO_UPDATE=true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"远程ssh配置\"><a href=\"#远程ssh配置\" class=\"headerlink\" title=\"远程ssh配置\"></a>远程ssh配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装ssh服务</span></span><br><span class=\"line\">yum -y install openssh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改ssh配置</span></span><br><span class=\"line\">vim /etc/ssh/sshd_config</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">PermitRootLogin yes</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">RSAAuthentication yes </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">PubkeyAuthentication yes</span></span><br><span class=\"line\">ssh root@192.168.4.199</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"firewalld防火墙配置\"><a href=\"#firewalld防火墙配置\" class=\"headerlink\" title=\"firewalld防火墙配置\"></a>firewalld防火墙配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载安装</span></span><br><span class=\"line\">yum install -y firewalld</span><br><span class=\"line\">yum install -y firewall-config </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看firewall的状态</span></span><br><span class=\"line\">firewall-cmd --state</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭</span></span><br><span class=\"line\">systemctl stop firewalld </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看firewalld当前状态</span></span><br><span class=\"line\">systemctl status firewalld </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机启动</span></span><br><span class=\"line\">systemctl enable firewalld </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">取消开机启动</span></span><br><span class=\"line\">systemctl disable firewalld </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看开放端口命令</span></span><br><span class=\"line\">firewall-cmd --list-ports</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加开放端口</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=3306/tcp</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=5000/tcp --permanent  #对外网全部开放</span><br><span class=\"line\">firewall-cmd --zone=public --permanent --add-rich-rule 'rule family=ipv4 source address=192.168.0.1/24 port port=22 protocol=tcp accept' #添加端口开放</span><br><span class=\"line\">firewall-cmd --permanent --remove-rich-rule 'rule family=ipv4 source address=192.168.0.1/2 port port=5000 protocol=tcp accept' #删除端口开放</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"iptables-services-防火墙-非必须-可以解决mysql无法远程连接问题\"><a href=\"#iptables-services-防火墙-非必须-可以解决mysql无法远程连接问题\" class=\"headerlink\" title=\"iptables-services(防火墙,非必须-可以解决mysql无法远程连接问题)\"></a>iptables-services(防火墙,非必须-可以解决mysql无法远程连接问题)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查询是否已安装</span></span><br><span class=\"line\">rpm -qa|grep -i iptables</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装</span></span><br><span class=\"line\">yum install iptables-services</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动防火墙</span></span><br><span class=\"line\">systemctl enable iptables</span><br><span class=\"line\">systemctl start iptables</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看状态</span></span><br><span class=\"line\">service iptables status</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">打开&amp;关闭</span></span><br><span class=\"line\">service iptables start </span><br><span class=\"line\">service iptables stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开放端口(3306端口距离)</span></span><br><span class=\"line\">vim /etc/sysconfig/iptables</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加  -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启防火墙</span></span><br><span class=\"line\">systemctl restart iptables</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置为系统服务，开机自启动</span></span><br><span class=\"line\">systemctl enable iptables.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置静态IP地址-防止总是自动修改\"><a href=\"#配置静态IP地址-防止总是自动修改\" class=\"headerlink\" title=\"配置静态IP地址(防止总是自动修改)\"></a>配置静态IP地址(防止总是自动修改)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">----------------修改为以下配置---------------<span class=\"comment\">#</span></span></span><br><span class=\"line\">TYPE=\"Ethernet\"</span><br><span class=\"line\">BOOTPROTO=\"static\" #静态方式</span><br><span class=\"line\">NM_CONTROLLED=\"no\" #不使用网络管理器</span><br><span class=\"line\">DEFROUTE=\"yes\"</span><br><span class=\"line\">IPV4_FAILURE_FATAL=\"no\"</span><br><span class=\"line\">IPV6INIT=\"yes\"</span><br><span class=\"line\">IPV6_AUTOCONF=\"yes\"</span><br><span class=\"line\">IPV6_DEFROUTE=\"yes\"</span><br><span class=\"line\">IPV6_FAILURE_FATAL=\"no\"</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=\"stable-privacy\"</span><br><span class=\"line\">NAME=\"enp0s3\"</span><br><span class=\"line\">UUID=\"2b4bcec5-6c11-411b-b7b5-177d6b1075b2\"</span><br><span class=\"line\">DEVICE=\"enp0s3\"</span><br><span class=\"line\">ONBOOT=\"yes\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TYPE=\"Ethernet\"</span><br><span class=\"line\">PROXY_METHOD=\"none\"</span><br><span class=\"line\">BROWSER_ONLY=\"no\"</span><br><span class=\"line\">BOOTPROTO=\"dhcp\"</span><br><span class=\"line\">NM_CONTROLLED=\"no\"</span><br><span class=\"line\">DEFROUTE=\"yes\"</span><br><span class=\"line\">IPV4_FAILURE_FATAL=\"no\"</span><br><span class=\"line\">IPV6INIT=\"yes\"</span><br><span class=\"line\">IPV6_AUTOCONF=\"yes\"</span><br><span class=\"line\">IPV6_DEFROUTE=\"yes\"</span><br><span class=\"line\">IPV6_FAILURE_FATAL=\"no\"</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=\"stable-privacy\"</span><br><span class=\"line\">NAME=\"em1\"</span><br><span class=\"line\">UUID=\"a7e4500e-47f5-4df2-828b-205df54500f0\"</span><br><span class=\"line\">DEVICE=\"em1\"</span><br><span class=\"line\">ONBOOT=\"yes\"</span><br><span class=\"line\">HWADDR=\"e4:54:e8:c8:6c:31\"</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置固定ip</span></span><br><span class=\"line\">IPADDR=192.168.4.199 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">子网掩码为物理机子网掩码(subnet mask)</span></span><br><span class=\"line\">NETMASK=255.255.255.0 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置网关为物理机网关(gateway)</span></span><br><span class=\"line\">GATEWAY=192.168.4.1 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">----------------配置完成！---------------<span class=\"comment\">#</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启网卡</span></span><br><span class=\"line\">service network restart</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">----------------添加DNS服务器(非必须！)---------------<span class=\"comment\">#</span></span></span><br><span class=\"line\">vim /etc/resolv.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装开发软件\"><a href=\"#安装开发软件\" class=\"headerlink\" title=\"安装开发软件\"></a>安装开发软件</h2><h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查询之前是否安装过MySQL</span></span><br><span class=\"line\">rpm -qa|grep -i mysql</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载旧版本MySQL</span></span><br><span class=\"line\">rpm -e --nodeps  软件名称(上面查找出来的MySQL旧版本)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载安装mysql wget 资源库</span></span><br><span class=\"line\">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载安装mysql yum 资源库</span></span><br><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装mysql服务器</span></span><br><span class=\"line\">yum -y install mysql-community-server</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">获取mysql创建的随机密码</span></span><br><span class=\"line\">grep \"password\" /var/log/mysqld.log</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加可连接授权</span></span><br><span class=\"line\">grant replication slave on *.* to 'root'@'%' identified by '123456';</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Mycat\"><a href=\"#安装Mycat\" class=\"headerlink\" title=\"安装Mycat\"></a>安装Mycat</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查询之前是否安装过MyCat</span></span><br><span class=\"line\">rpm -qa|grep -i mysql</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载MyCat</span></span><br><span class=\"line\">wget http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</span><br><span class=\"line\">tar -zvxf Mycat-server-1.5.1-RELEASE-20160602230303-linux.tar.gz </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置环境变量(非必要)</span></span><br><span class=\"line\">export MYCAT_HOME=/usr/local/mycat</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">测试是否生效：</span></span><br><span class=\"line\">echo $MYCAT_HOME</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装JavaJDK\"><a href=\"#安装JavaJDK\" class=\"headerlink\" title=\"安装JavaJDK\"></a>安装JavaJDK</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install java java-1.8.0-openjdk-devel</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">环境变量</span></span><br><span class=\"line\">whereis java </span><br><span class=\"line\">ll /usr/lib/jvm</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.241-2.6.20.0.el7_7.x86_64</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">java-version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Maven环境变量配置\"><a href=\"#安装Maven环境变量配置\" class=\"headerlink\" title=\"安装Maven环境变量配置\"></a>安装Maven环境变量配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载</span></span><br><span class=\"line\">https://maven.apache.org/download.cgi</span><br><span class=\"line\">wget https://www-eu.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class=\"line\">tar -zxf apache-maven-3.6.1-bin.tar.gz </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">环境变量</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">vim ~/.bash_profile </span><br><span class=\"line\">export MAVEN_HOME=/usr/java/dev_tools/apache-maven-3.6.3</span><br><span class=\"line\">export PATH=$MAVEN_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">测试</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">mvn -version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装git配置\"><a href=\"#安装git配置\" class=\"headerlink\" title=\"安装git配置\"></a>安装git配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载</span></span><br><span class=\"line\">yum install git </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置git账号密码(非必须)</span></span><br><span class=\"line\">git config --global user.name [username]</span><br><span class=\"line\">git config --global user.password [userpassword]</span><br><span class=\"line\">git config --global credential.helper store</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署Jar项目脚本\"><a href=\"#部署Jar项目脚本\" class=\"headerlink\" title=\"部署Jar项目脚本\"></a>部署Jar项目脚本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">! /bin/bash</span></span><br><span class=\"line\">echo \"测试环境[app]启动部署，使用pipeline分支\"</span><br><span class=\"line\">sleep 3s;</span><br><span class=\"line\">cd /root/klks-cloud-source/klks-cloud-platform/</span><br><span class=\"line\">git checkout dev</span><br><span class=\"line\">git pull</span><br><span class=\"line\">mvn clean install -Dmaven.test.skip=true</span><br><span class=\"line\">cd  /usr/java/klks-cloud/</span><br><span class=\"line\">PID=`ps -ef |grep \"klks-app\" |grep -v \"grep\" | awk '&#123;print $2&#125;'`</span><br><span class=\"line\">echo $PID</span><br><span class=\"line\">kill -9 $PID</span><br><span class=\"line\">sleep 5s</span><br><span class=\"line\">rm klks-app-1.0.0.jar -rf </span><br><span class=\"line\">cp /root/klks-cloud-source/klks-cloud-platform/klks-app/target/klks-app-1.0.0.jar .</span><br><span class=\"line\">nohup java -jar -Dspring.profiles.active=dev klks-app-1.0.0.jar &gt;&gt; app.log &amp; tail -f app.log</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<p>系统安装略过，很简单！<br>需要注意的是：确定需要安装 精简版(纯命令)和桌面版！<br>阿里巴巴镜像库：<a href=\"https://opsx.alibaba.com\" target=\"_blank\" rel=\"noopener\">https://opsx.alibaba.com</a></p>\n<h3 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入配置目录</span></span><br><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改noboot为“yes”</span></span><br><span class=\"line\">:wq</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启网络</span></span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装基础命令-已装忽略\"><a href=\"#安装基础命令-已装忽略\" class=\"headerlink\" title=\"安装基础命令(已装忽略)\"></a>安装基础命令(已装忽略)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装ipconfig命令 如果已安装请忽略</span></span><br><span class=\"line\">yum install net-tools -y</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装wget命令</span></span><br><span class=\"line\">yum install wget -y</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">brew mac软件源下载卡住问题</span></span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">新增一行</span></span><br><span class=\"line\">export HOMEBREW_NO_AUTO_UPDATE=true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"远程ssh配置\"><a href=\"#远程ssh配置\" class=\"headerlink\" title=\"远程ssh配置\"></a>远程ssh配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装ssh服务</span></span><br><span class=\"line\">yum -y install openssh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改ssh配置</span></span><br><span class=\"line\">vim /etc/ssh/sshd_config</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">PermitRootLogin yes</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">RSAAuthentication yes </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">PubkeyAuthentication yes</span></span><br><span class=\"line\">ssh root@192.168.4.199</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"firewalld防火墙配置\"><a href=\"#firewalld防火墙配置\" class=\"headerlink\" title=\"firewalld防火墙配置\"></a>firewalld防火墙配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载安装</span></span><br><span class=\"line\">yum install -y firewalld</span><br><span class=\"line\">yum install -y firewall-config </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看firewall的状态</span></span><br><span class=\"line\">firewall-cmd --state</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭</span></span><br><span class=\"line\">systemctl stop firewalld </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看firewalld当前状态</span></span><br><span class=\"line\">systemctl status firewalld </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机启动</span></span><br><span class=\"line\">systemctl enable firewalld </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">取消开机启动</span></span><br><span class=\"line\">systemctl disable firewalld </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看开放端口命令</span></span><br><span class=\"line\">firewall-cmd --list-ports</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加开放端口</span></span><br><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=3306/tcp</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=5000/tcp --permanent  #对外网全部开放</span><br><span class=\"line\">firewall-cmd --zone=public --permanent --add-rich-rule 'rule family=ipv4 source address=192.168.0.1/24 port port=22 protocol=tcp accept' #添加端口开放</span><br><span class=\"line\">firewall-cmd --permanent --remove-rich-rule 'rule family=ipv4 source address=192.168.0.1/2 port port=5000 protocol=tcp accept' #删除端口开放</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"iptables-services-防火墙-非必须-可以解决mysql无法远程连接问题\"><a href=\"#iptables-services-防火墙-非必须-可以解决mysql无法远程连接问题\" class=\"headerlink\" title=\"iptables-services(防火墙,非必须-可以解决mysql无法远程连接问题)\"></a>iptables-services(防火墙,非必须-可以解决mysql无法远程连接问题)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查询是否已安装</span></span><br><span class=\"line\">rpm -qa|grep -i iptables</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装</span></span><br><span class=\"line\">yum install iptables-services</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动防火墙</span></span><br><span class=\"line\">systemctl enable iptables</span><br><span class=\"line\">systemctl start iptables</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看状态</span></span><br><span class=\"line\">service iptables status</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">打开&amp;关闭</span></span><br><span class=\"line\">service iptables start </span><br><span class=\"line\">service iptables stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开放端口(3306端口距离)</span></span><br><span class=\"line\">vim /etc/sysconfig/iptables</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加  -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启防火墙</span></span><br><span class=\"line\">systemctl restart iptables</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置为系统服务，开机自启动</span></span><br><span class=\"line\">systemctl enable iptables.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置静态IP地址-防止总是自动修改\"><a href=\"#配置静态IP地址-防止总是自动修改\" class=\"headerlink\" title=\"配置静态IP地址(防止总是自动修改)\"></a>配置静态IP地址(防止总是自动修改)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">----------------修改为以下配置---------------<span class=\"comment\">#</span></span></span><br><span class=\"line\">TYPE=\"Ethernet\"</span><br><span class=\"line\">BOOTPROTO=\"static\" #静态方式</span><br><span class=\"line\">NM_CONTROLLED=\"no\" #不使用网络管理器</span><br><span class=\"line\">DEFROUTE=\"yes\"</span><br><span class=\"line\">IPV4_FAILURE_FATAL=\"no\"</span><br><span class=\"line\">IPV6INIT=\"yes\"</span><br><span class=\"line\">IPV6_AUTOCONF=\"yes\"</span><br><span class=\"line\">IPV6_DEFROUTE=\"yes\"</span><br><span class=\"line\">IPV6_FAILURE_FATAL=\"no\"</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=\"stable-privacy\"</span><br><span class=\"line\">NAME=\"enp0s3\"</span><br><span class=\"line\">UUID=\"2b4bcec5-6c11-411b-b7b5-177d6b1075b2\"</span><br><span class=\"line\">DEVICE=\"enp0s3\"</span><br><span class=\"line\">ONBOOT=\"yes\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">TYPE=\"Ethernet\"</span><br><span class=\"line\">PROXY_METHOD=\"none\"</span><br><span class=\"line\">BROWSER_ONLY=\"no\"</span><br><span class=\"line\">BOOTPROTO=\"dhcp\"</span><br><span class=\"line\">NM_CONTROLLED=\"no\"</span><br><span class=\"line\">DEFROUTE=\"yes\"</span><br><span class=\"line\">IPV4_FAILURE_FATAL=\"no\"</span><br><span class=\"line\">IPV6INIT=\"yes\"</span><br><span class=\"line\">IPV6_AUTOCONF=\"yes\"</span><br><span class=\"line\">IPV6_DEFROUTE=\"yes\"</span><br><span class=\"line\">IPV6_FAILURE_FATAL=\"no\"</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=\"stable-privacy\"</span><br><span class=\"line\">NAME=\"em1\"</span><br><span class=\"line\">UUID=\"a7e4500e-47f5-4df2-828b-205df54500f0\"</span><br><span class=\"line\">DEVICE=\"em1\"</span><br><span class=\"line\">ONBOOT=\"yes\"</span><br><span class=\"line\">HWADDR=\"e4:54:e8:c8:6c:31\"</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置固定ip</span></span><br><span class=\"line\">IPADDR=192.168.4.199 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">子网掩码为物理机子网掩码(subnet mask)</span></span><br><span class=\"line\">NETMASK=255.255.255.0 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置网关为物理机网关(gateway)</span></span><br><span class=\"line\">GATEWAY=192.168.4.1 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">----------------配置完成！---------------<span class=\"comment\">#</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启网卡</span></span><br><span class=\"line\">service network restart</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">----------------添加DNS服务器(非必须！)---------------<span class=\"comment\">#</span></span></span><br><span class=\"line\">vim /etc/resolv.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装开发软件\"><a href=\"#安装开发软件\" class=\"headerlink\" title=\"安装开发软件\"></a>安装开发软件</h2><h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查询之前是否安装过MySQL</span></span><br><span class=\"line\">rpm -qa|grep -i mysql</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载旧版本MySQL</span></span><br><span class=\"line\">rpm -e --nodeps  软件名称(上面查找出来的MySQL旧版本)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载安装mysql wget 资源库</span></span><br><span class=\"line\">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载安装mysql yum 资源库</span></span><br><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装mysql服务器</span></span><br><span class=\"line\">yum -y install mysql-community-server</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">获取mysql创建的随机密码</span></span><br><span class=\"line\">grep \"password\" /var/log/mysqld.log</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加可连接授权</span></span><br><span class=\"line\">grant replication slave on *.* to 'root'@'%' identified by '123456';</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Mycat\"><a href=\"#安装Mycat\" class=\"headerlink\" title=\"安装Mycat\"></a>安装Mycat</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查询之前是否安装过MyCat</span></span><br><span class=\"line\">rpm -qa|grep -i mysql</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载MyCat</span></span><br><span class=\"line\">wget http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</span><br><span class=\"line\">tar -zvxf Mycat-server-1.5.1-RELEASE-20160602230303-linux.tar.gz </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置环境变量(非必要)</span></span><br><span class=\"line\">export MYCAT_HOME=/usr/local/mycat</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">测试是否生效：</span></span><br><span class=\"line\">echo $MYCAT_HOME</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装JavaJDK\"><a href=\"#安装JavaJDK\" class=\"headerlink\" title=\"安装JavaJDK\"></a>安装JavaJDK</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install java java-1.8.0-openjdk-devel</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">环境变量</span></span><br><span class=\"line\">whereis java </span><br><span class=\"line\">ll /usr/lib/jvm</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.241-2.6.20.0.el7_7.x86_64</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">java-version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Maven环境变量配置\"><a href=\"#安装Maven环境变量配置\" class=\"headerlink\" title=\"安装Maven环境变量配置\"></a>安装Maven环境变量配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载</span></span><br><span class=\"line\">https://maven.apache.org/download.cgi</span><br><span class=\"line\">wget https://www-eu.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class=\"line\">tar -zxf apache-maven-3.6.1-bin.tar.gz </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">环境变量</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">vim ~/.bash_profile </span><br><span class=\"line\">export MAVEN_HOME=/usr/java/dev_tools/apache-maven-3.6.3</span><br><span class=\"line\">export PATH=$MAVEN_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">测试</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\">mvn -version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装git配置\"><a href=\"#安装git配置\" class=\"headerlink\" title=\"安装git配置\"></a>安装git配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下载</span></span><br><span class=\"line\">yum install git </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置git账号密码(非必须)</span></span><br><span class=\"line\">git config --global user.name [username]</span><br><span class=\"line\">git config --global user.password [userpassword]</span><br><span class=\"line\">git config --global credential.helper store</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署Jar项目脚本\"><a href=\"#部署Jar项目脚本\" class=\"headerlink\" title=\"部署Jar项目脚本\"></a>部署Jar项目脚本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">! /bin/bash</span></span><br><span class=\"line\">echo \"测试环境[app]启动部署，使用pipeline分支\"</span><br><span class=\"line\">sleep 3s;</span><br><span class=\"line\">cd /root/klks-cloud-source/klks-cloud-platform/</span><br><span class=\"line\">git checkout dev</span><br><span class=\"line\">git pull</span><br><span class=\"line\">mvn clean install -Dmaven.test.skip=true</span><br><span class=\"line\">cd  /usr/java/klks-cloud/</span><br><span class=\"line\">PID=`ps -ef |grep \"klks-app\" |grep -v \"grep\" | awk '&#123;print $2&#125;'`</span><br><span class=\"line\">echo $PID</span><br><span class=\"line\">kill -9 $PID</span><br><span class=\"line\">sleep 5s</span><br><span class=\"line\">rm klks-app-1.0.0.jar -rf </span><br><span class=\"line\">cp /root/klks-cloud-source/klks-cloud-platform/klks-app/target/klks-app-1.0.0.jar .</span><br><span class=\"line\">nohup java -jar -Dspring.profiles.active=dev klks-app-1.0.0.jar &gt;&gt; app.log &amp; tail -f app.log</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Docker-入门","date":"2019-05-14T03:59:44.000Z","_content":"\n#### 1）、安装linux虚拟机\n\n​\t1）、VMWare、VirtualBox（安装）；\n\n​\t2）、导入虚拟机文件centos7-atguigu.ova；\n\n​\t3）、双击启动linux虚拟机;使用  root/ 123456登陆\n\n​\t4）、使用客户端连接linux服务器进行命令操作；\n\n​\t5）、设置虚拟机网络；\n\n​\t\t桥接网络===选好网卡====接入网线；\n\n​\t6）、设置好网络以后使用命令重启虚拟机的网络\n\n```\nservice network restart\nip addr\n1、检查内核版本，必须是3.10及以上\nuname -r\n2、安装docker\nyum install docker\n3、输入y确认安装\n4、启动docker\n[root@localhost ~]# systemctl start docker\n[root@localhost ~]# docker -v\nDocker version 1.12.6, build 3e8e77d/1.12.6\n5、开机启动docker\n[root@localhost ~]# systemctl enable docker\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\n6、停止docker\nsystemctl stop docker\n1、搜索镜像\n[root@localhost ~]# docker search tomcat\n2、拉取镜像\n[root@localhost ~]# docker pull tomcat\n3、根据镜像启动容器\ndocker run --name mytomcat -d tomcat:latest\n4、docker ps  \n查看运行中的容器\n5、 停止运行中的容器\ndocker stop  容器的id\n6、查看所有的容器\ndocker ps -a\n7、启动容器\ndocker start 容器id\n8、删除一个容器\n docker rm 容器id\n9、启动一个做了端口映射的tomcat\n[root@localhost ~]# docker run -d -p 8888:8080 tomcat\n-d：后台运行\n-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口\n\n10、为了演示简单关闭了linux的防火墙\nservice firewalld status ；查看防火墙状态\nservice firewalld stop：关闭防火墙\n11、查看容器的日志\ndocker logs container-name/container-id\n\n更多命令参看\nhttps://docs.docker.com/engine/reference/commandline/docker/\n可以参考每一个镜像的文档\n\ndocker pull mysql\n[root@localhost ~]# docker run --name mysql01 -d mysql\n42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846\n\nmysql退出了\n[root@localhost ~]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES\n42f09819908b        mysql               \"docker-entrypoint.sh\"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01\n538bde63e500        tomcat              \"catalina.sh run\"        About an hour ago   Exited (143) About an hour ago                       compassionate_\ngoldstine\nc4f1ac60b3fc        tomcat              \"catalina.sh run\"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi\n81ec743a5271        tomcat              \"catalina.sh run\"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan\n\n\n//错误日志\n[root@localhost ~]# docker logs 42f09819908b\nerror: database is uninitialized and password option is not specified \n  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个\n[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql\nb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f\n[root@localhost ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\nb874c56bec49        mysql               \"docker-entrypoint.sh\"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01\n[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql\nad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434\n[root@localhost ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\nad10e4bc5c6a        mysql               \"docker-entrypoint.sh\"   4 seconds ago       Up 2 seconds        0.0.0.0:3306->3306/tcp   mysql02\ndocker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面\n改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）\n\ndocker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n指定mysql的一些配置参数\n```\n\n\n\n几个其他的高级操作\n\n\n\n做了端口映射\n\n正确的启动\n\n错误的启动\n\n\n\n### 3）、安装MySQL示例\n\n\n\n步骤：\n\n软件镜像（QQ安装程序）----运行镜像----产生一个容器（正在运行的软件，运行的QQ）；\n\n### 2）、容器操作\n\nhttps://hub.docker.com/\n\n| 操作 | 命令                                            | 说明                                                     |\n| ---- | ----------------------------------------------- | -------------------------------------------------------- |\n| 检索 | docker  search 关键字  eg：docker  search redis | 我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。 |\n| 拉取 | docker pull 镜像名:tag                          | :tag是可选的，tag表示标签，多为软件的版本，默认是latest  |\n| 列表 | docker images                                   | 查看所有本地镜像                                         |\n| 删除 | docker rmi image-id                             | 删除指定的本地镜像                                       |\n\n### 1）、镜像操作\n\n## 4、Docker常用命令&操作\n\n步骤：\n\n#### 2）、在linux虚拟机上安装docker\n\n​\t8）、使用客户端连接linux；\n\n​\t7）、查看linux的ip地址","source":"_posts/Docker-入门.md","raw":"---\ntitle: Docker-入门\ndate: 2019/05/14 11:59:44\n---\n\n#### 1）、安装linux虚拟机\n\n​\t1）、VMWare、VirtualBox（安装）；\n\n​\t2）、导入虚拟机文件centos7-atguigu.ova；\n\n​\t3）、双击启动linux虚拟机;使用  root/ 123456登陆\n\n​\t4）、使用客户端连接linux服务器进行命令操作；\n\n​\t5）、设置虚拟机网络；\n\n​\t\t桥接网络===选好网卡====接入网线；\n\n​\t6）、设置好网络以后使用命令重启虚拟机的网络\n\n```\nservice network restart\nip addr\n1、检查内核版本，必须是3.10及以上\nuname -r\n2、安装docker\nyum install docker\n3、输入y确认安装\n4、启动docker\n[root@localhost ~]# systemctl start docker\n[root@localhost ~]# docker -v\nDocker version 1.12.6, build 3e8e77d/1.12.6\n5、开机启动docker\n[root@localhost ~]# systemctl enable docker\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\n6、停止docker\nsystemctl stop docker\n1、搜索镜像\n[root@localhost ~]# docker search tomcat\n2、拉取镜像\n[root@localhost ~]# docker pull tomcat\n3、根据镜像启动容器\ndocker run --name mytomcat -d tomcat:latest\n4、docker ps  \n查看运行中的容器\n5、 停止运行中的容器\ndocker stop  容器的id\n6、查看所有的容器\ndocker ps -a\n7、启动容器\ndocker start 容器id\n8、删除一个容器\n docker rm 容器id\n9、启动一个做了端口映射的tomcat\n[root@localhost ~]# docker run -d -p 8888:8080 tomcat\n-d：后台运行\n-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口\n\n10、为了演示简单关闭了linux的防火墙\nservice firewalld status ；查看防火墙状态\nservice firewalld stop：关闭防火墙\n11、查看容器的日志\ndocker logs container-name/container-id\n\n更多命令参看\nhttps://docs.docker.com/engine/reference/commandline/docker/\n可以参考每一个镜像的文档\n\ndocker pull mysql\n[root@localhost ~]# docker run --name mysql01 -d mysql\n42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846\n\nmysql退出了\n[root@localhost ~]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES\n42f09819908b        mysql               \"docker-entrypoint.sh\"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01\n538bde63e500        tomcat              \"catalina.sh run\"        About an hour ago   Exited (143) About an hour ago                       compassionate_\ngoldstine\nc4f1ac60b3fc        tomcat              \"catalina.sh run\"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi\n81ec743a5271        tomcat              \"catalina.sh run\"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan\n\n\n//错误日志\n[root@localhost ~]# docker logs 42f09819908b\nerror: database is uninitialized and password option is not specified \n  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个\n[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql\nb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f\n[root@localhost ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\nb874c56bec49        mysql               \"docker-entrypoint.sh\"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01\n[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql\nad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434\n[root@localhost ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\nad10e4bc5c6a        mysql               \"docker-entrypoint.sh\"   4 seconds ago       Up 2 seconds        0.0.0.0:3306->3306/tcp   mysql02\ndocker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag\n把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面\n改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）\n\ndocker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n指定mysql的一些配置参数\n```\n\n\n\n几个其他的高级操作\n\n\n\n做了端口映射\n\n正确的启动\n\n错误的启动\n\n\n\n### 3）、安装MySQL示例\n\n\n\n步骤：\n\n软件镜像（QQ安装程序）----运行镜像----产生一个容器（正在运行的软件，运行的QQ）；\n\n### 2）、容器操作\n\nhttps://hub.docker.com/\n\n| 操作 | 命令                                            | 说明                                                     |\n| ---- | ----------------------------------------------- | -------------------------------------------------------- |\n| 检索 | docker  search 关键字  eg：docker  search redis | 我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。 |\n| 拉取 | docker pull 镜像名:tag                          | :tag是可选的，tag表示标签，多为软件的版本，默认是latest  |\n| 列表 | docker images                                   | 查看所有本地镜像                                         |\n| 删除 | docker rmi image-id                             | 删除指定的本地镜像                                       |\n\n### 1）、镜像操作\n\n## 4、Docker常用命令&操作\n\n步骤：\n\n#### 2）、在linux虚拟机上安装docker\n\n​\t8）、使用客户端连接linux；\n\n​\t7）、查看linux的ip地址","slug":"Docker-入门","published":1,"updated":"2020-05-30T15:27:23.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hpi0001sx01093p2kvs","content":"<h4 id=\"1）、安装linux虚拟机\"><a href=\"#1）、安装linux虚拟机\" class=\"headerlink\" title=\"1）、安装linux虚拟机\"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p>\n<p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p>\n<p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p>\n<p>​    4）、使用客户端连接linux服务器进行命令操作；</p>\n<p>​    5）、设置虚拟机网络；</p>\n<p>​        桥接网络===选好网卡====接入网线；</p>\n<p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service network restart</span><br><span class=\"line\">ip addr</span><br><span class=\"line\">1、检查内核版本，必须是3.10及以上</span><br><span class=\"line\">uname -r</span><br><span class=\"line\">2、安装docker</span><br><span class=\"line\">yum install docker</span><br><span class=\"line\">3、输入y确认安装</span><br><span class=\"line\">4、启动docker</span><br><span class=\"line\">[root@localhost ~]# systemctl start docker</span><br><span class=\"line\">[root@localhost ~]# docker -v</span><br><span class=\"line\">Docker version 1.12.6, build 3e8e77d&#x2F;1.12.6</span><br><span class=\"line\">5、开机启动docker</span><br><span class=\"line\">[root@localhost ~]# systemctl enable docker</span><br><span class=\"line\">Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;docker.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service.</span><br><span class=\"line\">6、停止docker</span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\">1、搜索镜像</span><br><span class=\"line\">[root@localhost ~]# docker search tomcat</span><br><span class=\"line\">2、拉取镜像</span><br><span class=\"line\">[root@localhost ~]# docker pull tomcat</span><br><span class=\"line\">3、根据镜像启动容器</span><br><span class=\"line\">docker run --name mytomcat -d tomcat:latest</span><br><span class=\"line\">4、docker ps  </span><br><span class=\"line\">查看运行中的容器</span><br><span class=\"line\">5、 停止运行中的容器</span><br><span class=\"line\">docker stop  容器的id</span><br><span class=\"line\">6、查看所有的容器</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\">7、启动容器</span><br><span class=\"line\">docker start 容器id</span><br><span class=\"line\">8、删除一个容器</span><br><span class=\"line\"> docker rm 容器id</span><br><span class=\"line\">9、启动一个做了端口映射的tomcat</span><br><span class=\"line\">[root@localhost ~]# docker run -d -p 8888:8080 tomcat</span><br><span class=\"line\">-d：后台运行</span><br><span class=\"line\">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span><br><span class=\"line\"></span><br><span class=\"line\">10、为了演示简单关闭了linux的防火墙</span><br><span class=\"line\">service firewalld status ；查看防火墙状态</span><br><span class=\"line\">service firewalld stop：关闭防火墙</span><br><span class=\"line\">11、查看容器的日志</span><br><span class=\"line\">docker logs container-name&#x2F;container-id</span><br><span class=\"line\"></span><br><span class=\"line\">更多命令参看</span><br><span class=\"line\">https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;docker&#x2F;</span><br><span class=\"line\">可以参考每一个镜像的文档</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull mysql</span><br><span class=\"line\">[root@localhost ~]# docker run --name mysql01 -d mysql</span><br><span class=\"line\">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span><br><span class=\"line\"></span><br><span class=\"line\">mysql退出了</span><br><span class=\"line\">[root@localhost ~]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span><br><span class=\"line\">42f09819908b        mysql               &quot;docker-entrypoint.sh&quot;   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span><br><span class=\"line\">538bde63e500        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       compassionate_</span><br><span class=\"line\">goldstine</span><br><span class=\"line\">c4f1ac60b3fc        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       lonely_fermi</span><br><span class=\"line\">81ec743a5271        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;错误日志</span><br><span class=\"line\">[root@localhost ~]# docker logs 42f09819908b</span><br><span class=\"line\">error: database is uninitialized and password option is not specified </span><br><span class=\"line\">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br><span class=\"line\">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql</span><br><span class=\"line\">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span><br><span class=\"line\">[root@localhost ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">b874c56bec49        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 3 seconds        3306&#x2F;tcp            mysql01</span><br><span class=\"line\">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql</span><br><span class=\"line\">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span><br><span class=\"line\">[root@localhost ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class=\"line\">ad10e4bc5c6a        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306&#x2F;tcp   mysql02</span><br><span class=\"line\">docker run --name mysql03 -v &#x2F;conf&#x2F;mysql:&#x2F;etc&#x2F;mysql&#x2F;conf.d -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag</span><br><span class=\"line\">把主机的&#x2F;conf&#x2F;mysql文件夹挂载到 mysqldocker容器的&#x2F;etc&#x2F;mysql&#x2F;conf.d文件夹里面</span><br><span class=\"line\">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（&#x2F;conf&#x2F;mysql）</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag --character-set-server&#x3D;utf8mb4 --collation-server&#x3D;utf8mb4_unicode_ci</span><br><span class=\"line\">指定mysql的一些配置参数</span><br></pre></td></tr></table></figure>\n\n\n\n<p>几个其他的高级操作</p>\n<p>做了端口映射</p>\n<p>正确的启动</p>\n<p>错误的启动</p>\n<h3 id=\"3）、安装MySQL示例\"><a href=\"#3）、安装MySQL示例\" class=\"headerlink\" title=\"3）、安装MySQL示例\"></a>3）、安装MySQL示例</h3><p>步骤：</p>\n<p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p>\n<h3 id=\"2）、容器操作\"><a href=\"#2）、容器操作\" class=\"headerlink\" title=\"2）、容器操作\"></a>2）、容器操作</h3><p><a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a></p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>检索</td>\n<td>docker  search 关键字  eg：docker  search redis</td>\n<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>\n</tr>\n<tr>\n<td>拉取</td>\n<td>docker pull 镜像名:tag</td>\n<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>\n</tr>\n<tr>\n<td>列表</td>\n<td>docker images</td>\n<td>查看所有本地镜像</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>docker rmi image-id</td>\n<td>删除指定的本地镜像</td>\n</tr>\n</tbody></table>\n<h3 id=\"1）、镜像操作\"><a href=\"#1）、镜像操作\" class=\"headerlink\" title=\"1）、镜像操作\"></a>1）、镜像操作</h3><h2 id=\"4、Docker常用命令-amp-操作\"><a href=\"#4、Docker常用命令-amp-操作\" class=\"headerlink\" title=\"4、Docker常用命令&amp;操作\"></a>4、Docker常用命令&amp;操作</h2><p>步骤：</p>\n<h4 id=\"2）、在linux虚拟机上安装docker\"><a href=\"#2）、在linux虚拟机上安装docker\" class=\"headerlink\" title=\"2）、在linux虚拟机上安装docker\"></a>2）、在linux虚拟机上安装docker</h4><p>​    8）、使用客户端连接linux；</p>\n<p>​    7）、查看linux的ip地址</p>\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h4 id=\"1）、安装linux虚拟机\"><a href=\"#1）、安装linux虚拟机\" class=\"headerlink\" title=\"1）、安装linux虚拟机\"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p>\n<p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p>\n<p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p>\n<p>​    4）、使用客户端连接linux服务器进行命令操作；</p>\n<p>​    5）、设置虚拟机网络；</p>\n<p>​        桥接网络===选好网卡====接入网线；</p>\n<p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service network restart</span><br><span class=\"line\">ip addr</span><br><span class=\"line\">1、检查内核版本，必须是3.10及以上</span><br><span class=\"line\">uname -r</span><br><span class=\"line\">2、安装docker</span><br><span class=\"line\">yum install docker</span><br><span class=\"line\">3、输入y确认安装</span><br><span class=\"line\">4、启动docker</span><br><span class=\"line\">[root@localhost ~]# systemctl start docker</span><br><span class=\"line\">[root@localhost ~]# docker -v</span><br><span class=\"line\">Docker version 1.12.6, build 3e8e77d&#x2F;1.12.6</span><br><span class=\"line\">5、开机启动docker</span><br><span class=\"line\">[root@localhost ~]# systemctl enable docker</span><br><span class=\"line\">Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;docker.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service.</span><br><span class=\"line\">6、停止docker</span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\">1、搜索镜像</span><br><span class=\"line\">[root@localhost ~]# docker search tomcat</span><br><span class=\"line\">2、拉取镜像</span><br><span class=\"line\">[root@localhost ~]# docker pull tomcat</span><br><span class=\"line\">3、根据镜像启动容器</span><br><span class=\"line\">docker run --name mytomcat -d tomcat:latest</span><br><span class=\"line\">4、docker ps  </span><br><span class=\"line\">查看运行中的容器</span><br><span class=\"line\">5、 停止运行中的容器</span><br><span class=\"line\">docker stop  容器的id</span><br><span class=\"line\">6、查看所有的容器</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\">7、启动容器</span><br><span class=\"line\">docker start 容器id</span><br><span class=\"line\">8、删除一个容器</span><br><span class=\"line\"> docker rm 容器id</span><br><span class=\"line\">9、启动一个做了端口映射的tomcat</span><br><span class=\"line\">[root@localhost ~]# docker run -d -p 8888:8080 tomcat</span><br><span class=\"line\">-d：后台运行</span><br><span class=\"line\">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span><br><span class=\"line\"></span><br><span class=\"line\">10、为了演示简单关闭了linux的防火墙</span><br><span class=\"line\">service firewalld status ；查看防火墙状态</span><br><span class=\"line\">service firewalld stop：关闭防火墙</span><br><span class=\"line\">11、查看容器的日志</span><br><span class=\"line\">docker logs container-name&#x2F;container-id</span><br><span class=\"line\"></span><br><span class=\"line\">更多命令参看</span><br><span class=\"line\">https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;docker&#x2F;</span><br><span class=\"line\">可以参考每一个镜像的文档</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull mysql</span><br><span class=\"line\">[root@localhost ~]# docker run --name mysql01 -d mysql</span><br><span class=\"line\">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span><br><span class=\"line\"></span><br><span class=\"line\">mysql退出了</span><br><span class=\"line\">[root@localhost ~]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span><br><span class=\"line\">42f09819908b        mysql               &quot;docker-entrypoint.sh&quot;   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span><br><span class=\"line\">538bde63e500        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       compassionate_</span><br><span class=\"line\">goldstine</span><br><span class=\"line\">c4f1ac60b3fc        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       lonely_fermi</span><br><span class=\"line\">81ec743a5271        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;错误日志</span><br><span class=\"line\">[root@localhost ~]# docker logs 42f09819908b</span><br><span class=\"line\">error: database is uninitialized and password option is not specified </span><br><span class=\"line\">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br><span class=\"line\">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql</span><br><span class=\"line\">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span><br><span class=\"line\">[root@localhost ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">b874c56bec49        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 3 seconds        3306&#x2F;tcp            mysql01</span><br><span class=\"line\">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql</span><br><span class=\"line\">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span><br><span class=\"line\">[root@localhost ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class=\"line\">ad10e4bc5c6a        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306&#x2F;tcp   mysql02</span><br><span class=\"line\">docker run --name mysql03 -v &#x2F;conf&#x2F;mysql:&#x2F;etc&#x2F;mysql&#x2F;conf.d -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag</span><br><span class=\"line\">把主机的&#x2F;conf&#x2F;mysql文件夹挂载到 mysqldocker容器的&#x2F;etc&#x2F;mysql&#x2F;conf.d文件夹里面</span><br><span class=\"line\">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（&#x2F;conf&#x2F;mysql）</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag --character-set-server&#x3D;utf8mb4 --collation-server&#x3D;utf8mb4_unicode_ci</span><br><span class=\"line\">指定mysql的一些配置参数</span><br></pre></td></tr></table></figure>\n\n\n\n<p>几个其他的高级操作</p>\n<p>做了端口映射</p>\n<p>正确的启动</p>\n<p>错误的启动</p>\n<h3 id=\"3）、安装MySQL示例\"><a href=\"#3）、安装MySQL示例\" class=\"headerlink\" title=\"3）、安装MySQL示例\"></a>3）、安装MySQL示例</h3><p>步骤：</p>\n<p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p>\n<h3 id=\"2）、容器操作\"><a href=\"#2）、容器操作\" class=\"headerlink\" title=\"2）、容器操作\"></a>2）、容器操作</h3><p><a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a></p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>检索</td>\n<td>docker  search 关键字  eg：docker  search redis</td>\n<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>\n</tr>\n<tr>\n<td>拉取</td>\n<td>docker pull 镜像名:tag</td>\n<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>\n</tr>\n<tr>\n<td>列表</td>\n<td>docker images</td>\n<td>查看所有本地镜像</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>docker rmi image-id</td>\n<td>删除指定的本地镜像</td>\n</tr>\n</tbody></table>\n<h3 id=\"1）、镜像操作\"><a href=\"#1）、镜像操作\" class=\"headerlink\" title=\"1）、镜像操作\"></a>1）、镜像操作</h3><h2 id=\"4、Docker常用命令-amp-操作\"><a href=\"#4、Docker常用命令-amp-操作\" class=\"headerlink\" title=\"4、Docker常用命令&amp;操作\"></a>4、Docker常用命令&amp;操作</h2><p>步骤：</p>\n<h4 id=\"2）、在linux虚拟机上安装docker\"><a href=\"#2）、在linux虚拟机上安装docker\" class=\"headerlink\" title=\"2）、在linux虚拟机上安装docker\"></a>2）、在linux虚拟机上安装docker</h4><p>​    8）、使用客户端连接linux；</p>\n<p>​    7）、查看linux的ip地址</p>\n"},{"title":"Hello World源码解析","date":"2018-01-03T13:04:12.000Z","_content":"\n### 1、POM文件\n\n#### 1、父项目\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.9.RELEASE</version>\n</parent>\n\n他的父项目是\n<parent>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-dependencies</artifactId>\n  <version>1.5.9.RELEASE</version>\n  <relativePath>../../spring-boot-dependencies</relativePath>\n</parent>\n他来真正管理Spring Boot应用里面的所有依赖版本；\n\n```\n\nSpring Boot的版本仲裁中心；\n\n以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）\n\n#### 2、启动器\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n**spring-boot-starter**-==web==：\n\n​\tspring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；\n\n\n\nSpring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器\n\n\n\n### 2、主程序类，主入口类\n\n```java\n/**\n *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用\n */\n@SpringBootApplication\npublic class HelloWorldMainApplication {\n\n    public static void main(String[] args) {\n\n        // Spring应用启动起来\n        SpringApplication.run(HelloWorldMainApplication.class,args);\n    }\n}\n\n```\n\n@**SpringBootApplication**:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；\n\n\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters = {\n      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\npublic @interface SpringBootApplication {\n```\n\n@**SpringBootConfiguration**:Spring Boot的配置类；\n\n​\t\t标注在某个类上，表示这是一个Spring Boot的配置类；\n\n​\t\t@**Configuration**:配置类上来标注这个注解；\n\n​\t\t\t配置类 -----  配置文件；配置类也是容器中的一个组件；@Component\n\n\n\n@**EnableAutoConfiguration**：开启自动配置功能；\n\n​\t\t以前我们需要配置的东西，Spring Boot帮我们自动配置；@**EnableAutoConfiguration**告诉SpringBoot开启自动配置功能；这样自动配置才能生效；\n\n```java\n@AutoConfigurationPackage\n@Import(EnableAutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration {\n```\n\n​      \t@**AutoConfigurationPackage**：自动配置包\n\n​\t\t@**Import**(AutoConfigurationPackages.Registrar.class)：\n\n​\t\tSpring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；\n\n==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==\n\n​\t@**Import**(EnableAutoConfigurationImportSelector.class)；\n\n​\t\t给容器中导入组件？\n\n​\t\t**EnableAutoConfigurationImportSelector**：导入哪些组件的选择器；\n\n​\t\t将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；\n\n​\t\t会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；\t\t![自动配置类](/Users/wanglei/Desktop/images/搜狗截图20180129224104.png)\n\n有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；\n\n​\t\tSpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；\n\n\n\n==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；\n\nJ2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；\n\n\n\n​\t\t\n\n==Spring注解版（谷粒学院）==\n\n\n\n## 6、使用Spring Initializer快速创建Spring Boot项目\n\n### 1、IDEA：使用 Spring Initializer快速创建项目\n\nIDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；\n\n选择我们需要的模块；向导会联网创建Spring Boot项目；\n\n默认生成的Spring Boot项目；\n\n- 主程序已经生成好了，我们只需要我们自己的逻辑\n- resources文件夹中目录结构\n  - static：保存所有的静态资源； js css  images；\n  - templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；\n  - application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；\n\n","source":"_posts/Hello-World源码解析.md","raw":"---\ntitle: Hello World源码解析\ndate: 2018/01/03 21:04:12\n---\n\n### 1、POM文件\n\n#### 1、父项目\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.9.RELEASE</version>\n</parent>\n\n他的父项目是\n<parent>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-dependencies</artifactId>\n  <version>1.5.9.RELEASE</version>\n  <relativePath>../../spring-boot-dependencies</relativePath>\n</parent>\n他来真正管理Spring Boot应用里面的所有依赖版本；\n\n```\n\nSpring Boot的版本仲裁中心；\n\n以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）\n\n#### 2、启动器\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n**spring-boot-starter**-==web==：\n\n​\tspring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；\n\n\n\nSpring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器\n\n\n\n### 2、主程序类，主入口类\n\n```java\n/**\n *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用\n */\n@SpringBootApplication\npublic class HelloWorldMainApplication {\n\n    public static void main(String[] args) {\n\n        // Spring应用启动起来\n        SpringApplication.run(HelloWorldMainApplication.class,args);\n    }\n}\n\n```\n\n@**SpringBootApplication**:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；\n\n\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters = {\n      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\npublic @interface SpringBootApplication {\n```\n\n@**SpringBootConfiguration**:Spring Boot的配置类；\n\n​\t\t标注在某个类上，表示这是一个Spring Boot的配置类；\n\n​\t\t@**Configuration**:配置类上来标注这个注解；\n\n​\t\t\t配置类 -----  配置文件；配置类也是容器中的一个组件；@Component\n\n\n\n@**EnableAutoConfiguration**：开启自动配置功能；\n\n​\t\t以前我们需要配置的东西，Spring Boot帮我们自动配置；@**EnableAutoConfiguration**告诉SpringBoot开启自动配置功能；这样自动配置才能生效；\n\n```java\n@AutoConfigurationPackage\n@Import(EnableAutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration {\n```\n\n​      \t@**AutoConfigurationPackage**：自动配置包\n\n​\t\t@**Import**(AutoConfigurationPackages.Registrar.class)：\n\n​\t\tSpring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；\n\n==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==\n\n​\t@**Import**(EnableAutoConfigurationImportSelector.class)；\n\n​\t\t给容器中导入组件？\n\n​\t\t**EnableAutoConfigurationImportSelector**：导入哪些组件的选择器；\n\n​\t\t将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；\n\n​\t\t会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；\t\t![自动配置类](/Users/wanglei/Desktop/images/搜狗截图20180129224104.png)\n\n有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；\n\n​\t\tSpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；\n\n\n\n==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；\n\nJ2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；\n\n\n\n​\t\t\n\n==Spring注解版（谷粒学院）==\n\n\n\n## 6、使用Spring Initializer快速创建Spring Boot项目\n\n### 1、IDEA：使用 Spring Initializer快速创建项目\n\nIDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；\n\n选择我们需要的模块；向导会联网创建Spring Boot项目；\n\n默认生成的Spring Boot项目；\n\n- 主程序已经生成好了，我们只需要我们自己的逻辑\n- resources文件夹中目录结构\n  - static：保存所有的静态资源； js css  images；\n  - templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；\n  - application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；\n\n","slug":"Hello-World源码解析","published":1,"updated":"2020-05-30T15:37:19.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hpl0002sx0187f4hud9","content":"<h3 id=\"1、POM文件\"><a href=\"#1、POM文件\" class=\"headerlink\" title=\"1、POM文件\"></a>1、POM文件</h3><h4 id=\"1、父项目\"><a href=\"#1、父项目\" class=\"headerlink\" title=\"1、父项目\"></a>1、父项目</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">他的父项目是</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">relativePath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br></pre></td></tr></table></figure>\n\n<p>Spring Boot的版本仲裁中心；</p>\n<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>\n<h4 id=\"2、启动器\"><a href=\"#2、启动器\" class=\"headerlink\" title=\"2、启动器\"></a>2、启动器</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>spring-boot-starter</strong>-==web==：</p>\n<p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p>\n<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>\n<h3 id=\"2、主程序类，主入口类\"><a href=\"#2、主程序类，主入口类\" class=\"headerlink\" title=\"2、主程序类，主入口类\"></a>2、主程序类，主入口类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldMainApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Spring应用启动起来</span></span><br><span class=\"line\">        SpringApplication.run(HelloWorldMainApplication<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class=\"class\">.<span class=\"keyword\">class</span>),</span></span><br><span class=\"line\"><span class=\"class\">      @<span class=\"title\">Filter</span>(<span class=\"title\">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class=\"class\">.<span class=\"keyword\">class</span>) &#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">SpringBootApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p>\n<p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p>\n<p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p>\n<p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p>\n<p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p>\n<p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(EnableAutoConfigurationImportSelector<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p>\n<p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p>\n<p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p>\n<p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p>\n<p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p>\n<p>​        给容器中导入组件？</p>\n<p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p>\n<p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>\n<p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        <img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129224104.png\" alt=\"自动配置类\"></p>\n<p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>\n<p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p>\n<p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p>\n<p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p>\n<p>​        </p>\n<p>==Spring注解版（谷粒学院）==</p>\n<h2 id=\"6、使用Spring-Initializer快速创建Spring-Boot项目\"><a href=\"#6、使用Spring-Initializer快速创建Spring-Boot项目\" class=\"headerlink\" title=\"6、使用Spring Initializer快速创建Spring Boot项目\"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id=\"1、IDEA：使用-Spring-Initializer快速创建项目\"><a href=\"#1、IDEA：使用-Spring-Initializer快速创建项目\" class=\"headerlink\" title=\"1、IDEA：使用 Spring Initializer快速创建项目\"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p>\n<p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p>\n<p>默认生成的Spring Boot项目；</p>\n<ul>\n<li>主程序已经生成好了，我们只需要我们自己的逻辑</li>\n<li>resources文件夹中目录结构<ul>\n<li>static：保存所有的静态资源； js css  images；</li>\n<li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li>\n<li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h3 id=\"1、POM文件\"><a href=\"#1、POM文件\" class=\"headerlink\" title=\"1、POM文件\"></a>1、POM文件</h3><h4 id=\"1、父项目\"><a href=\"#1、父项目\" class=\"headerlink\" title=\"1、父项目\"></a>1、父项目</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">他的父项目是</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">relativePath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br></pre></td></tr></table></figure>\n\n<p>Spring Boot的版本仲裁中心；</p>\n<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>\n<h4 id=\"2、启动器\"><a href=\"#2、启动器\" class=\"headerlink\" title=\"2、启动器\"></a>2、启动器</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>spring-boot-starter</strong>-==web==：</p>\n<p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p>\n<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>\n<h3 id=\"2、主程序类，主入口类\"><a href=\"#2、主程序类，主入口类\" class=\"headerlink\" title=\"2、主程序类，主入口类\"></a>2、主程序类，主入口类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldMainApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Spring应用启动起来</span></span><br><span class=\"line\">        SpringApplication.run(HelloWorldMainApplication<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class=\"class\">.<span class=\"keyword\">class</span>),</span></span><br><span class=\"line\"><span class=\"class\">      @<span class=\"title\">Filter</span>(<span class=\"title\">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class=\"class\">.<span class=\"keyword\">class</span>) &#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">SpringBootApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p>\n<p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p>\n<p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p>\n<p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p>\n<p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p>\n<p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(EnableAutoConfigurationImportSelector<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p>\n<p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p>\n<p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p>\n<p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p>\n<p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p>\n<p>​        给容器中导入组件？</p>\n<p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p>\n<p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>\n<p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        <img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129224104.png\" alt=\"自动配置类\"></p>\n<p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>\n<p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p>\n<p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p>\n<p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p>\n<p>​        </p>\n<p>==Spring注解版（谷粒学院）==</p>\n<h2 id=\"6、使用Spring-Initializer快速创建Spring-Boot项目\"><a href=\"#6、使用Spring-Initializer快速创建Spring-Boot项目\" class=\"headerlink\" title=\"6、使用Spring Initializer快速创建Spring Boot项目\"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id=\"1、IDEA：使用-Spring-Initializer快速创建项目\"><a href=\"#1、IDEA：使用-Spring-Initializer快速创建项目\" class=\"headerlink\" title=\"1、IDEA：使用 Spring Initializer快速创建项目\"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p>\n<p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p>\n<p>默认生成的Spring Boot项目；</p>\n<ul>\n<li>主程序已经生成好了，我们只需要我们自己的逻辑</li>\n<li>resources文件夹中目录结构<ul>\n<li>static：保存所有的静态资源； js css  images；</li>\n<li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li>\n<li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Hexo常用命令","date":"2019-08-27T15:03:34.000Z","_content":"\n### 1、hexo init\n\nhexo init 命令用于初始化本地文件夹为网站的根目录\n\n```\n$ hexo init [folder]\n```\n\n- `folder` 可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录\n\n### 2、hexo new\n\n```\nhexo new` 命令用于新建文章，一般可以简写为 `hexo n\n$ hexo new [layout] <title>\n```\n\n- `layout` 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定\n- `title` 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围\n\n### 3、hexo generate\n\n```\nhexo generate` 命令用于生成静态文件，一般可以简写为 `hexo g\n$ hexo generate\n```\n\n- `-d` 选项，指定生成后部署，与 `hexo d -g` 等价\n\n详细信息请参考：https://hexo.io/docs/generating\n\n### 4、hexo server\n\n```\nhexo server` 命令用于启动本地服务器，一般可以简写为 `hexo s\n$ hexo server\n```\n\n- `-p` 选项，指定服务器端口，默认为 4000\n- `-i` 选项，指定服务器 IP 地址，默认为 0.0.0.0\n- `-s` 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视\n\n**说明** ：运行服务器前需要安装 hexo-server 插件\n\n```\n$ npm install hexo-server --save\n```\n\n详细信息请参考：https://hexo.io/docs/server.html\n\n### 5、hexo deploy\n\n```\nhexo deploy` 命令用于部署网站，一般可以简写为 `hexo d\n$ hexo deploy\n```\n\n- `-g` 选项，指定生成后部署，与 `hexo g -d` 等价\n\n**说明** ：部署前需要修改 _config.yml 配置文件，下面以 git 为例进行说明\n\n```\ndeploy:\n\ttype: git\n\trepo: <repository url>\n\tbranch:\tmaster\n\tmessage: 自定义提交消息，默认为Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}\n```\n\n详细信息请参考：https://hexo.io/docs/deployment.html\n\n### 6、hexo clean\n\n`hexo clean` 命令用于清理缓存文件，是一个比较常用的命令\n\n```\n$ hexo clean\n```\n\n**网站显示异常时可尝试此操作**\n\n### 7、Option\n\n#### （1）hexo --safe\n\n`hexo --safe` 表示安全模式，用于禁用加载插件和脚本\n\n```\n$ hexo --safe\n```\n\n**安装新插件时遇到问题可尝试此操作**\n\n#### （2）hexo --debug\n\n`hexo --debug` 表示调试模式，用于将消息详细记录到终端和 `debug.log` 文件\n\n```\n$ hexo --debug\n```\n\n#### （3）hexo --silent\n\n`hexo --silent` 表示静默模式，用于静默输出到终端\n\n```\n$ hexo --silent\n```\n\n","source":"_posts/Hexo常用命令.md","raw":"---\ntitle: Hexo常用命令\n\ndate: 2019/08/27 23:03:34\n\n---\n\n### 1、hexo init\n\nhexo init 命令用于初始化本地文件夹为网站的根目录\n\n```\n$ hexo init [folder]\n```\n\n- `folder` 可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录\n\n### 2、hexo new\n\n```\nhexo new` 命令用于新建文章，一般可以简写为 `hexo n\n$ hexo new [layout] <title>\n```\n\n- `layout` 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定\n- `title` 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围\n\n### 3、hexo generate\n\n```\nhexo generate` 命令用于生成静态文件，一般可以简写为 `hexo g\n$ hexo generate\n```\n\n- `-d` 选项，指定生成后部署，与 `hexo d -g` 等价\n\n详细信息请参考：https://hexo.io/docs/generating\n\n### 4、hexo server\n\n```\nhexo server` 命令用于启动本地服务器，一般可以简写为 `hexo s\n$ hexo server\n```\n\n- `-p` 选项，指定服务器端口，默认为 4000\n- `-i` 选项，指定服务器 IP 地址，默认为 0.0.0.0\n- `-s` 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视\n\n**说明** ：运行服务器前需要安装 hexo-server 插件\n\n```\n$ npm install hexo-server --save\n```\n\n详细信息请参考：https://hexo.io/docs/server.html\n\n### 5、hexo deploy\n\n```\nhexo deploy` 命令用于部署网站，一般可以简写为 `hexo d\n$ hexo deploy\n```\n\n- `-g` 选项，指定生成后部署，与 `hexo g -d` 等价\n\n**说明** ：部署前需要修改 _config.yml 配置文件，下面以 git 为例进行说明\n\n```\ndeploy:\n\ttype: git\n\trepo: <repository url>\n\tbranch:\tmaster\n\tmessage: 自定义提交消息，默认为Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}\n```\n\n详细信息请参考：https://hexo.io/docs/deployment.html\n\n### 6、hexo clean\n\n`hexo clean` 命令用于清理缓存文件，是一个比较常用的命令\n\n```\n$ hexo clean\n```\n\n**网站显示异常时可尝试此操作**\n\n### 7、Option\n\n#### （1）hexo --safe\n\n`hexo --safe` 表示安全模式，用于禁用加载插件和脚本\n\n```\n$ hexo --safe\n```\n\n**安装新插件时遇到问题可尝试此操作**\n\n#### （2）hexo --debug\n\n`hexo --debug` 表示调试模式，用于将消息详细记录到终端和 `debug.log` 文件\n\n```\n$ hexo --debug\n```\n\n#### （3）hexo --silent\n\n`hexo --silent` 表示静默模式，用于静默输出到终端\n\n```\n$ hexo --silent\n```\n\n","slug":"Hexo常用命令","published":1,"updated":"2020-05-31T04:23:32.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hpv0003sx01bvreedbo","content":"<h3 id=\"1、hexo-init\"><a href=\"#1、hexo-init\" class=\"headerlink\" title=\"1、hexo init\"></a>1、hexo init</h3><p>hexo init 命令用于初始化本地文件夹为网站的根目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>folder</code> 可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录</li>\n</ul>\n<h3 id=\"2、hexo-new\"><a href=\"#2、hexo-new\" class=\"headerlink\" title=\"2、hexo new\"></a>2、hexo new</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new&#96; 命令用于新建文章，一般可以简写为 &#96;hexo n</span><br><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>layout</code> 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</li>\n<li><code>title</code> 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li>\n</ul>\n<h3 id=\"3、hexo-generate\"><a href=\"#3、hexo-generate\" class=\"headerlink\" title=\"3、hexo generate\"></a>3、hexo generate</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate&#96; 命令用于生成静态文件，一般可以简写为 &#96;hexo g</span><br><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-d</code> 选项，指定生成后部署，与 <code>hexo d -g</code> 等价</li>\n</ul>\n<p>详细信息请参考：<a href=\"https://hexo.io/docs/generating\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/generating</a></p>\n<h3 id=\"4、hexo-server\"><a href=\"#4、hexo-server\" class=\"headerlink\" title=\"4、hexo server\"></a>4、hexo server</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server&#96; 命令用于启动本地服务器，一般可以简写为 &#96;hexo s</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-p</code> 选项，指定服务器端口，默认为 4000</li>\n<li><code>-i</code> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li>\n<li><code>-s</code> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li>\n</ul>\n<p><strong>说明</strong> ：运行服务器前需要安装 hexo-server 插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<p>详细信息请参考：<a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/server.html</a></p>\n<h3 id=\"5、hexo-deploy\"><a href=\"#5、hexo-deploy\" class=\"headerlink\" title=\"5、hexo deploy\"></a>5、hexo deploy</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy&#96; 命令用于部署网站，一般可以简写为 &#96;hexo d</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-g</code> 选项，指定生成后部署，与 <code>hexo g -d</code> 等价</li>\n</ul>\n<p><strong>说明</strong> ：部署前需要修改 _config.yml 配置文件，下面以 git 为例进行说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">\ttype: git</span><br><span class=\"line\">\trepo: &lt;repository url&gt;</span><br><span class=\"line\">\tbranch:\tmaster</span><br><span class=\"line\">\tmessage: 自定义提交消息，默认为Site updated: &#123;&#123; now(&#39;YYYY-MM-DD HH:mm:ss&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>详细信息请参考：<a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/deployment.html</a></p>\n<h3 id=\"6、hexo-clean\"><a href=\"#6、hexo-clean\" class=\"headerlink\" title=\"6、hexo clean\"></a>6、hexo clean</h3><p><code>hexo clean</code> 命令用于清理缓存文件，是一个比较常用的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p><strong>网站显示异常时可尝试此操作</strong></p>\n<h3 id=\"7、Option\"><a href=\"#7、Option\" class=\"headerlink\" title=\"7、Option\"></a>7、Option</h3><h4 id=\"（1）hexo-–safe\"><a href=\"#（1）hexo-–safe\" class=\"headerlink\" title=\"（1）hexo –safe\"></a>（1）hexo –safe</h4><p><code>hexo --safe</code> 表示安全模式，用于禁用加载插件和脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装新插件时遇到问题可尝试此操作</strong></p>\n<h4 id=\"（2）hexo-–debug\"><a href=\"#（2）hexo-–debug\" class=\"headerlink\" title=\"（2）hexo –debug\"></a>（2）hexo –debug</h4><p><code>hexo --debug</code> 表示调试模式，用于将消息详细记录到终端和 <code>debug.log</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）hexo-–silent\"><a href=\"#（3）hexo-–silent\" class=\"headerlink\" title=\"（3）hexo –silent\"></a>（3）hexo –silent</h4><p><code>hexo --silent</code> 表示静默模式，用于静默输出到终端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h3 id=\"1、hexo-init\"><a href=\"#1、hexo-init\" class=\"headerlink\" title=\"1、hexo init\"></a>1、hexo init</h3><p>hexo init 命令用于初始化本地文件夹为网站的根目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>folder</code> 可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录</li>\n</ul>\n<h3 id=\"2、hexo-new\"><a href=\"#2、hexo-new\" class=\"headerlink\" title=\"2、hexo new\"></a>2、hexo new</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new&#96; 命令用于新建文章，一般可以简写为 &#96;hexo n</span><br><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>layout</code> 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</li>\n<li><code>title</code> 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li>\n</ul>\n<h3 id=\"3、hexo-generate\"><a href=\"#3、hexo-generate\" class=\"headerlink\" title=\"3、hexo generate\"></a>3、hexo generate</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate&#96; 命令用于生成静态文件，一般可以简写为 &#96;hexo g</span><br><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-d</code> 选项，指定生成后部署，与 <code>hexo d -g</code> 等价</li>\n</ul>\n<p>详细信息请参考：<a href=\"https://hexo.io/docs/generating\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/generating</a></p>\n<h3 id=\"4、hexo-server\"><a href=\"#4、hexo-server\" class=\"headerlink\" title=\"4、hexo server\"></a>4、hexo server</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server&#96; 命令用于启动本地服务器，一般可以简写为 &#96;hexo s</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-p</code> 选项，指定服务器端口，默认为 4000</li>\n<li><code>-i</code> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li>\n<li><code>-s</code> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li>\n</ul>\n<p><strong>说明</strong> ：运行服务器前需要安装 hexo-server 插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<p>详细信息请参考：<a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/server.html</a></p>\n<h3 id=\"5、hexo-deploy\"><a href=\"#5、hexo-deploy\" class=\"headerlink\" title=\"5、hexo deploy\"></a>5、hexo deploy</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy&#96; 命令用于部署网站，一般可以简写为 &#96;hexo d</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-g</code> 选项，指定生成后部署，与 <code>hexo g -d</code> 等价</li>\n</ul>\n<p><strong>说明</strong> ：部署前需要修改 _config.yml 配置文件，下面以 git 为例进行说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">\ttype: git</span><br><span class=\"line\">\trepo: &lt;repository url&gt;</span><br><span class=\"line\">\tbranch:\tmaster</span><br><span class=\"line\">\tmessage: 自定义提交消息，默认为Site updated: &#123;&#123; now(&#39;YYYY-MM-DD HH:mm:ss&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>详细信息请参考：<a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/deployment.html</a></p>\n<h3 id=\"6、hexo-clean\"><a href=\"#6、hexo-clean\" class=\"headerlink\" title=\"6、hexo clean\"></a>6、hexo clean</h3><p><code>hexo clean</code> 命令用于清理缓存文件，是一个比较常用的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p><strong>网站显示异常时可尝试此操作</strong></p>\n<h3 id=\"7、Option\"><a href=\"#7、Option\" class=\"headerlink\" title=\"7、Option\"></a>7、Option</h3><h4 id=\"（1）hexo-–safe\"><a href=\"#（1）hexo-–safe\" class=\"headerlink\" title=\"（1）hexo –safe\"></a>（1）hexo –safe</h4><p><code>hexo --safe</code> 表示安全模式，用于禁用加载插件和脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装新插件时遇到问题可尝试此操作</strong></p>\n<h4 id=\"（2）hexo-–debug\"><a href=\"#（2）hexo-–debug\" class=\"headerlink\" title=\"（2）hexo –debug\"></a>（2）hexo –debug</h4><p><code>hexo --debug</code> 表示调试模式，用于将消息详细记录到终端和 <code>debug.log</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）hexo-–silent\"><a href=\"#（3）hexo-–silent\" class=\"headerlink\" title=\"（3）hexo –silent\"></a>（3）hexo –silent</h4><p><code>hexo --silent</code> 表示静默模式，用于静默输出到终端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n\n"},{"title":"MySql多数据源(自定义注解完成数据库切库,读写分离)","date":"2019-01-04T09:59:44.000Z","_content":"\n### 本文参照：\n\n前提\n\n​\t\t这几天，学员们反馈希望学习一下自定义注解，正好准备高并发课程内容里有一块涉及到使用自定义注解完成数据库切库的内容。这里单独写一篇文章记录说明一下。\n\n为什么会有数据库切库一说\n\n首先，许多项目都有主库与从库，有的主库后面甚至会有很多个从库，主从库之间的通常同步也很快，这为数据库切库提供了一个基础，因为可以去不同的数据库查询，得到相同的结果（如果不同的数据库是完全不同的，这个不在我们这篇文章讨论的范围之内，那个属于让项目支持多个数据源）\n\n其次，随着项目越来越大、操作的用户越来越多，对数据库的请求操作越来越多，很容易想到的是将读写请求分开，将写请求交给主库处理，读请求直接从某个从库读取。这样可以极大的减少大量对主库的请求，提升主库的性能。\n\n接下来具体说一下如何通过自定义注解完成切库（代码使用springboot实现）：\n\n### 第一步、定义我们自己的切库注解类\n\n自定义注解有几点需要注意：\n\n@Target 是作用的目标，接口、方法、类、字段、包等等，具体看：ElementType\n\n2）@Retention 是注解存在的范围，RUNTIME代表的是注解会在class字节码文件中存在，在运行时可以通过反射获取到，具体看：RetentionPolicy\n\n3）允许的变量，通常都要给定默认值，比如我们使用一个service时，可以@Service，也可以@Service(\"xxxx\")\n\n@Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD,ElementType.TYPE}) public @interface RoutingDataSource {     String value() default DataSources.MASTER_DB; }\n\n### 第二步、定义需要使用的数据库及配置\n\n#### 1、数据库配置：application.properties，这里要注意不同db的前缀区别\n\n```yaml\ndatasource:\n  druid:\n    db-master:\n      username: XXXXXX\n      password: XXXXXX!@#\n      url: jdbc:mysql://XXXXXX/dev\n      db-type: com.alibaba.druid.pool.DruidDataSource\n      driver-class-name:  com.mysql.cj.jdbc.Driver\n    db-slave:\n      username: XXXXXX\n      password: XXXXXX!@#\n      url: jdbc:mysql://XXXXXX:10092/dev\n      db-type: com.alibaba.druid.pool.DruidDataSource\n      driver-class-name:  com.mysql.cj.jdbc.Driver\n```\n#### 2、定义支持的数据源id：\n\n```java\npublic interface DataSources {\n    String MASTER_DB = \"db-maste\";\n    String SLAVE_DB = \"db-slave\";\n}\n```\n#### 3、多数据源配置代码\n\n```java\nimport com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Map;\n@Configuration\n@Component\npublic class DynamicDataSourceConfig {\n    @Bean\n    @ConfigurationProperties(\"spring.datasource.druid.wl-master\")\n    public DataSource  xiaobinMasterDataSource(){\n        return DruidDataSourceBuilder.create().build();\n    }\n\n    @Bean\n    @ConfigurationProperties(\"spring.datasource.druid.wl-slave\")\n    public DataSource  xiaobinSlaveDataSource(){\n        return DruidDataSourceBuilder.create().build();\n    }\n    @Bean\n    @Primary\n    public DynamicDataSource dataSource(DataSource xiaobinMasterDataSource, DataSource xiaobinSlaveDataSource) {\n        Map<Object, Object> targetDataSources = new HashMap<>();\n        targetDataSources.put(\"wl-master\",xiaobinMasterDataSource);\n        targetDataSources.put(\"wl-slave\", xiaobinSlaveDataSource);\n        return new DynamicDataSource(xiaobinMasterDataSource, targetDataSources);\n    }\n}\n```\n#### 4、配置成动态数据源：\n\n```java\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\nimport org.springframework.lang.Nullable;\nimport javax.sql.DataSource;\nimport java.util.Map;\n\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n    private static final ThreadLocal<String> contextHolder = new ThreadLocal<>();\n\n    public DynamicDataSource(DataSource defaultTargetDataSource, Map<Object, Object> targetDataSources) {\n        super.setDefaultTargetDataSource(defaultTargetDataSource);\n        super.setTargetDataSources(targetDataSources);\n        super.afterPropertiesSet();\n    }\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return getDataSource();\n    }\n    public static void setDataSource(String dataSource) {\n        contextHolder.set(dataSource);\n    }\n    public static String getDataSource() {\n        return contextHolder.get();\n    }\n    public static void clearDataSource() {\n        contextHolder.remove();\n    }\n}\n```\n#### 5、AOP切面类配置\n\n```java\n@Aspect\n@Component\npublic class DataSourceAspect {\n\n    @Pointcut(\"@annotation(com.xiaobin.annotation.DataSource)\")\n    public void dataSourcePointCut() {\n    }\n\n    @Around(\"dataSourcePointCut()\")\n    public Object around(ProceedingJoinPoint point) throws Throwable {\n        MethodSignature signature = (MethodSignature) point.getSignature();\n        Method method = signature.getMethod();\n\n        DataSource dataSource = method.getAnnotation(DataSource.class);\n        if(dataSource == null){\n            DynamicDataSource.setDataSource(\"wl-master\");\n        }else {\n            DynamicDataSource.setDataSource(dataSource.name());\n        }\n\n        try {\n            return point.proceed();\n        } finally {\n            DynamicDataSource.clearDataSource();\n        }\n    }\n}\n```\n#### 6、启动类配置，不然报错！\n\n```java\n@SpringBootApplication(exclude= {DataSourceAutoConfiguration.class})\n@MapperScan(basePackages = \"com.wl.mapper\")\n@Import({DynamicDataSourceConfig.class})\npublic class StartApp {\n    public static void main(String[] args) {\n        SpringApplication.run(StartApp.class);\n    }\n}\n```","source":"_posts/MySql多数据源(自定义注解完成数据库切库,读写分离).md","raw":"---\ntitle: MySql多数据源(自定义注解完成数据库切库,读写分离)\ndate: 2019/01/04 17:59:44\n---\n\n### 本文参照：\n\n前提\n\n​\t\t这几天，学员们反馈希望学习一下自定义注解，正好准备高并发课程内容里有一块涉及到使用自定义注解完成数据库切库的内容。这里单独写一篇文章记录说明一下。\n\n为什么会有数据库切库一说\n\n首先，许多项目都有主库与从库，有的主库后面甚至会有很多个从库，主从库之间的通常同步也很快，这为数据库切库提供了一个基础，因为可以去不同的数据库查询，得到相同的结果（如果不同的数据库是完全不同的，这个不在我们这篇文章讨论的范围之内，那个属于让项目支持多个数据源）\n\n其次，随着项目越来越大、操作的用户越来越多，对数据库的请求操作越来越多，很容易想到的是将读写请求分开，将写请求交给主库处理，读请求直接从某个从库读取。这样可以极大的减少大量对主库的请求，提升主库的性能。\n\n接下来具体说一下如何通过自定义注解完成切库（代码使用springboot实现）：\n\n### 第一步、定义我们自己的切库注解类\n\n自定义注解有几点需要注意：\n\n@Target 是作用的目标，接口、方法、类、字段、包等等，具体看：ElementType\n\n2）@Retention 是注解存在的范围，RUNTIME代表的是注解会在class字节码文件中存在，在运行时可以通过反射获取到，具体看：RetentionPolicy\n\n3）允许的变量，通常都要给定默认值，比如我们使用一个service时，可以@Service，也可以@Service(\"xxxx\")\n\n@Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD,ElementType.TYPE}) public @interface RoutingDataSource {     String value() default DataSources.MASTER_DB; }\n\n### 第二步、定义需要使用的数据库及配置\n\n#### 1、数据库配置：application.properties，这里要注意不同db的前缀区别\n\n```yaml\ndatasource:\n  druid:\n    db-master:\n      username: XXXXXX\n      password: XXXXXX!@#\n      url: jdbc:mysql://XXXXXX/dev\n      db-type: com.alibaba.druid.pool.DruidDataSource\n      driver-class-name:  com.mysql.cj.jdbc.Driver\n    db-slave:\n      username: XXXXXX\n      password: XXXXXX!@#\n      url: jdbc:mysql://XXXXXX:10092/dev\n      db-type: com.alibaba.druid.pool.DruidDataSource\n      driver-class-name:  com.mysql.cj.jdbc.Driver\n```\n#### 2、定义支持的数据源id：\n\n```java\npublic interface DataSources {\n    String MASTER_DB = \"db-maste\";\n    String SLAVE_DB = \"db-slave\";\n}\n```\n#### 3、多数据源配置代码\n\n```java\nimport com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Map;\n@Configuration\n@Component\npublic class DynamicDataSourceConfig {\n    @Bean\n    @ConfigurationProperties(\"spring.datasource.druid.wl-master\")\n    public DataSource  xiaobinMasterDataSource(){\n        return DruidDataSourceBuilder.create().build();\n    }\n\n    @Bean\n    @ConfigurationProperties(\"spring.datasource.druid.wl-slave\")\n    public DataSource  xiaobinSlaveDataSource(){\n        return DruidDataSourceBuilder.create().build();\n    }\n    @Bean\n    @Primary\n    public DynamicDataSource dataSource(DataSource xiaobinMasterDataSource, DataSource xiaobinSlaveDataSource) {\n        Map<Object, Object> targetDataSources = new HashMap<>();\n        targetDataSources.put(\"wl-master\",xiaobinMasterDataSource);\n        targetDataSources.put(\"wl-slave\", xiaobinSlaveDataSource);\n        return new DynamicDataSource(xiaobinMasterDataSource, targetDataSources);\n    }\n}\n```\n#### 4、配置成动态数据源：\n\n```java\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\nimport org.springframework.lang.Nullable;\nimport javax.sql.DataSource;\nimport java.util.Map;\n\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n    private static final ThreadLocal<String> contextHolder = new ThreadLocal<>();\n\n    public DynamicDataSource(DataSource defaultTargetDataSource, Map<Object, Object> targetDataSources) {\n        super.setDefaultTargetDataSource(defaultTargetDataSource);\n        super.setTargetDataSources(targetDataSources);\n        super.afterPropertiesSet();\n    }\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return getDataSource();\n    }\n    public static void setDataSource(String dataSource) {\n        contextHolder.set(dataSource);\n    }\n    public static String getDataSource() {\n        return contextHolder.get();\n    }\n    public static void clearDataSource() {\n        contextHolder.remove();\n    }\n}\n```\n#### 5、AOP切面类配置\n\n```java\n@Aspect\n@Component\npublic class DataSourceAspect {\n\n    @Pointcut(\"@annotation(com.xiaobin.annotation.DataSource)\")\n    public void dataSourcePointCut() {\n    }\n\n    @Around(\"dataSourcePointCut()\")\n    public Object around(ProceedingJoinPoint point) throws Throwable {\n        MethodSignature signature = (MethodSignature) point.getSignature();\n        Method method = signature.getMethod();\n\n        DataSource dataSource = method.getAnnotation(DataSource.class);\n        if(dataSource == null){\n            DynamicDataSource.setDataSource(\"wl-master\");\n        }else {\n            DynamicDataSource.setDataSource(dataSource.name());\n        }\n\n        try {\n            return point.proceed();\n        } finally {\n            DynamicDataSource.clearDataSource();\n        }\n    }\n}\n```\n#### 6、启动类配置，不然报错！\n\n```java\n@SpringBootApplication(exclude= {DataSourceAutoConfiguration.class})\n@MapperScan(basePackages = \"com.wl.mapper\")\n@Import({DynamicDataSourceConfig.class})\npublic class StartApp {\n    public static void main(String[] args) {\n        SpringApplication.run(StartApp.class);\n    }\n}\n```","slug":"MySql多数据源(自定义注解完成数据库切库,读写分离)","published":1,"updated":"2020-05-30T15:48:51.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hpx0004sx014py9fmvn","content":"<h3 id=\"本文参照：\"><a href=\"#本文参照：\" class=\"headerlink\" title=\"本文参照：\"></a>本文参照：</h3><p>前提</p>\n<p>​        这几天，学员们反馈希望学习一下自定义注解，正好准备高并发课程内容里有一块涉及到使用自定义注解完成数据库切库的内容。这里单独写一篇文章记录说明一下。</p>\n<p>为什么会有数据库切库一说</p>\n<p>首先，许多项目都有主库与从库，有的主库后面甚至会有很多个从库，主从库之间的通常同步也很快，这为数据库切库提供了一个基础，因为可以去不同的数据库查询，得到相同的结果（如果不同的数据库是完全不同的，这个不在我们这篇文章讨论的范围之内，那个属于让项目支持多个数据源）</p>\n<p>其次，随着项目越来越大、操作的用户越来越多，对数据库的请求操作越来越多，很容易想到的是将读写请求分开，将写请求交给主库处理，读请求直接从某个从库读取。这样可以极大的减少大量对主库的请求，提升主库的性能。</p>\n<p>接下来具体说一下如何通过自定义注解完成切库（代码使用springboot实现）：</p>\n<h3 id=\"第一步、定义我们自己的切库注解类\"><a href=\"#第一步、定义我们自己的切库注解类\" class=\"headerlink\" title=\"第一步、定义我们自己的切库注解类\"></a>第一步、定义我们自己的切库注解类</h3><p>自定义注解有几点需要注意：</p>\n<p>@Target 是作用的目标，接口、方法、类、字段、包等等，具体看：ElementType</p>\n<p>2）@Retention 是注解存在的范围，RUNTIME代表的是注解会在class字节码文件中存在，在运行时可以通过反射获取到，具体看：RetentionPolicy</p>\n<p>3）允许的变量，通常都要给定默认值，比如我们使用一个service时，可以@Service，也可以@Service(“xxxx”)</p>\n<p>@Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD,ElementType.TYPE}) public @interface RoutingDataSource {     String value() default DataSources.MASTER_DB; }</p>\n<h3 id=\"第二步、定义需要使用的数据库及配置\"><a href=\"#第二步、定义需要使用的数据库及配置\" class=\"headerlink\" title=\"第二步、定义需要使用的数据库及配置\"></a>第二步、定义需要使用的数据库及配置</h3><h4 id=\"1、数据库配置：application-properties，这里要注意不同db的前缀区别\"><a href=\"#1、数据库配置：application-properties，这里要注意不同db的前缀区别\" class=\"headerlink\" title=\"1、数据库配置：application.properties，这里要注意不同db的前缀区别\"></a>1、数据库配置：application.properties，这里要注意不同db的前缀区别</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">datasource:</span></span><br><span class=\"line\">  <span class=\"attr\">druid:</span></span><br><span class=\"line\">    <span class=\"attr\">db-master:</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">XXXXXX</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">XXXXXX!@#</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://XXXXXX/dev</span></span><br><span class=\"line\">      <span class=\"attr\">db-type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span>  <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">db-slave:</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">XXXXXX</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">XXXXXX!@#</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://XXXXXX:10092/dev</span></span><br><span class=\"line\">      <span class=\"attr\">db-type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span>  <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2、定义支持的数据源id：\"><a href=\"#2、定义支持的数据源id：\" class=\"headerlink\" title=\"2、定义支持的数据源id：\"></a>2、定义支持的数据源id：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DataSources</span> </span>&#123;</span><br><span class=\"line\">    String MASTER_DB = <span class=\"string\">\"db-maste\"</span>;</span><br><span class=\"line\">    String SLAVE_DB = <span class=\"string\">\"db-slave\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、多数据源配置代码\"><a href=\"#3、多数据源配置代码\" class=\"headerlink\" title=\"3、多数据源配置代码\"></a>3、多数据源配置代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicDataSourceConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"spring.datasource.druid.wl-master\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource  <span class=\"title\">xiaobinMasterDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DruidDataSourceBuilder.create().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"spring.datasource.druid.wl-slave\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource  <span class=\"title\">xiaobinSlaveDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DruidDataSourceBuilder.create().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DynamicDataSource <span class=\"title\">dataSource</span><span class=\"params\">(DataSource xiaobinMasterDataSource, DataSource xiaobinSlaveDataSource)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;Object, Object&gt; targetDataSources = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        targetDataSources.put(<span class=\"string\">\"wl-master\"</span>,xiaobinMasterDataSource);</span><br><span class=\"line\">        targetDataSources.put(<span class=\"string\">\"wl-slave\"</span>, xiaobinSlaveDataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DynamicDataSource(xiaobinMasterDataSource, targetDataSources);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、配置成动态数据源：\"><a href=\"#4、配置成动态数据源：\" class=\"headerlink\" title=\"4、配置成动态数据源：\"></a>4、配置成动态数据源：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.lang.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicDataSource</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;String&gt; contextHolder = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DynamicDataSource</span><span class=\"params\">(DataSource defaultTargetDataSource, Map&lt;Object, Object&gt; targetDataSources)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.setDefaultTargetDataSource(defaultTargetDataSource);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.setTargetDataSources(targetDataSources);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.afterPropertiesSet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">determineCurrentLookupKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setDataSource</span><span class=\"params\">(String dataSource)</span> </span>&#123;</span><br><span class=\"line\">        contextHolder.set(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> contextHolder.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        contextHolder.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、AOP切面类配置\"><a href=\"#5、AOP切面类配置\" class=\"headerlink\" title=\"5、AOP切面类配置\"></a>5、AOP切面类配置</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.xiaobin.annotation.DataSource)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dataSourcePointCut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"dataSourcePointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">around</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class=\"line\">        Method method = signature.getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">        DataSource dataSource = method.getAnnotation(DataSource<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dataSource == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            DynamicDataSource.setDataSource(<span class=\"string\">\"wl-master\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            DynamicDataSource.setDataSource(dataSource.name());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> point.proceed();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            DynamicDataSource.clearDataSource();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、启动类配置，不然报错！\"><a href=\"#6、启动类配置，不然报错！\" class=\"headerlink\" title=\"6、启动类配置，不然报错！\"></a>6、启动类配置，不然报错！</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span>(exclude= &#123;DataSourceAutoConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">MapperScan</span>(<span class=\"title\">basePackages</span> </span>= <span class=\"string\">\"com.wl.mapper\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Import</span>(&#123;DynamicDataSourceConfig<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">StartApp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(StartApp<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h3 id=\"本文参照：\"><a href=\"#本文参照：\" class=\"headerlink\" title=\"本文参照：\"></a>本文参照：</h3><p>前提</p>\n<p>​        这几天，学员们反馈希望学习一下自定义注解，正好准备高并发课程内容里有一块涉及到使用自定义注解完成数据库切库的内容。这里单独写一篇文章记录说明一下。</p>\n<p>为什么会有数据库切库一说</p>\n<p>首先，许多项目都有主库与从库，有的主库后面甚至会有很多个从库，主从库之间的通常同步也很快，这为数据库切库提供了一个基础，因为可以去不同的数据库查询，得到相同的结果（如果不同的数据库是完全不同的，这个不在我们这篇文章讨论的范围之内，那个属于让项目支持多个数据源）</p>\n<p>其次，随着项目越来越大、操作的用户越来越多，对数据库的请求操作越来越多，很容易想到的是将读写请求分开，将写请求交给主库处理，读请求直接从某个从库读取。这样可以极大的减少大量对主库的请求，提升主库的性能。</p>\n<p>接下来具体说一下如何通过自定义注解完成切库（代码使用springboot实现）：</p>\n<h3 id=\"第一步、定义我们自己的切库注解类\"><a href=\"#第一步、定义我们自己的切库注解类\" class=\"headerlink\" title=\"第一步、定义我们自己的切库注解类\"></a>第一步、定义我们自己的切库注解类</h3><p>自定义注解有几点需要注意：</p>\n<p>@Target 是作用的目标，接口、方法、类、字段、包等等，具体看：ElementType</p>\n<p>2）@Retention 是注解存在的范围，RUNTIME代表的是注解会在class字节码文件中存在，在运行时可以通过反射获取到，具体看：RetentionPolicy</p>\n<p>3）允许的变量，通常都要给定默认值，比如我们使用一个service时，可以@Service，也可以@Service(“xxxx”)</p>\n<p>@Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD,ElementType.TYPE}) public @interface RoutingDataSource {     String value() default DataSources.MASTER_DB; }</p>\n<h3 id=\"第二步、定义需要使用的数据库及配置\"><a href=\"#第二步、定义需要使用的数据库及配置\" class=\"headerlink\" title=\"第二步、定义需要使用的数据库及配置\"></a>第二步、定义需要使用的数据库及配置</h3><h4 id=\"1、数据库配置：application-properties，这里要注意不同db的前缀区别\"><a href=\"#1、数据库配置：application-properties，这里要注意不同db的前缀区别\" class=\"headerlink\" title=\"1、数据库配置：application.properties，这里要注意不同db的前缀区别\"></a>1、数据库配置：application.properties，这里要注意不同db的前缀区别</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">datasource:</span></span><br><span class=\"line\">  <span class=\"attr\">druid:</span></span><br><span class=\"line\">    <span class=\"attr\">db-master:</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">XXXXXX</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">XXXXXX!@#</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://XXXXXX/dev</span></span><br><span class=\"line\">      <span class=\"attr\">db-type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span>  <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">db-slave:</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">XXXXXX</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">XXXXXX!@#</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://XXXXXX:10092/dev</span></span><br><span class=\"line\">      <span class=\"attr\">db-type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span>  <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2、定义支持的数据源id：\"><a href=\"#2、定义支持的数据源id：\" class=\"headerlink\" title=\"2、定义支持的数据源id：\"></a>2、定义支持的数据源id：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DataSources</span> </span>&#123;</span><br><span class=\"line\">    String MASTER_DB = <span class=\"string\">\"db-maste\"</span>;</span><br><span class=\"line\">    String SLAVE_DB = <span class=\"string\">\"db-slave\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、多数据源配置代码\"><a href=\"#3、多数据源配置代码\" class=\"headerlink\" title=\"3、多数据源配置代码\"></a>3、多数据源配置代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicDataSourceConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"spring.datasource.druid.wl-master\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource  <span class=\"title\">xiaobinMasterDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DruidDataSourceBuilder.create().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"spring.datasource.druid.wl-slave\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource  <span class=\"title\">xiaobinSlaveDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DruidDataSourceBuilder.create().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DynamicDataSource <span class=\"title\">dataSource</span><span class=\"params\">(DataSource xiaobinMasterDataSource, DataSource xiaobinSlaveDataSource)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;Object, Object&gt; targetDataSources = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        targetDataSources.put(<span class=\"string\">\"wl-master\"</span>,xiaobinMasterDataSource);</span><br><span class=\"line\">        targetDataSources.put(<span class=\"string\">\"wl-slave\"</span>, xiaobinSlaveDataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DynamicDataSource(xiaobinMasterDataSource, targetDataSources);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、配置成动态数据源：\"><a href=\"#4、配置成动态数据源：\" class=\"headerlink\" title=\"4、配置成动态数据源：\"></a>4、配置成动态数据源：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.lang.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicDataSource</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;String&gt; contextHolder = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DynamicDataSource</span><span class=\"params\">(DataSource defaultTargetDataSource, Map&lt;Object, Object&gt; targetDataSources)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.setDefaultTargetDataSource(defaultTargetDataSource);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.setTargetDataSources(targetDataSources);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.afterPropertiesSet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">determineCurrentLookupKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setDataSource</span><span class=\"params\">(String dataSource)</span> </span>&#123;</span><br><span class=\"line\">        contextHolder.set(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> contextHolder.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        contextHolder.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、AOP切面类配置\"><a href=\"#5、AOP切面类配置\" class=\"headerlink\" title=\"5、AOP切面类配置\"></a>5、AOP切面类配置</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.xiaobin.annotation.DataSource)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dataSourcePointCut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"dataSourcePointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">around</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class=\"line\">        Method method = signature.getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">        DataSource dataSource = method.getAnnotation(DataSource<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dataSource == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            DynamicDataSource.setDataSource(<span class=\"string\">\"wl-master\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            DynamicDataSource.setDataSource(dataSource.name());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> point.proceed();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            DynamicDataSource.clearDataSource();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、启动类配置，不然报错！\"><a href=\"#6、启动类配置，不然报错！\" class=\"headerlink\" title=\"6、启动类配置，不然报错！\"></a>6、启动类配置，不然报错！</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span>(exclude= &#123;DataSourceAutoConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">MapperScan</span>(<span class=\"title\">basePackages</span> </span>= <span class=\"string\">\"com.wl.mapper\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Import</span>(&#123;DynamicDataSourceConfig<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">StartApp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(StartApp<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"SpringBoot-Jdbc","date":"2018-10-05T04:07:14.000Z","_content":"\n## 1、JDBC\n\n```xml\n<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-jdbc</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n```\n\n\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: 123456\n    url: jdbc:mysql://192.168.15.22:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n```\n\n效果：\n\n​\t默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；\n\n​\t数据源的相关配置都在DataSourceProperties里面；\n\n自动配置原理：\n\norg.springframework.boot.autoconfigure.jdbc：\n\n1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；\n\n2、SpringBoot默认可以支持；\n\n```\norg.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、\n```\n\n3、自定义数据源类型\n\n```java\n/**\n * Generic DataSource configuration.\n */\n@ConditionalOnMissingBean(DataSource.class)\n@ConditionalOnProperty(name = \"spring.datasource.type\")\nstatic class Generic {\n\n   @Bean\n   public DataSource dataSource(DataSourceProperties properties) {\n       //使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性\n      return properties.initializeDataSourceBuilder().build();\n   }\n\n}\n```\n\n4、**DataSourceInitializer：ApplicationListener**；\n\n​\t作用：\n\n​\t\t1）、runSchemaScripts();运行建表语句；\n\n​\t\t2）、runDataScripts();运行插入数据的sql语句；\n\n默认只需要将文件命名为：\n\n```properties\nschema-*.sql、data-*.sql\n默认规则：schema.sql，schema-all.sql；\n可以使用   \n\tschema:\n      - classpath:department.sql\n      指定位置\n```\n\n5、操作数据库：自动配置了JdbcTemplate操作数据库\n\n## 2、整合Druid数据源\n\n```java\n导入druid数据源\n@Configuration\npublic class DruidConfig {\n\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    @Bean\n    public DataSource druid(){\n       return  new DruidDataSource();\n    }\n\n    //配置Druid的监控\n    //1、配置一个管理后台的Servlet\n    @Bean\n    public ServletRegistrationBean statViewServlet(){\n        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), \"/druid/*\");\n        Map<String,String> initParams = new HashMap<>();\n\n        initParams.put(\"loginUsername\",\"admin\");\n        initParams.put(\"loginPassword\",\"123456\");\n        initParams.put(\"allow\",\"\");//默认就是允许所有访问\n        initParams.put(\"deny\",\"192.168.15.21\");\n\n        bean.setInitParameters(initParams);\n        return bean;\n    }\n\n\n    //2、配置一个web监控的filter\n    @Bean\n    public FilterRegistrationBean webStatFilter(){\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new WebStatFilter());\n\n        Map<String,String> initParams = new HashMap<>();\n        initParams.put(\"exclusions\",\"*.js,*.css,/druid/*\");\n\n        bean.setInitParameters(initParams);\n\n        bean.setUrlPatterns(Arrays.asList(\"/*\"));\n\n        return  bean;\n    }\n}\n\n```\n\n# ","source":"_posts/SpringBoot-Jdbc.md","raw":"---\ntitle: SpringBoot-Jdbc\ndate: 2018/10/05 12:07:14\n---\n\n## 1、JDBC\n\n```xml\n<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-jdbc</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n```\n\n\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: 123456\n    url: jdbc:mysql://192.168.15.22:3306/jdbc\n    driver-class-name: com.mysql.jdbc.Driver\n```\n\n效果：\n\n​\t默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；\n\n​\t数据源的相关配置都在DataSourceProperties里面；\n\n自动配置原理：\n\norg.springframework.boot.autoconfigure.jdbc：\n\n1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；\n\n2、SpringBoot默认可以支持；\n\n```\norg.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、\n```\n\n3、自定义数据源类型\n\n```java\n/**\n * Generic DataSource configuration.\n */\n@ConditionalOnMissingBean(DataSource.class)\n@ConditionalOnProperty(name = \"spring.datasource.type\")\nstatic class Generic {\n\n   @Bean\n   public DataSource dataSource(DataSourceProperties properties) {\n       //使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性\n      return properties.initializeDataSourceBuilder().build();\n   }\n\n}\n```\n\n4、**DataSourceInitializer：ApplicationListener**；\n\n​\t作用：\n\n​\t\t1）、runSchemaScripts();运行建表语句；\n\n​\t\t2）、runDataScripts();运行插入数据的sql语句；\n\n默认只需要将文件命名为：\n\n```properties\nschema-*.sql、data-*.sql\n默认规则：schema.sql，schema-all.sql；\n可以使用   \n\tschema:\n      - classpath:department.sql\n      指定位置\n```\n\n5、操作数据库：自动配置了JdbcTemplate操作数据库\n\n## 2、整合Druid数据源\n\n```java\n导入druid数据源\n@Configuration\npublic class DruidConfig {\n\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    @Bean\n    public DataSource druid(){\n       return  new DruidDataSource();\n    }\n\n    //配置Druid的监控\n    //1、配置一个管理后台的Servlet\n    @Bean\n    public ServletRegistrationBean statViewServlet(){\n        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), \"/druid/*\");\n        Map<String,String> initParams = new HashMap<>();\n\n        initParams.put(\"loginUsername\",\"admin\");\n        initParams.put(\"loginPassword\",\"123456\");\n        initParams.put(\"allow\",\"\");//默认就是允许所有访问\n        initParams.put(\"deny\",\"192.168.15.21\");\n\n        bean.setInitParameters(initParams);\n        return bean;\n    }\n\n\n    //2、配置一个web监控的filter\n    @Bean\n    public FilterRegistrationBean webStatFilter(){\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new WebStatFilter());\n\n        Map<String,String> initParams = new HashMap<>();\n        initParams.put(\"exclusions\",\"*.js,*.css,/druid/*\");\n\n        bean.setInitParameters(initParams);\n\n        bean.setUrlPatterns(Arrays.asList(\"/*\"));\n\n        return  bean;\n    }\n}\n\n```\n\n# ","slug":"SpringBoot-Jdbc","published":1,"updated":"2020-05-31T05:11:50.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hpz0005sx010x8q7q8o","content":"<h2 id=\"1、JDBC\"><a href=\"#1、JDBC\" class=\"headerlink\" title=\"1、JDBC\"></a>1、JDBC</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p>\n<p>​    数据源的相关配置都在DataSourceProperties里面；</p>\n<p>自动配置原理：</p>\n<p>org.springframework.boot.autoconfigure.jdbc：</p>\n<p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p>\n<p>2、SpringBoot默认可以支持；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、</span><br></pre></td></tr></table></figure>\n\n<p>3、自定义数据源类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Generic DataSource configuration.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span>(DataSource<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ConditionalOnProperty</span>(<span class=\"title\">name</span> </span>= <span class=\"string\">\"spring.datasource.type\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generic</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p>\n<p>​    作用：</p>\n<p>​        1）、runSchemaScripts();运行建表语句；</p>\n<p>​        2）、runDataScripts();运行插入数据的sql语句；</p>\n<p>默认只需要将文件命名为：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">schema-*.sql、data-*.sql</span></span><br><span class=\"line\"><span class=\"attr\">默认规则：schema.sql，schema-all.sql；</span></span><br><span class=\"line\"><span class=\"meta\">可以使用</span>   <span class=\"string\"></span></span><br><span class=\"line\">\t<span class=\"attr\">schema</span>:<span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"meta\">-</span> <span class=\"string\">classpath:department.sql</span></span><br><span class=\"line\">      <span class=\"attr\">指定位置</span></span><br></pre></td></tr></table></figure>\n\n<p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p>\n<h2 id=\"2、整合Druid数据源\"><a href=\"#2、整合Druid数据源\" class=\"headerlink\" title=\"2、整合Druid数据源\"></a>2、整合Druid数据源</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">导入druid数据源</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置Druid的监控</span></span><br><span class=\"line\">    <span class=\"comment\">//1、配置一个管理后台的Servlet</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">statViewServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean bean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> StatViewServlet(), <span class=\"string\">\"/druid/*\"</span>);</span><br><span class=\"line\">        Map&lt;String,String&gt; initParams = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        initParams.put(<span class=\"string\">\"loginUsername\"</span>,<span class=\"string\">\"admin\"</span>);</span><br><span class=\"line\">        initParams.put(<span class=\"string\">\"loginPassword\"</span>,<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\">        initParams.put(<span class=\"string\">\"allow\"</span>,<span class=\"string\">\"\"</span>);<span class=\"comment\">//默认就是允许所有访问</span></span><br><span class=\"line\">        initParams.put(<span class=\"string\">\"deny\"</span>,<span class=\"string\">\"192.168.15.21\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2、配置一个web监控的filter</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webStatFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean bean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> WebStatFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String,String&gt; initParams = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(<span class=\"string\">\"exclusions\"</span>,<span class=\"string\">\"*.js,*.css,/druid/*\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setUrlPatterns(Arrays.asList(<span class=\"string\">\"/*\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>  bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h2 id=\"1、JDBC\"><a href=\"#1、JDBC\" class=\"headerlink\" title=\"1、JDBC\"></a>1、JDBC</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p>\n<p>​    数据源的相关配置都在DataSourceProperties里面；</p>\n<p>自动配置原理：</p>\n<p>org.springframework.boot.autoconfigure.jdbc：</p>\n<p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p>\n<p>2、SpringBoot默认可以支持；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、</span><br></pre></td></tr></table></figure>\n\n<p>3、自定义数据源类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Generic DataSource configuration.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span>(DataSource<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ConditionalOnProperty</span>(<span class=\"title\">name</span> </span>= <span class=\"string\">\"spring.datasource.type\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generic</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSource</span><span class=\"params\">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p>\n<p>​    作用：</p>\n<p>​        1）、runSchemaScripts();运行建表语句；</p>\n<p>​        2）、runDataScripts();运行插入数据的sql语句；</p>\n<p>默认只需要将文件命名为：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">schema-*.sql、data-*.sql</span></span><br><span class=\"line\"><span class=\"attr\">默认规则：schema.sql，schema-all.sql；</span></span><br><span class=\"line\"><span class=\"meta\">可以使用</span>   <span class=\"string\"></span></span><br><span class=\"line\">\t<span class=\"attr\">schema</span>:<span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"meta\">-</span> <span class=\"string\">classpath:department.sql</span></span><br><span class=\"line\">      <span class=\"attr\">指定位置</span></span><br></pre></td></tr></table></figure>\n\n<p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p>\n<h2 id=\"2、整合Druid数据源\"><a href=\"#2、整合Druid数据源\" class=\"headerlink\" title=\"2、整合Druid数据源\"></a>2、整合Druid数据源</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">导入druid数据源</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置Druid的监控</span></span><br><span class=\"line\">    <span class=\"comment\">//1、配置一个管理后台的Servlet</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">statViewServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean bean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> StatViewServlet(), <span class=\"string\">\"/druid/*\"</span>);</span><br><span class=\"line\">        Map&lt;String,String&gt; initParams = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        initParams.put(<span class=\"string\">\"loginUsername\"</span>,<span class=\"string\">\"admin\"</span>);</span><br><span class=\"line\">        initParams.put(<span class=\"string\">\"loginPassword\"</span>,<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\">        initParams.put(<span class=\"string\">\"allow\"</span>,<span class=\"string\">\"\"</span>);<span class=\"comment\">//默认就是允许所有访问</span></span><br><span class=\"line\">        initParams.put(<span class=\"string\">\"deny\"</span>,<span class=\"string\">\"192.168.15.21\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2、配置一个web监控的filter</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webStatFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean bean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> WebStatFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String,String&gt; initParams = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        initParams.put(<span class=\"string\">\"exclusions\"</span>,<span class=\"string\">\"*.js,*.css,/druid/*\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setInitParameters(initParams);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setUrlPatterns(Arrays.asList(<span class=\"string\">\"/*\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>  bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"SpringBoot-Mycat（MySql读写分离）","date":"2019-05-05T04:07:14.000Z","_content":"\n[TOC]\n\n\n\n- [ ] ## Mysql配置\n\n### 1、环境信息\n\n```\n操作系统:centos7.0\n#mysql版本 mysql-community-client-5.7.25-1.el6.x86_64.rpm\n#节点 192.168.4.182(主)、192.168.4.183(从)\n```\n\n### 2、主数据库配置(my.cnf)\n\n```less\nvim /etc/my.cnf\n#日志文件名称\nlog-bin=master-a-bin #二进制日志的格式，有row、statement和mixed三种类型 \nbinlog-format=ROW #要求各个服务器的这个id必须不一样\nserver-id=1\n#同步的数据库名称\nbinlog-do-db=yidiankt\n```\n\n### 3、mysql执行,账号授权(让从库可以连接到)\n\n```shell\nmysql> grant replication slave on *.* to 'root'@'192.168.4.199' identified by '123456';\nflush privileges;\n#ERROR 1819 (HY000): Your password does not satisfy the current policy requirements(解决办法)\nset global validate_password_length=6; \nset global validate_password_policy=LOW;\n```\n\n### 4、从数据库配置(my.cnf)\n\n```shell\n#日志文件名称\nlog-bin=master-a-bin\n#二进制日志的格式，跟主服务器一样\nbinlog-format=ROW\n#要求各个服务器的这个id必须不一样\nserver-id=2 #中继日志执行之后，这些变化是否需要计入自己的binarylog。当你的从服务器需要作为另外一个服务器的主服务器 的时候需要打开。就是双主互相备份，或者多主循环备份。\nlog-slave-updates=true\n```\n\n### 5、主数据库重启\n\n```shell\nservice mysqld restart\nmysql> show master status;\n+---------------------+----------+--------------+------------------+-------------------+\n| File                | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+---------------------+----------+--------------+------------------+-------------------+\n| master-a-bin.000002 |      154 |  slave_test  |                  |                   |\n+---------------------+----------+--------------+------------------+-------------------+\n\n```\n\n### 6、切换到从库\n\n```shell\nservice mysqld restart\n#设置主从同步日志(在从库中执行！)\nmysql> change master to \nmaster_host='192.168.4.189',\nmaster_user='root',\nmaster_password='123456',\nmaster_port=3306,\nmaster_log_file='master-a-bin.000010',\nmaster_log_pos=1449;\n#开启从数据库\nmysql> start slave;\n#查看状态(Slave_IO_Running,Slave_IO_Running都是yes才没问题，所以现在是有问题的！)\nmysql> show slave status \\G;\n*************************** 1. row ***************************\n               Slave_IO_State: \n                  Master_Host: 192.168.4.199\n                  Master_User: root\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: master-a-bin.000002\n          Read_Master_Log_Pos: 154\n               Relay_Log_File: localhost-relay-bin.000001\n                Relay_Log_Pos: 4\n        Relay_Master_Log_File: master-a-bin.000002\n             Slave_IO_Running: No\n            Slave_IO_Running: No\n#添加从库连接权限\ngrant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;\n```\n\n### 7、 测试主从同步！\n\n```mysql\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\ninsert user values(id,name),(1,\"a\");\n```\n\n- [ ] ## MyCat配置\n\n### 1、下载、安装、环境变量mycat\n\n```shell\nwget http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz\ntar -zvxf Mycat-server-1.5.1-RELEASE-20160602230303-linux.tar.gz \n#配置环境变量(非必须)\nvi /etc/profile\n#export MYCAT_HOME=/usr/local/mycat\nsource /etc/profile\n#测试是否生效：\necho $MYCAT_HOME\n```\n\n### 2、配置mycat(server.xml)\n\n\n\n```shell\nvim mycat/conf/server.xml \n<!--system中添加UTF-8字符集设置，否则存储中文会出现问号 -->\n<property name=\"charset\">utf8</property>\n<user name=\"root\">\n    <property name=\"password\">123456</property>\n    <property name=\"schemas\">TESTDB</property>\n</user>\n<user name=\"user\">\n    <property name=\"password\">123456</property>\n    <property name=\"schemas\">mycat</property>\n    <property name=\"readOnly\">true</property>\n</user>\n```\n\n### 3、配置mycat(schema.xml)\n\n```xml\nvim mycat/conf/schema.xml\n<!-- 配置节点 -->\n<dataNode name=\"mycat_test\" dataHost=\"localhost1\" database=\"slave_test\" />\n<!-- balance参数说明: 0-不使用读写分离 1-使用读写分离 2-随机分配 -->\n<dataHost name=\"localhost1\" maxCon=\"1000\" minCon=\"10\" balance=\"1\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\" switchType=\"1\"  slaveThreshold=\"100\">\n    <heartbeat>select user()</heartbeat>\n    <!-- 配置主节点(可以配置多个节点)-->\n    <writeHost host=\"hostM1\" url=\"192.168.4.199:3306\" user=\"root\" password=\"123456\">\n        <!-- 配合从节点(可以配置多个节点) -->\n        <readHost host=\"hostS2\" url=\"192.168.4.190:3306\" user=\"root\" password=\"123456\" />\n    </writeHost>\n</dataHost>\n<!-- 添加 dataNode=\"mycat_test\" 否则不生效-->\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"mycat_test\">\n```\n\n### 4、启动测试\n\n```shell\n./mycat/bin/mycat start\n#查看是否启动\nps -ef | grep mycat\n#登录mycat管理端口(一定要是管理端口！否则mycat命令无法使用)\nmysql -uroot -p123456 -P9066 -h127.0.0.1\n#-------------------mycat常用命令-------------------\n#查看数据源的状态\nmysql> show @@datasource;\n#查看心跳状态\nmysql> show @@heartbeat;\n#用于更新 schema.xml 配置文件,免得重启服务\nreload @@config;\n#-----------------------------------------------\n#修改日志级别\nvim mycat/conf/log4j2.xml \n<asyncRoot level=\"info\" includeLocation=\"true\"> 修改为“debug”查看实时日志\n#查看实时日志\ntail -f mycat/logs/wrapper.log \n```\n\n","source":"_posts/SpringBoot-Mycat（MySql读写分离）.md","raw":"---\ntitle: SpringBoot-Mycat（MySql读写分离）\ndate: 2019/05/05 12:07:14\n---\n\n[TOC]\n\n\n\n- [ ] ## Mysql配置\n\n### 1、环境信息\n\n```\n操作系统:centos7.0\n#mysql版本 mysql-community-client-5.7.25-1.el6.x86_64.rpm\n#节点 192.168.4.182(主)、192.168.4.183(从)\n```\n\n### 2、主数据库配置(my.cnf)\n\n```less\nvim /etc/my.cnf\n#日志文件名称\nlog-bin=master-a-bin #二进制日志的格式，有row、statement和mixed三种类型 \nbinlog-format=ROW #要求各个服务器的这个id必须不一样\nserver-id=1\n#同步的数据库名称\nbinlog-do-db=yidiankt\n```\n\n### 3、mysql执行,账号授权(让从库可以连接到)\n\n```shell\nmysql> grant replication slave on *.* to 'root'@'192.168.4.199' identified by '123456';\nflush privileges;\n#ERROR 1819 (HY000): Your password does not satisfy the current policy requirements(解决办法)\nset global validate_password_length=6; \nset global validate_password_policy=LOW;\n```\n\n### 4、从数据库配置(my.cnf)\n\n```shell\n#日志文件名称\nlog-bin=master-a-bin\n#二进制日志的格式，跟主服务器一样\nbinlog-format=ROW\n#要求各个服务器的这个id必须不一样\nserver-id=2 #中继日志执行之后，这些变化是否需要计入自己的binarylog。当你的从服务器需要作为另外一个服务器的主服务器 的时候需要打开。就是双主互相备份，或者多主循环备份。\nlog-slave-updates=true\n```\n\n### 5、主数据库重启\n\n```shell\nservice mysqld restart\nmysql> show master status;\n+---------------------+----------+--------------+------------------+-------------------+\n| File                | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+---------------------+----------+--------------+------------------+-------------------+\n| master-a-bin.000002 |      154 |  slave_test  |                  |                   |\n+---------------------+----------+--------------+------------------+-------------------+\n\n```\n\n### 6、切换到从库\n\n```shell\nservice mysqld restart\n#设置主从同步日志(在从库中执行！)\nmysql> change master to \nmaster_host='192.168.4.189',\nmaster_user='root',\nmaster_password='123456',\nmaster_port=3306,\nmaster_log_file='master-a-bin.000010',\nmaster_log_pos=1449;\n#开启从数据库\nmysql> start slave;\n#查看状态(Slave_IO_Running,Slave_IO_Running都是yes才没问题，所以现在是有问题的！)\nmysql> show slave status \\G;\n*************************** 1. row ***************************\n               Slave_IO_State: \n                  Master_Host: 192.168.4.199\n                  Master_User: root\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: master-a-bin.000002\n          Read_Master_Log_Pos: 154\n               Relay_Log_File: localhost-relay-bin.000001\n                Relay_Log_Pos: 4\n        Relay_Master_Log_File: master-a-bin.000002\n             Slave_IO_Running: No\n            Slave_IO_Running: No\n#添加从库连接权限\ngrant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;\n```\n\n### 7、 测试主从同步！\n\n```mysql\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\ninsert user values(id,name),(1,\"a\");\n```\n\n- [ ] ## MyCat配置\n\n### 1、下载、安装、环境变量mycat\n\n```shell\nwget http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz\ntar -zvxf Mycat-server-1.5.1-RELEASE-20160602230303-linux.tar.gz \n#配置环境变量(非必须)\nvi /etc/profile\n#export MYCAT_HOME=/usr/local/mycat\nsource /etc/profile\n#测试是否生效：\necho $MYCAT_HOME\n```\n\n### 2、配置mycat(server.xml)\n\n\n\n```shell\nvim mycat/conf/server.xml \n<!--system中添加UTF-8字符集设置，否则存储中文会出现问号 -->\n<property name=\"charset\">utf8</property>\n<user name=\"root\">\n    <property name=\"password\">123456</property>\n    <property name=\"schemas\">TESTDB</property>\n</user>\n<user name=\"user\">\n    <property name=\"password\">123456</property>\n    <property name=\"schemas\">mycat</property>\n    <property name=\"readOnly\">true</property>\n</user>\n```\n\n### 3、配置mycat(schema.xml)\n\n```xml\nvim mycat/conf/schema.xml\n<!-- 配置节点 -->\n<dataNode name=\"mycat_test\" dataHost=\"localhost1\" database=\"slave_test\" />\n<!-- balance参数说明: 0-不使用读写分离 1-使用读写分离 2-随机分配 -->\n<dataHost name=\"localhost1\" maxCon=\"1000\" minCon=\"10\" balance=\"1\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\" switchType=\"1\"  slaveThreshold=\"100\">\n    <heartbeat>select user()</heartbeat>\n    <!-- 配置主节点(可以配置多个节点)-->\n    <writeHost host=\"hostM1\" url=\"192.168.4.199:3306\" user=\"root\" password=\"123456\">\n        <!-- 配合从节点(可以配置多个节点) -->\n        <readHost host=\"hostS2\" url=\"192.168.4.190:3306\" user=\"root\" password=\"123456\" />\n    </writeHost>\n</dataHost>\n<!-- 添加 dataNode=\"mycat_test\" 否则不生效-->\n<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"mycat_test\">\n```\n\n### 4、启动测试\n\n```shell\n./mycat/bin/mycat start\n#查看是否启动\nps -ef | grep mycat\n#登录mycat管理端口(一定要是管理端口！否则mycat命令无法使用)\nmysql -uroot -p123456 -P9066 -h127.0.0.1\n#-------------------mycat常用命令-------------------\n#查看数据源的状态\nmysql> show @@datasource;\n#查看心跳状态\nmysql> show @@heartbeat;\n#用于更新 schema.xml 配置文件,免得重启服务\nreload @@config;\n#-----------------------------------------------\n#修改日志级别\nvim mycat/conf/log4j2.xml \n<asyncRoot level=\"info\" includeLocation=\"true\"> 修改为“debug”查看实时日志\n#查看实时日志\ntail -f mycat/logs/wrapper.log \n```\n\n","slug":"SpringBoot-Mycat（MySql读写分离）","published":1,"updated":"2020-05-30T16:04:30.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hq10006sx01dzt71ojt","content":"<p>[TOC]</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <h2 id=\"Mysql配置\"><a href=\"#Mysql配置\" class=\"headerlink\" title=\"Mysql配置\"></a>Mysql配置</h2></li>\n</ul>\n<h3 id=\"1、环境信息\"><a href=\"#1、环境信息\" class=\"headerlink\" title=\"1、环境信息\"></a>1、环境信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统:centos7.0</span><br><span class=\"line\">#mysql版本 mysql-community-client-5.7.25-1.el6.x86_64.rpm</span><br><span class=\"line\">#节点 192.168.4.182(主)、192.168.4.183(从)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、主数据库配置-my-cnf\"><a href=\"#2、主数据库配置-my-cnf\" class=\"headerlink\" title=\"2、主数据库配置(my.cnf)\"></a>2、主数据库配置(my.cnf)</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">vim</span> /<span class=\"selector-tag\">etc</span>/<span class=\"selector-tag\">my</span><span class=\"selector-class\">.cnf</span></span><br><span class=\"line\">#日志文件名称</span><br><span class=\"line\">log-bin=master-a-bin #二进制日志的格式，有row、statement和mixed三种类型 </span><br><span class=\"line\">binlog-format=ROW #要求各个服务器的这个id必须不一样</span><br><span class=\"line\">server-id=1</span><br><span class=\"line\">#同步的数据库名称</span><br><span class=\"line\">binlog-do-db=yidiankt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、mysql执行-账号授权-让从库可以连接到\"><a href=\"#3、mysql执行-账号授权-让从库可以连接到\" class=\"headerlink\" title=\"3、mysql执行,账号授权(让从库可以连接到)\"></a>3、mysql执行,账号授权(让从库可以连接到)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> grant replication slave on *.* to <span class=\"string\">'root'</span>@<span class=\"string\">'192.168.4.199'</span> identified by <span class=\"string\">'123456'</span>;</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements(解决办法)</span></span><br><span class=\"line\">set global validate_password_length=6; </span><br><span class=\"line\">set global validate_password_policy=LOW;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、从数据库配置-my-cnf\"><a href=\"#4、从数据库配置-my-cnf\" class=\"headerlink\" title=\"4、从数据库配置(my.cnf)\"></a>4、从数据库配置(my.cnf)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">日志文件名称</span></span><br><span class=\"line\">log-bin=master-a-bin</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">二进制日志的格式，跟主服务器一样</span></span><br><span class=\"line\">binlog-format=ROW</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">要求各个服务器的这个id必须不一样</span></span><br><span class=\"line\">server-id=2 #中继日志执行之后，这些变化是否需要计入自己的binarylog。当你的从服务器需要作为另外一个服务器的主服务器 的时候需要打开。就是双主互相备份，或者多主循环备份。</span><br><span class=\"line\">log-slave-updates=true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、主数据库重启\"><a href=\"#5、主数据库重启\" class=\"headerlink\" title=\"5、主数据库重启\"></a>5、主数据库重启</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show master status;</span></span><br><span class=\"line\">+---------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File                | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+---------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| master-a-bin.000002 |      154 |  slave_test  |                  |                   |</span><br><span class=\"line\">+---------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、切换到从库\"><a href=\"#6、切换到从库\" class=\"headerlink\" title=\"6、切换到从库\"></a>6、切换到从库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置主从同步日志(在从库中执行！)</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> change master to </span></span><br><span class=\"line\">master_host='192.168.4.189',</span><br><span class=\"line\">master_user='root',</span><br><span class=\"line\">master_password='123456',</span><br><span class=\"line\">master_port=3306,</span><br><span class=\"line\">master_log_file='master-a-bin.000010',</span><br><span class=\"line\">master_log_pos=1449;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开启从数据库</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> start slave;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看状态(Slave_IO_Running,Slave_IO_Running都是yes才没问题，所以现在是有问题的！)</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show slave status \\G;</span></span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: </span><br><span class=\"line\">                  Master_Host: 192.168.4.199</span><br><span class=\"line\">                  Master_User: root</span><br><span class=\"line\">                  Master_Port: 3306</span><br><span class=\"line\">                Connect_Retry: 60</span><br><span class=\"line\">              Master_Log_File: master-a-bin.000002</span><br><span class=\"line\">          Read_Master_Log_Pos: 154</span><br><span class=\"line\">               Relay_Log_File: localhost-relay-bin.000001</span><br><span class=\"line\">                Relay_Log_Pos: 4</span><br><span class=\"line\">        Relay_Master_Log_File: master-a-bin.000002</span><br><span class=\"line\">             Slave_IO_Running: No</span><br><span class=\"line\">            Slave_IO_Running: No</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加从库连接权限</span></span><br><span class=\"line\">grant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、-测试主从同步！\"><a href=\"#7、-测试主从同步！\" class=\"headerlink\" title=\"7、 测试主从同步！\"></a>7、 测试主从同步！</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &#96;user&#96; (</span><br><span class=\"line\">  &#96;id&#96; int(11) NOT NULL,</span><br><span class=\"line\">  &#96;name&#96; varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (&#96;id&#96;)</span><br><span class=\"line\">) ENGINE&#x3D;InnoDB;</span><br><span class=\"line\">insert user values(id,name),(1,&quot;a&quot;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <h2 id=\"MyCat配置\"><a href=\"#MyCat配置\" class=\"headerlink\" title=\"MyCat配置\"></a>MyCat配置</h2></li>\n</ul>\n<h3 id=\"1、下载、安装、环境变量mycat\"><a href=\"#1、下载、安装、环境变量mycat\" class=\"headerlink\" title=\"1、下载、安装、环境变量mycat\"></a>1、下载、安装、环境变量mycat</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</span><br><span class=\"line\">tar -zvxf Mycat-server-1.5.1-RELEASE-20160602230303-linux.tar.gz </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置环境变量(非必须)</span></span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"built_in\">export</span> MYCAT_HOME=/usr/<span class=\"built_in\">local</span>/mycat</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">测试是否生效：</span></span><br><span class=\"line\">echo $MYCAT_HOME</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、配置mycat-server-xml\"><a href=\"#2、配置mycat-server-xml\" class=\"headerlink\" title=\"2、配置mycat(server.xml)\"></a>2、配置mycat(server.xml)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mycat/conf/server.xml </span><br><span class=\"line\">&lt;!--system中添加UTF-8字符集设置，否则存储中文会出现问号 --&gt;</span><br><span class=\"line\">&lt;property name=\"charset\"&gt;utf8&lt;/property&gt;</span><br><span class=\"line\">&lt;user name=\"root\"&gt;</span><br><span class=\"line\">    &lt;property name=\"password\"&gt;123456&lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=\"schemas\"&gt;TESTDB&lt;/property&gt;</span><br><span class=\"line\">&lt;/user&gt;</span><br><span class=\"line\">&lt;user name=\"user\"&gt;</span><br><span class=\"line\">    &lt;property name=\"password\"&gt;123456&lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=\"schemas\"&gt;mycat&lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=\"readOnly\"&gt;true&lt;/property&gt;</span><br><span class=\"line\">&lt;/user&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、配置mycat-schema-xml\"><a href=\"#3、配置mycat-schema-xml\" class=\"headerlink\" title=\"3、配置mycat(schema.xml)\"></a>3、配置mycat(schema.xml)</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mycat/conf/schema.xml</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置节点 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dataNode</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mycat_test\"</span> <span class=\"attr\">dataHost</span>=<span class=\"string\">\"localhost1\"</span> <span class=\"attr\">database</span>=<span class=\"string\">\"slave_test\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- balance参数说明: 0-不使用读写分离 1-使用读写分离 2-随机分配 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dataHost</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost1\"</span> <span class=\"attr\">maxCon</span>=<span class=\"string\">\"1000\"</span> <span class=\"attr\">minCon</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">balance</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">writeType</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">dbType</span>=<span class=\"string\">\"mysql\"</span> <span class=\"attr\">dbDriver</span>=<span class=\"string\">\"native\"</span> <span class=\"attr\">switchType</span>=<span class=\"string\">\"1\"</span>  <span class=\"attr\">slaveThreshold</span>=<span class=\"string\">\"100\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">heartbeat</span>&gt;</span>select user()<span class=\"tag\">&lt;/<span class=\"name\">heartbeat</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置主节点(可以配置多个节点)--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">writeHost</span> <span class=\"attr\">host</span>=<span class=\"string\">\"hostM1\"</span> <span class=\"attr\">url</span>=<span class=\"string\">\"192.168.4.199:3306\"</span> <span class=\"attr\">user</span>=<span class=\"string\">\"root\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配合从节点(可以配置多个节点) --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">readHost</span> <span class=\"attr\">host</span>=<span class=\"string\">\"hostS2\"</span> <span class=\"attr\">url</span>=<span class=\"string\">\"192.168.4.190:3306\"</span> <span class=\"attr\">user</span>=<span class=\"string\">\"root\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">writeHost</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dataHost</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加 dataNode=\"mycat_test\" 否则不生效--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">\"TESTDB\"</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">\"mycat_test\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、启动测试\"><a href=\"#4、启动测试\" class=\"headerlink\" title=\"4、启动测试\"></a>4、启动测试</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mycat/bin/mycat start</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看是否启动</span></span><br><span class=\"line\">ps -ef | grep mycat</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">登录mycat管理端口(一定要是管理端口！否则mycat命令无法使用)</span></span><br><span class=\"line\">mysql -uroot -p123456 -P9066 -h127.0.0.1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-------------------mycat常用命令-------------------</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看数据源的状态</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show @@datasource;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看心跳状态</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show @@heartbeat;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">用于更新 schema.xml 配置文件,免得重启服务</span></span><br><span class=\"line\">reload @@config;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-----------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改日志级别</span></span><br><span class=\"line\">vim mycat/conf/log4j2.xml </span><br><span class=\"line\">&lt;asyncRoot level=\"info\" includeLocation=\"true\"&gt; 修改为“debug”查看实时日志</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看实时日志</span></span><br><span class=\"line\">tail -f mycat/logs/wrapper.log</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<p>[TOC]</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <h2 id=\"Mysql配置\"><a href=\"#Mysql配置\" class=\"headerlink\" title=\"Mysql配置\"></a>Mysql配置</h2></li>\n</ul>\n<h3 id=\"1、环境信息\"><a href=\"#1、环境信息\" class=\"headerlink\" title=\"1、环境信息\"></a>1、环境信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统:centos7.0</span><br><span class=\"line\">#mysql版本 mysql-community-client-5.7.25-1.el6.x86_64.rpm</span><br><span class=\"line\">#节点 192.168.4.182(主)、192.168.4.183(从)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、主数据库配置-my-cnf\"><a href=\"#2、主数据库配置-my-cnf\" class=\"headerlink\" title=\"2、主数据库配置(my.cnf)\"></a>2、主数据库配置(my.cnf)</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">vim</span> /<span class=\"selector-tag\">etc</span>/<span class=\"selector-tag\">my</span><span class=\"selector-class\">.cnf</span></span><br><span class=\"line\">#日志文件名称</span><br><span class=\"line\">log-bin=master-a-bin #二进制日志的格式，有row、statement和mixed三种类型 </span><br><span class=\"line\">binlog-format=ROW #要求各个服务器的这个id必须不一样</span><br><span class=\"line\">server-id=1</span><br><span class=\"line\">#同步的数据库名称</span><br><span class=\"line\">binlog-do-db=yidiankt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、mysql执行-账号授权-让从库可以连接到\"><a href=\"#3、mysql执行-账号授权-让从库可以连接到\" class=\"headerlink\" title=\"3、mysql执行,账号授权(让从库可以连接到)\"></a>3、mysql执行,账号授权(让从库可以连接到)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> grant replication slave on *.* to <span class=\"string\">'root'</span>@<span class=\"string\">'192.168.4.199'</span> identified by <span class=\"string\">'123456'</span>;</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements(解决办法)</span></span><br><span class=\"line\">set global validate_password_length=6; </span><br><span class=\"line\">set global validate_password_policy=LOW;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、从数据库配置-my-cnf\"><a href=\"#4、从数据库配置-my-cnf\" class=\"headerlink\" title=\"4、从数据库配置(my.cnf)\"></a>4、从数据库配置(my.cnf)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">日志文件名称</span></span><br><span class=\"line\">log-bin=master-a-bin</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">二进制日志的格式，跟主服务器一样</span></span><br><span class=\"line\">binlog-format=ROW</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">要求各个服务器的这个id必须不一样</span></span><br><span class=\"line\">server-id=2 #中继日志执行之后，这些变化是否需要计入自己的binarylog。当你的从服务器需要作为另外一个服务器的主服务器 的时候需要打开。就是双主互相备份，或者多主循环备份。</span><br><span class=\"line\">log-slave-updates=true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、主数据库重启\"><a href=\"#5、主数据库重启\" class=\"headerlink\" title=\"5、主数据库重启\"></a>5、主数据库重启</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show master status;</span></span><br><span class=\"line\">+---------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File                | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+---------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| master-a-bin.000002 |      154 |  slave_test  |                  |                   |</span><br><span class=\"line\">+---------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、切换到从库\"><a href=\"#6、切换到从库\" class=\"headerlink\" title=\"6、切换到从库\"></a>6、切换到从库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置主从同步日志(在从库中执行！)</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> change master to </span></span><br><span class=\"line\">master_host='192.168.4.189',</span><br><span class=\"line\">master_user='root',</span><br><span class=\"line\">master_password='123456',</span><br><span class=\"line\">master_port=3306,</span><br><span class=\"line\">master_log_file='master-a-bin.000010',</span><br><span class=\"line\">master_log_pos=1449;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开启从数据库</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> start slave;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看状态(Slave_IO_Running,Slave_IO_Running都是yes才没问题，所以现在是有问题的！)</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show slave status \\G;</span></span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: </span><br><span class=\"line\">                  Master_Host: 192.168.4.199</span><br><span class=\"line\">                  Master_User: root</span><br><span class=\"line\">                  Master_Port: 3306</span><br><span class=\"line\">                Connect_Retry: 60</span><br><span class=\"line\">              Master_Log_File: master-a-bin.000002</span><br><span class=\"line\">          Read_Master_Log_Pos: 154</span><br><span class=\"line\">               Relay_Log_File: localhost-relay-bin.000001</span><br><span class=\"line\">                Relay_Log_Pos: 4</span><br><span class=\"line\">        Relay_Master_Log_File: master-a-bin.000002</span><br><span class=\"line\">             Slave_IO_Running: No</span><br><span class=\"line\">            Slave_IO_Running: No</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加从库连接权限</span></span><br><span class=\"line\">grant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、-测试主从同步！\"><a href=\"#7、-测试主从同步！\" class=\"headerlink\" title=\"7、 测试主从同步！\"></a>7、 测试主从同步！</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &#96;user&#96; (</span><br><span class=\"line\">  &#96;id&#96; int(11) NOT NULL,</span><br><span class=\"line\">  &#96;name&#96; varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (&#96;id&#96;)</span><br><span class=\"line\">) ENGINE&#x3D;InnoDB;</span><br><span class=\"line\">insert user values(id,name),(1,&quot;a&quot;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <h2 id=\"MyCat配置\"><a href=\"#MyCat配置\" class=\"headerlink\" title=\"MyCat配置\"></a>MyCat配置</h2></li>\n</ul>\n<h3 id=\"1、下载、安装、环境变量mycat\"><a href=\"#1、下载、安装、环境变量mycat\" class=\"headerlink\" title=\"1、下载、安装、环境变量mycat\"></a>1、下载、安装、环境变量mycat</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</span><br><span class=\"line\">tar -zvxf Mycat-server-1.5.1-RELEASE-20160602230303-linux.tar.gz </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置环境变量(非必须)</span></span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"built_in\">export</span> MYCAT_HOME=/usr/<span class=\"built_in\">local</span>/mycat</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">测试是否生效：</span></span><br><span class=\"line\">echo $MYCAT_HOME</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、配置mycat-server-xml\"><a href=\"#2、配置mycat-server-xml\" class=\"headerlink\" title=\"2、配置mycat(server.xml)\"></a>2、配置mycat(server.xml)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mycat/conf/server.xml </span><br><span class=\"line\">&lt;!--system中添加UTF-8字符集设置，否则存储中文会出现问号 --&gt;</span><br><span class=\"line\">&lt;property name=\"charset\"&gt;utf8&lt;/property&gt;</span><br><span class=\"line\">&lt;user name=\"root\"&gt;</span><br><span class=\"line\">    &lt;property name=\"password\"&gt;123456&lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=\"schemas\"&gt;TESTDB&lt;/property&gt;</span><br><span class=\"line\">&lt;/user&gt;</span><br><span class=\"line\">&lt;user name=\"user\"&gt;</span><br><span class=\"line\">    &lt;property name=\"password\"&gt;123456&lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=\"schemas\"&gt;mycat&lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=\"readOnly\"&gt;true&lt;/property&gt;</span><br><span class=\"line\">&lt;/user&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、配置mycat-schema-xml\"><a href=\"#3、配置mycat-schema-xml\" class=\"headerlink\" title=\"3、配置mycat(schema.xml)\"></a>3、配置mycat(schema.xml)</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mycat/conf/schema.xml</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置节点 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dataNode</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mycat_test\"</span> <span class=\"attr\">dataHost</span>=<span class=\"string\">\"localhost1\"</span> <span class=\"attr\">database</span>=<span class=\"string\">\"slave_test\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- balance参数说明: 0-不使用读写分离 1-使用读写分离 2-随机分配 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dataHost</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost1\"</span> <span class=\"attr\">maxCon</span>=<span class=\"string\">\"1000\"</span> <span class=\"attr\">minCon</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">balance</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">writeType</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">dbType</span>=<span class=\"string\">\"mysql\"</span> <span class=\"attr\">dbDriver</span>=<span class=\"string\">\"native\"</span> <span class=\"attr\">switchType</span>=<span class=\"string\">\"1\"</span>  <span class=\"attr\">slaveThreshold</span>=<span class=\"string\">\"100\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">heartbeat</span>&gt;</span>select user()<span class=\"tag\">&lt;/<span class=\"name\">heartbeat</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置主节点(可以配置多个节点)--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">writeHost</span> <span class=\"attr\">host</span>=<span class=\"string\">\"hostM1\"</span> <span class=\"attr\">url</span>=<span class=\"string\">\"192.168.4.199:3306\"</span> <span class=\"attr\">user</span>=<span class=\"string\">\"root\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配合从节点(可以配置多个节点) --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">readHost</span> <span class=\"attr\">host</span>=<span class=\"string\">\"hostS2\"</span> <span class=\"attr\">url</span>=<span class=\"string\">\"192.168.4.190:3306\"</span> <span class=\"attr\">user</span>=<span class=\"string\">\"root\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">writeHost</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dataHost</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加 dataNode=\"mycat_test\" 否则不生效--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">schema</span> <span class=\"attr\">name</span>=<span class=\"string\">\"TESTDB\"</span> <span class=\"attr\">checkSQLschema</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">sqlMaxLimit</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">dataNode</span>=<span class=\"string\">\"mycat_test\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、启动测试\"><a href=\"#4、启动测试\" class=\"headerlink\" title=\"4、启动测试\"></a>4、启动测试</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mycat/bin/mycat start</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看是否启动</span></span><br><span class=\"line\">ps -ef | grep mycat</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">登录mycat管理端口(一定要是管理端口！否则mycat命令无法使用)</span></span><br><span class=\"line\">mysql -uroot -p123456 -P9066 -h127.0.0.1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-------------------mycat常用命令-------------------</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看数据源的状态</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show @@datasource;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看心跳状态</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show @@heartbeat;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">用于更新 schema.xml 配置文件,免得重启服务</span></span><br><span class=\"line\">reload @@config;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-----------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改日志级别</span></span><br><span class=\"line\">vim mycat/conf/log4j2.xml </span><br><span class=\"line\">&lt;asyncRoot level=\"info\" includeLocation=\"true\"&gt; 修改为“debug”查看实时日志</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看实时日志</span></span><br><span class=\"line\">tail -f mycat/logs/wrapper.log</span><br></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot-整合Mybatis","date":"2018-12-04T01:22:09.000Z","_content":"\n\n\n\n\n\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>1.3.1</version>\n\t\t</dependency>\n```\n\n步骤：\n\n​\t1）、配置数据源相关属性（见上一节Druid）\n\n​\t2）、给数据库建表\n\n​\t3）、创建JavaBean\n\n### \t4）、注解版\n\n```java\n//指定这是一个操作数据库的mapper\n@Mapper\npublic interface DepartmentMapper {\n\n    @Select(\"select * from department where id=#{id}\")\n    public Department getDeptById(Integer id);\n\n    @Delete(\"delete from department where id=#{id}\")\n    public int deleteDeptById(Integer id);\n\n    @Options(useGeneratedKeys = true,keyProperty = \"id\")\n    @Insert(\"insert into department(departmentName) values(#{departmentName})\")\n    public int insertDept(Department department);\n\n    @Update(\"update department set departmentName=#{departmentName} where id=#{id}\")\n    public int updateDept(Department department);\n}\n```\n\n问题：\n\n自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；\n\n```java\n@org.springframework.context.annotation.Configuration\npublic class MyBatisConfig {\n\n    @Bean\n    public ConfigurationCustomizer configurationCustomizer(){\n        return new ConfigurationCustomizer(){\n\n            @Override\n            public void customize(Configuration configuration) {\n                configuration.setMapUnderscoreToCamelCase(true);\n            }\n        };\n    }\n}\n```\n\n\n\n```java\n使用MapperScan批量扫描所有的Mapper接口；\n@MapperScan(value = \"com.atguigu.springboot.mapper\")\n@SpringBootApplication\npublic class SpringBoot06DataMybatisApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringBoot06DataMybatisApplication.class, args);\n\t}\n}\n```\n\n### 5）、配置文件版\n\n```yaml\nmybatis:\n  config-location: classpath:mybatis/mybatis-config.xml 指定全局配置文件的位置\n  mapper-locations: classpath:mybatis/mapper/*.xml  指定sql映射文件的位置\n```\n\n更多使用参照\n\nhttp://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/\n\n\n\n## 4、整合SpringData JPA\n\n### 1）、SpringData简介\n\n### 2）、整合SpringData JPA\n\nJPA:ORM（Object Relational Mapping）；\n\n1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；\n\n```java\n//使用JPA注解配置映射关系\n@Entity //告诉JPA这是一个实体类（和数据表映射的类）\n@Table(name = \"tbl_user\") //@Table来指定和哪个数据表对应;如果省略默认表名就是user；\npublic class User {\n\n    @Id //这是一个主键\n    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增主键\n    private Integer id;\n\n    @Column(name = \"last_name\",length = 50) //这是和数据表对应的一个列\n    private String lastName;\n    @Column //省略默认列名就是属性名\n    private String email;\n```\n\n2）、编写一个Dao接口来操作实体类对应的数据表（Repository）\n\n```java\n//继承JpaRepository来完成对数据库的操作\npublic interface UserRepository extends JpaRepository<User,Integer> {\n}\n\n```\n\n3）、基本的配置JpaProperties\n\n```yaml\nspring:  \n jpa:\n    hibernate:\n#     更新或者创建数据表结构\n      ddl-auto: update\n#    控制台显示SQL\n    show-sql: true\n```\n\n\n\n# ","source":"_posts/SpringBoot-整合Mybatis.md","raw":"---\ntitle: SpringBoot-整合Mybatis\ndate: 2018/12/04 09:22:09\n---\n\n\n\n\n\n\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>1.3.1</version>\n\t\t</dependency>\n```\n\n步骤：\n\n​\t1）、配置数据源相关属性（见上一节Druid）\n\n​\t2）、给数据库建表\n\n​\t3）、创建JavaBean\n\n### \t4）、注解版\n\n```java\n//指定这是一个操作数据库的mapper\n@Mapper\npublic interface DepartmentMapper {\n\n    @Select(\"select * from department where id=#{id}\")\n    public Department getDeptById(Integer id);\n\n    @Delete(\"delete from department where id=#{id}\")\n    public int deleteDeptById(Integer id);\n\n    @Options(useGeneratedKeys = true,keyProperty = \"id\")\n    @Insert(\"insert into department(departmentName) values(#{departmentName})\")\n    public int insertDept(Department department);\n\n    @Update(\"update department set departmentName=#{departmentName} where id=#{id}\")\n    public int updateDept(Department department);\n}\n```\n\n问题：\n\n自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；\n\n```java\n@org.springframework.context.annotation.Configuration\npublic class MyBatisConfig {\n\n    @Bean\n    public ConfigurationCustomizer configurationCustomizer(){\n        return new ConfigurationCustomizer(){\n\n            @Override\n            public void customize(Configuration configuration) {\n                configuration.setMapUnderscoreToCamelCase(true);\n            }\n        };\n    }\n}\n```\n\n\n\n```java\n使用MapperScan批量扫描所有的Mapper接口；\n@MapperScan(value = \"com.atguigu.springboot.mapper\")\n@SpringBootApplication\npublic class SpringBoot06DataMybatisApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringBoot06DataMybatisApplication.class, args);\n\t}\n}\n```\n\n### 5）、配置文件版\n\n```yaml\nmybatis:\n  config-location: classpath:mybatis/mybatis-config.xml 指定全局配置文件的位置\n  mapper-locations: classpath:mybatis/mapper/*.xml  指定sql映射文件的位置\n```\n\n更多使用参照\n\nhttp://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/\n\n\n\n## 4、整合SpringData JPA\n\n### 1）、SpringData简介\n\n### 2）、整合SpringData JPA\n\nJPA:ORM（Object Relational Mapping）；\n\n1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；\n\n```java\n//使用JPA注解配置映射关系\n@Entity //告诉JPA这是一个实体类（和数据表映射的类）\n@Table(name = \"tbl_user\") //@Table来指定和哪个数据表对应;如果省略默认表名就是user；\npublic class User {\n\n    @Id //这是一个主键\n    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增主键\n    private Integer id;\n\n    @Column(name = \"last_name\",length = 50) //这是和数据表对应的一个列\n    private String lastName;\n    @Column //省略默认列名就是属性名\n    private String email;\n```\n\n2）、编写一个Dao接口来操作实体类对应的数据表（Repository）\n\n```java\n//继承JpaRepository来完成对数据库的操作\npublic interface UserRepository extends JpaRepository<User,Integer> {\n}\n\n```\n\n3）、基本的配置JpaProperties\n\n```yaml\nspring:  \n jpa:\n    hibernate:\n#     更新或者创建数据表结构\n      ddl-auto: update\n#    控制台显示SQL\n    show-sql: true\n```\n\n\n\n# ","slug":"SpringBoot-整合Mybatis","published":1,"updated":"2020-05-30T15:29:30.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hq30007sx01hz36fwzt","content":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>步骤：</p>\n<p>​    1）、配置数据源相关属性（见上一节Druid）</p>\n<p>​    2）、给数据库建表</p>\n<p>​    3）、创建JavaBean</p>\n<h3 id=\"4）、注解版\"><a href=\"#4）、注解版\" class=\"headerlink\" title=\"4）、注解版\"></a>4）、注解版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//指定这是一个操作数据库的mapper</span></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DepartmentMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"select * from department where id=#&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Department <span class=\"title\">getDeptById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Delete</span>(<span class=\"string\">\"delete from department where id=#&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">deleteDeptById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Options</span>(useGeneratedKeys = <span class=\"keyword\">true</span>,keyProperty = <span class=\"string\">\"id\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Insert</span>(<span class=\"string\">\"insert into department(departmentName) values(#&#123;departmentName&#125;)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">insertDept</span><span class=\"params\">(Department department)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Update</span>(<span class=\"string\">\"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateDept</span><span class=\"params\">(Department department)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题：</p>\n<p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@org</span>.springframework.context.annotation.Configuration</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConfigurationCustomizer <span class=\"title\">configurationCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConfigurationCustomizer()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(Configuration configuration)</span> </span>&#123;</span><br><span class=\"line\">                configuration.setMapUnderscoreToCamelCase(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用MapperScan批量扫描所有的Mapper接口；</span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(value = <span class=\"string\">\"com.atguigu.springboot.mapper\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot06DataMybatisApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSpringApplication.run(SpringBoot06DataMybatisApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5）、配置文件版\"><a href=\"#5）、配置文件版\" class=\"headerlink\" title=\"5）、配置文件版\"></a>5）、配置文件版</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">config-location:</span> <span class=\"string\">classpath:mybatis/mybatis-config.xml</span> <span class=\"string\">指定全局配置文件的位置</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/mapper/*.xml</span>  <span class=\"string\">指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure>\n\n<p>更多使用参照</p>\n<p><a href=\"http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/\" target=\"_blank\" rel=\"noopener\">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>\n<h2 id=\"4、整合SpringData-JPA\"><a href=\"#4、整合SpringData-JPA\" class=\"headerlink\" title=\"4、整合SpringData JPA\"></a>4、整合SpringData JPA</h2><h3 id=\"1）、SpringData简介\"><a href=\"#1）、SpringData简介\" class=\"headerlink\" title=\"1）、SpringData简介\"></a>1）、SpringData简介</h3><h3 id=\"2）、整合SpringData-JPA\"><a href=\"#2）、整合SpringData-JPA\" class=\"headerlink\" title=\"2）、整合SpringData JPA\"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p>\n<p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用JPA注解配置映射关系</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span> <span class=\"comment\">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"tbl_user\"</span>) <span class=\"comment\">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span> <span class=\"comment\">//这是一个主键</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class=\"comment\">//自增主键</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"last_name\"</span>,length = <span class=\"number\">50</span>) <span class=\"comment\">//这是和数据表对应的一个列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span> <span class=\"comment\">//省略默认列名就是属性名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br></pre></td></tr></table></figure>\n\n<p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承JpaRepository来完成对数据库的操作</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3）、基本的配置JpaProperties</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span>  </span><br><span class=\"line\"> <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\"><span class=\"comment\">#     更新或者创建数据表结构</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\"><span class=\"comment\">#    控制台显示SQL</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>步骤：</p>\n<p>​    1）、配置数据源相关属性（见上一节Druid）</p>\n<p>​    2）、给数据库建表</p>\n<p>​    3）、创建JavaBean</p>\n<h3 id=\"4）、注解版\"><a href=\"#4）、注解版\" class=\"headerlink\" title=\"4）、注解版\"></a>4）、注解版</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//指定这是一个操作数据库的mapper</span></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DepartmentMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"select * from department where id=#&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Department <span class=\"title\">getDeptById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Delete</span>(<span class=\"string\">\"delete from department where id=#&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">deleteDeptById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Options</span>(useGeneratedKeys = <span class=\"keyword\">true</span>,keyProperty = <span class=\"string\">\"id\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Insert</span>(<span class=\"string\">\"insert into department(departmentName) values(#&#123;departmentName&#125;)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">insertDept</span><span class=\"params\">(Department department)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Update</span>(<span class=\"string\">\"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateDept</span><span class=\"params\">(Department department)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题：</p>\n<p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@org</span>.springframework.context.annotation.Configuration</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConfigurationCustomizer <span class=\"title\">configurationCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConfigurationCustomizer()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(Configuration configuration)</span> </span>&#123;</span><br><span class=\"line\">                configuration.setMapUnderscoreToCamelCase(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用MapperScan批量扫描所有的Mapper接口；</span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(value = <span class=\"string\">\"com.atguigu.springboot.mapper\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBoot06DataMybatisApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSpringApplication.run(SpringBoot06DataMybatisApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5）、配置文件版\"><a href=\"#5）、配置文件版\" class=\"headerlink\" title=\"5）、配置文件版\"></a>5）、配置文件版</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">config-location:</span> <span class=\"string\">classpath:mybatis/mybatis-config.xml</span> <span class=\"string\">指定全局配置文件的位置</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/mapper/*.xml</span>  <span class=\"string\">指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure>\n\n<p>更多使用参照</p>\n<p><a href=\"http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/\" target=\"_blank\" rel=\"noopener\">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>\n<h2 id=\"4、整合SpringData-JPA\"><a href=\"#4、整合SpringData-JPA\" class=\"headerlink\" title=\"4、整合SpringData JPA\"></a>4、整合SpringData JPA</h2><h3 id=\"1）、SpringData简介\"><a href=\"#1）、SpringData简介\" class=\"headerlink\" title=\"1）、SpringData简介\"></a>1）、SpringData简介</h3><h3 id=\"2）、整合SpringData-JPA\"><a href=\"#2）、整合SpringData-JPA\" class=\"headerlink\" title=\"2）、整合SpringData JPA\"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p>\n<p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用JPA注解配置映射关系</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span> <span class=\"comment\">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"tbl_user\"</span>) <span class=\"comment\">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span> <span class=\"comment\">//这是一个主键</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class=\"comment\">//自增主键</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"last_name\"</span>,length = <span class=\"number\">50</span>) <span class=\"comment\">//这是和数据表对应的一个列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span> <span class=\"comment\">//省略默认列名就是属性名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br></pre></td></tr></table></figure>\n\n<p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承JpaRepository来完成对数据库的操作</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3）、基本的配置JpaProperties</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span>  </span><br><span class=\"line\"> <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\"><span class=\"comment\">#     更新或者创建数据表结构</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\"><span class=\"comment\">#    控制台显示SQL</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"StringBoot-Profile","date":"2018-04-17T04:16:11.000Z","_content":"### 1、多Profile文件\n\n我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml\n\n默认使用application.properties的配置；\n\n\n\n### 2、yml支持多文档块方式\n\n```yml\nserver:\n  port: 8081\nspring:\n  profiles:\n    active: prod\n\n---\nserver:\n  port: 8083\nspring:\n  profiles: dev\n\n\n---\n\nserver:\n  port: 8084\nspring:\n  profiles: prod  #指定属于哪个环境\n```\n\n\n\n\n\n### 3、激活指定profile\n\n​\t1、在配置文件中指定  spring.profiles.active=dev\n\n​\t2、命令行：\n\n​\t\tjava -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；\n\n​\t\t可以直接在测试的时候，配置传入命令行参数\n\n​\t3、虚拟机参数；\n\n​\t\t-Dspring.profiles.active=dev\n\n\n\n## 6、配置文件加载位置\n\nspringboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件\n\n–file:./config/\n\n–file:./\n\n–classpath:/config/\n\n–classpath:/\n\n优先级由高到底，高优先级的配置会覆盖低优先级的配置；\n\nSpringBoot会从这四个位置全部加载主配置文件；**互补配置**；\n\n\n\n==我们还可以通过spring.config.location来改变默认的配置文件位置==\n\n**项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；**\n\njava -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties\n\n## 7、外部配置加载顺序\n\n**==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==**\n\n**1.命令行参数**\n\n所有的配置都可以在命令行上进行指定\n\njava -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087  --server.context-path=/abc\n\n多个配置用空格分开； --配置项=值\n\n\n\n2.来自java:comp/env的JNDI属性\n\n3.Java系统属性（System.getProperties()）\n\n4.操作系统环境变量\n\n5.RandomValuePropertySource配置的random.*属性值\n\n\n\n==**由jar包外向jar包内进行寻找；**==\n\n==**优先加载带profile**==\n\n**6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件**\n\n**7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件**\n\n\n\n==**再来加载不带profile**==\n\n**8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件**\n\n**9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件**\n\n\n\n10.@Configuration注解类上的@PropertySource\n\n11.通过SpringApplication.setDefaultProperties指定的默认属性\n\n所有支持的配置加载来源；\n\n[参考官方文档](https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config)\n\n## 8、自动配置原理\n\n配置文件到底能写什么？怎么写？自动配置原理；\n\n[配置文件能配置的属性参照](https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties)\n\n\n\n### 1、**自动配置原理：**\n\n1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==\n\n**2）、@EnableAutoConfiguration 作用：**\n\n - 利用EnableAutoConfigurationImportSelector给容器中导入一些组件？\n\n- 可以查看selectImports()方法的内容；\n\n- List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置\n\n  - ```java\n    SpringFactoriesLoader.loadFactoryNames()\n    扫描所有jar包类路径下  META-INF/spring.factories\n    把扫描到的这些文件的内容包装成properties对象\n    从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中\n    \n    ```\n\n    \n\n**==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==**\n\n```properties\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration\n```\n\n每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；\n\n3）、每一个自动配置类进行自动配置功能；\n\n4）、以**HttpEncodingAutoConfiguration（Http编码自动配置）**为例解释自动配置原理；\n\n```java\n@Configuration   //表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件\n@EnableConfigurationProperties(HttpEncodingProperties.class)  //启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中\n\n@ConditionalOnWebApplication //Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效\n\n@ConditionalOnClass(CharacterEncodingFilter.class)  //判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；\n\n@ConditionalOnProperty(prefix = \"spring.http.encoding\", value = \"enabled\", matchIfMissing = true)  //判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的\n//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；\npublic class HttpEncodingAutoConfiguration {\n  \n  \t//他已经和SpringBoot的配置文件映射了\n  \tprivate final HttpEncodingProperties properties;\n  \n   //只有一个有参构造器的情况下，参数的值就会从容器中拿\n  \tpublic HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {\n\t\tthis.properties = properties;\n\t}\n  \n    @Bean   //给容器中添加一个组件，这个组件的某些值需要从properties中获取\n\t@ConditionalOnMissingBean(CharacterEncodingFilter.class) //判断容器没有这个组件？\n\tpublic CharacterEncodingFilter characterEncodingFilter() {\n\t\tCharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n\t\tfilter.setEncoding(this.properties.getCharset().name());\n\t\tfilter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));\n\t\tfilter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));\n\t\treturn filter;\n\t}\n```\n\n根据当前不同的条件判断，决定这个配置类是否生效？\n\n一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；\n\n\n\n\n\n\n\n5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类\n\n```java\n@ConfigurationProperties(prefix = \"spring.http.encoding\")  //从配置文件中获取指定的值和bean的属性进行绑定\npublic class HttpEncodingProperties {\n\n   public static final Charset DEFAULT_CHARSET = Charset.forName(\"UTF-8\");\n```\n\n\n\n\n\n**精髓：**\n\n​\t**1）、SpringBoot启动会加载大量的自动配置类**\n\n​\t**2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；**\n\n​\t**3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）**\n\n​\t**4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；**\n\n\n\nxxxxAutoConfigurartion：自动配置类；\n\n给容器中添加组件\n\nxxxxProperties:封装配置文件中相关属性；\n\n\n\n### 2、细节\n\n\n\n#### 1、@Conditional派生注解（Spring注解版原生的@Conditional作用）\n\n作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；\n\n| @Conditional扩展注解            | 作用（判断是否满足当前指定条件）                 |\n| ------------------------------- | ------------------------------------------------ |\n| @ConditionalOnJava              | 系统的java版本是否符合要求                       |\n| @ConditionalOnBean              | 容器中存在指定Bean；                             |\n| @ConditionalOnMissingBean       | 容器中不存在指定Bean；                           |\n| @ConditionalOnExpression        | 满足SpEL表达式指定                               |\n| @ConditionalOnClass             | 系统中有指定的类                                 |\n| @ConditionalOnMissingClass      | 系统中没有指定的类                               |\n| @ConditionalOnSingleCandidate   | 容器中只有一个指定的Bean，或者这个Bean是首选Bean |\n| @ConditionalOnProperty          | 系统中指定的属性是否有指定的值                   |\n| @ConditionalOnResource          | 类路径下是否存在指定资源文件                     |\n| @ConditionalOnWebApplication    | 当前是web环境                                    |\n| @ConditionalOnNotWebApplication | 当前不是web环境                                  |\n| @ConditionalOnJndi              | JNDI存在指定项                                   |\n\n**自动配置类必须在一定的条件下才能生效；**\n\n我们怎么知道哪些自动配置类生效；\n\n**==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==**，这样我们就可以很方便的知道哪些自动配置类生效；\n\n```java\n=========================\nAUTO-CONFIGURATION REPORT\n=========================\n\n\nPositive matches:（自动配置类启用的）\n-----------------\n\n   DispatcherServletAutoConfiguration matched:\n      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)\n      - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition)\n        \n    \nNegative matches:（没有启动，没有匹配成功的自动配置类）\n-----------------\n\n   ActiveMQAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition)\n\n   AopAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' (OnClassCondition)\n        \n```\n\n\n\n","source":"_posts/StringBoot-Profile.md","raw":"---\n\ntitle: StringBoot-Profile\n\ndate: 2018/04/17 12:16:11\n\n---\n### 1、多Profile文件\n\n我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml\n\n默认使用application.properties的配置；\n\n\n\n### 2、yml支持多文档块方式\n\n```yml\nserver:\n  port: 8081\nspring:\n  profiles:\n    active: prod\n\n---\nserver:\n  port: 8083\nspring:\n  profiles: dev\n\n\n---\n\nserver:\n  port: 8084\nspring:\n  profiles: prod  #指定属于哪个环境\n```\n\n\n\n\n\n### 3、激活指定profile\n\n​\t1、在配置文件中指定  spring.profiles.active=dev\n\n​\t2、命令行：\n\n​\t\tjava -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；\n\n​\t\t可以直接在测试的时候，配置传入命令行参数\n\n​\t3、虚拟机参数；\n\n​\t\t-Dspring.profiles.active=dev\n\n\n\n## 6、配置文件加载位置\n\nspringboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件\n\n–file:./config/\n\n–file:./\n\n–classpath:/config/\n\n–classpath:/\n\n优先级由高到底，高优先级的配置会覆盖低优先级的配置；\n\nSpringBoot会从这四个位置全部加载主配置文件；**互补配置**；\n\n\n\n==我们还可以通过spring.config.location来改变默认的配置文件位置==\n\n**项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；**\n\njava -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties\n\n## 7、外部配置加载顺序\n\n**==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==**\n\n**1.命令行参数**\n\n所有的配置都可以在命令行上进行指定\n\njava -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087  --server.context-path=/abc\n\n多个配置用空格分开； --配置项=值\n\n\n\n2.来自java:comp/env的JNDI属性\n\n3.Java系统属性（System.getProperties()）\n\n4.操作系统环境变量\n\n5.RandomValuePropertySource配置的random.*属性值\n\n\n\n==**由jar包外向jar包内进行寻找；**==\n\n==**优先加载带profile**==\n\n**6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件**\n\n**7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件**\n\n\n\n==**再来加载不带profile**==\n\n**8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件**\n\n**9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件**\n\n\n\n10.@Configuration注解类上的@PropertySource\n\n11.通过SpringApplication.setDefaultProperties指定的默认属性\n\n所有支持的配置加载来源；\n\n[参考官方文档](https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config)\n\n## 8、自动配置原理\n\n配置文件到底能写什么？怎么写？自动配置原理；\n\n[配置文件能配置的属性参照](https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties)\n\n\n\n### 1、**自动配置原理：**\n\n1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==\n\n**2）、@EnableAutoConfiguration 作用：**\n\n - 利用EnableAutoConfigurationImportSelector给容器中导入一些组件？\n\n- 可以查看selectImports()方法的内容；\n\n- List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置\n\n  - ```java\n    SpringFactoriesLoader.loadFactoryNames()\n    扫描所有jar包类路径下  META-INF/spring.factories\n    把扫描到的这些文件的内容包装成properties对象\n    从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中\n    \n    ```\n\n    \n\n**==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==**\n\n```properties\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration\n```\n\n每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；\n\n3）、每一个自动配置类进行自动配置功能；\n\n4）、以**HttpEncodingAutoConfiguration（Http编码自动配置）**为例解释自动配置原理；\n\n```java\n@Configuration   //表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件\n@EnableConfigurationProperties(HttpEncodingProperties.class)  //启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中\n\n@ConditionalOnWebApplication //Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效\n\n@ConditionalOnClass(CharacterEncodingFilter.class)  //判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；\n\n@ConditionalOnProperty(prefix = \"spring.http.encoding\", value = \"enabled\", matchIfMissing = true)  //判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的\n//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；\npublic class HttpEncodingAutoConfiguration {\n  \n  \t//他已经和SpringBoot的配置文件映射了\n  \tprivate final HttpEncodingProperties properties;\n  \n   //只有一个有参构造器的情况下，参数的值就会从容器中拿\n  \tpublic HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {\n\t\tthis.properties = properties;\n\t}\n  \n    @Bean   //给容器中添加一个组件，这个组件的某些值需要从properties中获取\n\t@ConditionalOnMissingBean(CharacterEncodingFilter.class) //判断容器没有这个组件？\n\tpublic CharacterEncodingFilter characterEncodingFilter() {\n\t\tCharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n\t\tfilter.setEncoding(this.properties.getCharset().name());\n\t\tfilter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));\n\t\tfilter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));\n\t\treturn filter;\n\t}\n```\n\n根据当前不同的条件判断，决定这个配置类是否生效？\n\n一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；\n\n\n\n\n\n\n\n5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类\n\n```java\n@ConfigurationProperties(prefix = \"spring.http.encoding\")  //从配置文件中获取指定的值和bean的属性进行绑定\npublic class HttpEncodingProperties {\n\n   public static final Charset DEFAULT_CHARSET = Charset.forName(\"UTF-8\");\n```\n\n\n\n\n\n**精髓：**\n\n​\t**1）、SpringBoot启动会加载大量的自动配置类**\n\n​\t**2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；**\n\n​\t**3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）**\n\n​\t**4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；**\n\n\n\nxxxxAutoConfigurartion：自动配置类；\n\n给容器中添加组件\n\nxxxxProperties:封装配置文件中相关属性；\n\n\n\n### 2、细节\n\n\n\n#### 1、@Conditional派生注解（Spring注解版原生的@Conditional作用）\n\n作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；\n\n| @Conditional扩展注解            | 作用（判断是否满足当前指定条件）                 |\n| ------------------------------- | ------------------------------------------------ |\n| @ConditionalOnJava              | 系统的java版本是否符合要求                       |\n| @ConditionalOnBean              | 容器中存在指定Bean；                             |\n| @ConditionalOnMissingBean       | 容器中不存在指定Bean；                           |\n| @ConditionalOnExpression        | 满足SpEL表达式指定                               |\n| @ConditionalOnClass             | 系统中有指定的类                                 |\n| @ConditionalOnMissingClass      | 系统中没有指定的类                               |\n| @ConditionalOnSingleCandidate   | 容器中只有一个指定的Bean，或者这个Bean是首选Bean |\n| @ConditionalOnProperty          | 系统中指定的属性是否有指定的值                   |\n| @ConditionalOnResource          | 类路径下是否存在指定资源文件                     |\n| @ConditionalOnWebApplication    | 当前是web环境                                    |\n| @ConditionalOnNotWebApplication | 当前不是web环境                                  |\n| @ConditionalOnJndi              | JNDI存在指定项                                   |\n\n**自动配置类必须在一定的条件下才能生效；**\n\n我们怎么知道哪些自动配置类生效；\n\n**==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==**，这样我们就可以很方便的知道哪些自动配置类生效；\n\n```java\n=========================\nAUTO-CONFIGURATION REPORT\n=========================\n\n\nPositive matches:（自动配置类启用的）\n-----------------\n\n   DispatcherServletAutoConfiguration matched:\n      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)\n      - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition)\n        \n    \nNegative matches:（没有启动，没有匹配成功的自动配置类）\n-----------------\n\n   ActiveMQAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition)\n\n   AopAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' (OnClassCondition)\n        \n```\n\n\n\n","slug":"StringBoot-Profile","published":1,"updated":"2020-05-30T15:26:03.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hqk0008sx01eiwmggf6","content":"<h3 id=\"1、多Profile文件\"><a href=\"#1、多Profile文件\" class=\"headerlink\" title=\"1、多Profile文件\"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p>\n<p>默认使用application.properties的配置；</p>\n<h3 id=\"2、yml支持多文档块方式\"><a href=\"#2、yml支持多文档块方式\" class=\"headerlink\" title=\"2、yml支持多文档块方式\"></a>2、yml支持多文档块方式</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">prod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8083</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8084</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">prod</span>  <span class=\"comment\">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"3、激活指定profile\"><a href=\"#3、激活指定profile\" class=\"headerlink\" title=\"3、激活指定profile\"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p>\n<p>​    2、命令行：</p>\n<p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p>\n<p>​        可以直接在测试的时候，配置传入命令行参数</p>\n<p>​    3、虚拟机参数；</p>\n<p>​        -Dspring.profiles.active=dev</p>\n<h2 id=\"6、配置文件加载位置\"><a href=\"#6、配置文件加载位置\" class=\"headerlink\" title=\"6、配置文件加载位置\"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>\n<p>–file:./config/</p>\n<p>–file:./</p>\n<p>–classpath:/config/</p>\n<p>–classpath:/</p>\n<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>\n<p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p>\n<p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p>\n<p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p>\n<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p>\n<h2 id=\"7、外部配置加载顺序\"><a href=\"#7、外部配置加载顺序\" class=\"headerlink\" title=\"7、外部配置加载顺序\"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p>\n<p><strong>1.命令行参数</strong></p>\n<p>所有的配置都可以在命令行上进行指定</p>\n<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p>\n<p>多个配置用空格分开； –配置项=值</p>\n<p>2.来自java:comp/env的JNDI属性</p>\n<p>3.Java系统属性（System.getProperties()）</p>\n<p>4.操作系统环境变量</p>\n<p>5.RandomValuePropertySource配置的random.*属性值</p>\n<p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p>\n<p>==<strong>优先加载带profile</strong>==</p>\n<p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>\n<p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>\n<p>==<strong>再来加载不带profile</strong>==</p>\n<p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>\n<p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>\n<p>10.@Configuration注解类上的@PropertySource</p>\n<p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p>\n<p>所有支持的配置加载来源；</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config\" target=\"_blank\" rel=\"noopener\">参考官方文档</a></p>\n<h2 id=\"8、自动配置原理\"><a href=\"#8、自动配置原理\" class=\"headerlink\" title=\"8、自动配置原理\"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties\" target=\"_blank\" rel=\"noopener\">配置文件能配置的属性参照</a></p>\n<h3 id=\"1、自动配置原理：\"><a href=\"#1、自动配置原理：\" class=\"headerlink\" title=\"1、自动配置原理：\"></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p>\n<p><strong>2）、@EnableAutoConfiguration 作用：</strong></p>\n<ul>\n<li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</li>\n</ul>\n<ul>\n<li><p>可以查看selectImports()方法的内容；</p>\n</li>\n<li><p>List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</p>\n<ul>\n<li><pre><code class=\"java\">SpringFactoriesLoader.loadFactoryNames()\n扫描所有jar包类路径下  META-INF/spring.factories\n把扫描到的这些文件的内容包装成properties对象\n从properties中获取到EnableAutoConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>类（类名）对应的值，然后把他们添加在容器中</span>\n<span class=\"class\"></span>\n<span class=\"class\"><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">**&#x3D;&#x3D;将 类路径下  META-INF&#x2F;spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；&#x3D;&#x3D;**</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;properties</span><br><span class=\"line\"># Auto Configure</span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure></span>\n<span class=\"class\"></span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p>\n<p>3）、每一个自动配置类进行自动配置功能；</p>\n<p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span>   <span class=\"comment\">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(HttpEncodingProperties<span class=\"class\">.<span class=\"keyword\">class</span>)  //启动指定类的<span class=\"title\">ConfigurationProperties</span>功能；将配置文件中对应的值和<span class=\"title\">HttpEncodingProperties</span>绑定起来；并把<span class=\"title\">HttpEncodingProperties</span>加入到<span class=\"title\">ioc</span>容器中</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ConditionalOnWebApplication</span> //<span class=\"title\">Spring</span>底层@<span class=\"title\">Conditional</span>注解（<span class=\"title\">Spring</span>注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是<span class=\"title\">web</span>应用，如果是，当前配置类生效</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ConditionalOnClass</span>(<span class=\"title\">CharacterEncodingFilter</span>.<span class=\"title\">class</span>)  //判断当前项目有没有这个类<span class=\"title\">CharacterEncodingFilter</span>；<span class=\"title\">SpringMVC</span>中进行乱码解决的过滤器；</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ConditionalOnProperty</span>(<span class=\"title\">prefix</span> </span>= <span class=\"string\">\"spring.http.encoding\"</span>, value = <span class=\"string\">\"enabled\"</span>, matchIfMissing = <span class=\"keyword\">true</span>)  <span class=\"comment\">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class=\"line\"><span class=\"comment\">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  \t<span class=\"comment\">//他已经和SpringBoot的配置文件映射了</span></span><br><span class=\"line\">  \t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HttpEncodingProperties properties;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpEncodingAutoConfiguration</span><span class=\"params\">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.properties = properties;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>   <span class=\"comment\">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean</span>(CharacterEncodingFilter<span class=\"class\">.<span class=\"keyword\">class</span>) //判断容器没有这个组件？</span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"title\">public</span> <span class=\"title\">CharacterEncodingFilter</span> <span class=\"title\">characterEncodingFilter</span>() </span>&#123;</span><br><span class=\"line\">\t\tCharacterEncodingFilter filter = <span class=\"keyword\">new</span> OrderedCharacterEncodingFilter();</span><br><span class=\"line\">\t\tfilter.setEncoding(<span class=\"keyword\">this</span>.properties.getCharset().name());</span><br><span class=\"line\">\t\tfilter.setForceRequestEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class=\"line\">\t\tfilter.setForceResponseEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> filter;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据当前不同的条件判断，决定这个配置类是否生效？</p>\n<p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p>\n<p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.http.encoding\"</span>)  <span class=\"comment\">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class=\"string\">\"UTF-8\"</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>精髓：</strong></p>\n<p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p>\n<p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p>\n<p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p>\n<p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p>\n<p>xxxxAutoConfigurartion：自动配置类；</p>\n<p>给容器中添加组件</p>\n<p>xxxxProperties:封装配置文件中相关属性；</p>\n<h3 id=\"2、细节\"><a href=\"#2、细节\" class=\"headerlink\" title=\"2、细节\"></a>2、细节</h3><h4 id=\"1、-Conditional派生注解（Spring注解版原生的-Conditional作用）\"><a href=\"#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）\" class=\"headerlink\" title=\"1、@Conditional派生注解（Spring注解版原生的@Conditional作用）\"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>\n<table>\n<thead>\n<tr>\n<th>@Conditional扩展注解</th>\n<th>作用（判断是否满足当前指定条件）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@ConditionalOnJava</td>\n<td>系统的java版本是否符合要求</td>\n</tr>\n<tr>\n<td>@ConditionalOnBean</td>\n<td>容器中存在指定Bean；</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissingBean</td>\n<td>容器中不存在指定Bean；</td>\n</tr>\n<tr>\n<td>@ConditionalOnExpression</td>\n<td>满足SpEL表达式指定</td>\n</tr>\n<tr>\n<td>@ConditionalOnClass</td>\n<td>系统中有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissingClass</td>\n<td>系统中没有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnSingleCandidate</td>\n<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnProperty</td>\n<td>系统中指定的属性是否有指定的值</td>\n</tr>\n<tr>\n<td>@ConditionalOnResource</td>\n<td>类路径下是否存在指定资源文件</td>\n</tr>\n<tr>\n<td>@ConditionalOnWebApplication</td>\n<td>当前是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnNotWebApplication</td>\n<td>当前不是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnJndi</td>\n<td>JNDI存在指定项</td>\n</tr>\n</tbody></table>\n<p><strong>自动配置类必须在一定的条件下才能生效；</strong></p>\n<p>我们怎么知道哪些自动配置类生效；</p>\n<p><strong>==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==</strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=========================</span><br><span class=\"line\">AUTO-CONFIGURATION REPORT</span><br><span class=\"line\">=========================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Positive matches:（自动配置类启用的）</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">   DispatcherServletAutoConfiguration matched:</span><br><span class=\"line\">      - <span class=\"meta\">@ConditionalOnClass</span> found required <span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">org</span>.<span class=\"title\">springframework</span>.<span class=\"title\">web</span>.<span class=\"title\">servlet</span>.<span class=\"title\">DispatcherServlet</span>'</span>; <span class=\"meta\">@ConditionalOnMissingClass</span> <span class=\"function\">did not find unwanted <span class=\"title\">class</span> <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">      - @<span class=\"title\">ConditionalOnWebApplication</span> <span class=\"params\">(required)</span> found <span class=\"title\">StandardServletEnvironment</span> <span class=\"params\">(OnWebApplicationCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class=\"line\"><span class=\"function\">-----------------</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">   ActiveMQAutoConfiguration:</span></span><br><span class=\"line\"><span class=\"function\">      Did not match:</span></span><br><span class=\"line\"><span class=\"function\">         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">   AopAutoConfiguration:</span></span><br><span class=\"line\"><span class=\"function\">      Did not match:</span></span><br><span class=\"line\"><span class=\"function\">         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' <span class=\"params\">(OnClassCondition)</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h3 id=\"1、多Profile文件\"><a href=\"#1、多Profile文件\" class=\"headerlink\" title=\"1、多Profile文件\"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p>\n<p>默认使用application.properties的配置；</p>\n<h3 id=\"2、yml支持多文档块方式\"><a href=\"#2、yml支持多文档块方式\" class=\"headerlink\" title=\"2、yml支持多文档块方式\"></a>2、yml支持多文档块方式</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">prod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8083</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8084</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">prod</span>  <span class=\"comment\">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"3、激活指定profile\"><a href=\"#3、激活指定profile\" class=\"headerlink\" title=\"3、激活指定profile\"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p>\n<p>​    2、命令行：</p>\n<p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p>\n<p>​        可以直接在测试的时候，配置传入命令行参数</p>\n<p>​    3、虚拟机参数；</p>\n<p>​        -Dspring.profiles.active=dev</p>\n<h2 id=\"6、配置文件加载位置\"><a href=\"#6、配置文件加载位置\" class=\"headerlink\" title=\"6、配置文件加载位置\"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>\n<p>–file:./config/</p>\n<p>–file:./</p>\n<p>–classpath:/config/</p>\n<p>–classpath:/</p>\n<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>\n<p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p>\n<p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p>\n<p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p>\n<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p>\n<h2 id=\"7、外部配置加载顺序\"><a href=\"#7、外部配置加载顺序\" class=\"headerlink\" title=\"7、外部配置加载顺序\"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p>\n<p><strong>1.命令行参数</strong></p>\n<p>所有的配置都可以在命令行上进行指定</p>\n<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p>\n<p>多个配置用空格分开； –配置项=值</p>\n<p>2.来自java:comp/env的JNDI属性</p>\n<p>3.Java系统属性（System.getProperties()）</p>\n<p>4.操作系统环境变量</p>\n<p>5.RandomValuePropertySource配置的random.*属性值</p>\n<p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p>\n<p>==<strong>优先加载带profile</strong>==</p>\n<p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>\n<p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>\n<p>==<strong>再来加载不带profile</strong>==</p>\n<p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>\n<p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>\n<p>10.@Configuration注解类上的@PropertySource</p>\n<p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p>\n<p>所有支持的配置加载来源；</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config\" target=\"_blank\" rel=\"noopener\">参考官方文档</a></p>\n<h2 id=\"8、自动配置原理\"><a href=\"#8、自动配置原理\" class=\"headerlink\" title=\"8、自动配置原理\"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties\" target=\"_blank\" rel=\"noopener\">配置文件能配置的属性参照</a></p>\n<h3 id=\"1、自动配置原理：\"><a href=\"#1、自动配置原理：\" class=\"headerlink\" title=\"1、自动配置原理：\"></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p>\n<p><strong>2）、@EnableAutoConfiguration 作用：</strong></p>\n<ul>\n<li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</li>\n</ul>\n<ul>\n<li><p>可以查看selectImports()方法的内容；</p>\n</li>\n<li><p>List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</p>\n<ul>\n<li><pre><code class=\"java\">SpringFactoriesLoader.loadFactoryNames()\n扫描所有jar包类路径下  META-INF/spring.factories\n把扫描到的这些文件的内容包装成properties对象\n从properties中获取到EnableAutoConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>类（类名）对应的值，然后把他们添加在容器中</span>\n<span class=\"class\"></span>\n<span class=\"class\"><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">**&#x3D;&#x3D;将 类路径下  META-INF&#x2F;spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；&#x3D;&#x3D;**</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;properties</span><br><span class=\"line\"># Auto Configure</span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure></span>\n<span class=\"class\"></span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p>\n<p>3）、每一个自动配置类进行自动配置功能；</p>\n<p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span>   <span class=\"comment\">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(HttpEncodingProperties<span class=\"class\">.<span class=\"keyword\">class</span>)  //启动指定类的<span class=\"title\">ConfigurationProperties</span>功能；将配置文件中对应的值和<span class=\"title\">HttpEncodingProperties</span>绑定起来；并把<span class=\"title\">HttpEncodingProperties</span>加入到<span class=\"title\">ioc</span>容器中</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ConditionalOnWebApplication</span> //<span class=\"title\">Spring</span>底层@<span class=\"title\">Conditional</span>注解（<span class=\"title\">Spring</span>注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是<span class=\"title\">web</span>应用，如果是，当前配置类生效</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ConditionalOnClass</span>(<span class=\"title\">CharacterEncodingFilter</span>.<span class=\"title\">class</span>)  //判断当前项目有没有这个类<span class=\"title\">CharacterEncodingFilter</span>；<span class=\"title\">SpringMVC</span>中进行乱码解决的过滤器；</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ConditionalOnProperty</span>(<span class=\"title\">prefix</span> </span>= <span class=\"string\">\"spring.http.encoding\"</span>, value = <span class=\"string\">\"enabled\"</span>, matchIfMissing = <span class=\"keyword\">true</span>)  <span class=\"comment\">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class=\"line\"><span class=\"comment\">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  \t<span class=\"comment\">//他已经和SpringBoot的配置文件映射了</span></span><br><span class=\"line\">  \t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HttpEncodingProperties properties;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpEncodingAutoConfiguration</span><span class=\"params\">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.properties = properties;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>   <span class=\"comment\">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean</span>(CharacterEncodingFilter<span class=\"class\">.<span class=\"keyword\">class</span>) //判断容器没有这个组件？</span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"title\">public</span> <span class=\"title\">CharacterEncodingFilter</span> <span class=\"title\">characterEncodingFilter</span>() </span>&#123;</span><br><span class=\"line\">\t\tCharacterEncodingFilter filter = <span class=\"keyword\">new</span> OrderedCharacterEncodingFilter();</span><br><span class=\"line\">\t\tfilter.setEncoding(<span class=\"keyword\">this</span>.properties.getCharset().name());</span><br><span class=\"line\">\t\tfilter.setForceRequestEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class=\"line\">\t\tfilter.setForceResponseEncoding(<span class=\"keyword\">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> filter;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据当前不同的条件判断，决定这个配置类是否生效？</p>\n<p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p>\n<p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.http.encoding\"</span>)  <span class=\"comment\">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class=\"string\">\"UTF-8\"</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>精髓：</strong></p>\n<p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p>\n<p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p>\n<p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p>\n<p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p>\n<p>xxxxAutoConfigurartion：自动配置类；</p>\n<p>给容器中添加组件</p>\n<p>xxxxProperties:封装配置文件中相关属性；</p>\n<h3 id=\"2、细节\"><a href=\"#2、细节\" class=\"headerlink\" title=\"2、细节\"></a>2、细节</h3><h4 id=\"1、-Conditional派生注解（Spring注解版原生的-Conditional作用）\"><a href=\"#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）\" class=\"headerlink\" title=\"1、@Conditional派生注解（Spring注解版原生的@Conditional作用）\"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>\n<table>\n<thead>\n<tr>\n<th>@Conditional扩展注解</th>\n<th>作用（判断是否满足当前指定条件）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@ConditionalOnJava</td>\n<td>系统的java版本是否符合要求</td>\n</tr>\n<tr>\n<td>@ConditionalOnBean</td>\n<td>容器中存在指定Bean；</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissingBean</td>\n<td>容器中不存在指定Bean；</td>\n</tr>\n<tr>\n<td>@ConditionalOnExpression</td>\n<td>满足SpEL表达式指定</td>\n</tr>\n<tr>\n<td>@ConditionalOnClass</td>\n<td>系统中有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissingClass</td>\n<td>系统中没有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnSingleCandidate</td>\n<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnProperty</td>\n<td>系统中指定的属性是否有指定的值</td>\n</tr>\n<tr>\n<td>@ConditionalOnResource</td>\n<td>类路径下是否存在指定资源文件</td>\n</tr>\n<tr>\n<td>@ConditionalOnWebApplication</td>\n<td>当前是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnNotWebApplication</td>\n<td>当前不是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnJndi</td>\n<td>JNDI存在指定项</td>\n</tr>\n</tbody></table>\n<p><strong>自动配置类必须在一定的条件下才能生效；</strong></p>\n<p>我们怎么知道哪些自动配置类生效；</p>\n<p><strong>==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==</strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=========================</span><br><span class=\"line\">AUTO-CONFIGURATION REPORT</span><br><span class=\"line\">=========================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Positive matches:（自动配置类启用的）</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">   DispatcherServletAutoConfiguration matched:</span><br><span class=\"line\">      - <span class=\"meta\">@ConditionalOnClass</span> found required <span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">org</span>.<span class=\"title\">springframework</span>.<span class=\"title\">web</span>.<span class=\"title\">servlet</span>.<span class=\"title\">DispatcherServlet</span>'</span>; <span class=\"meta\">@ConditionalOnMissingClass</span> <span class=\"function\">did not find unwanted <span class=\"title\">class</span> <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">      - @<span class=\"title\">ConditionalOnWebApplication</span> <span class=\"params\">(required)</span> found <span class=\"title\">StandardServletEnvironment</span> <span class=\"params\">(OnWebApplicationCondition)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class=\"line\"><span class=\"function\">-----------------</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">   ActiveMQAutoConfiguration:</span></span><br><span class=\"line\"><span class=\"function\">      Did not match:</span></span><br><span class=\"line\"><span class=\"function\">         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' <span class=\"params\">(OnClassCondition)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">   AopAutoConfiguration:</span></span><br><span class=\"line\"><span class=\"function\">      Did not match:</span></span><br><span class=\"line\"><span class=\"function\">         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' <span class=\"params\">(OnClassCondition)</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"StringBoot-异常处理机制","date":"2018-09-16T03:18:44.000Z","_content":"\n### 1）、SpringBoot默认的错误处理机制\n\n默认效果：\n\n​\t\t1）、浏览器，返回一个默认的错误页面\n\n\n\n  浏览器发送请求的请求头：\n\n\n\n​\t\t2）、如果是其他客户端，默认响应一个json数据\n\n\n\n原理：\n\n​\t可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；\n\n  \t给容器中添加了以下组件\n\n​\t1、DefaultErrorAttributes：\n\n```java\n帮我们在页面共享信息；\n@Override\n\tpublic Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes,\n\t\t\tboolean includeStackTrace) {\n\t\tMap<String, Object> errorAttributes = new LinkedHashMap<String, Object>();\n\t\terrorAttributes.put(\"timestamp\", new Date());\n\t\taddStatus(errorAttributes, requestAttributes);\n\t\taddErrorDetails(errorAttributes, requestAttributes, includeStackTrace);\n\t\taddPath(errorAttributes, requestAttributes);\n\t\treturn errorAttributes;\n\t}\n```\n\n\n\n​\t2、BasicErrorController：处理默认/error请求\n\n```java\n@Controller\n@RequestMapping(\"${server.error.path:${error.path:/error}}\")\npublic class BasicErrorController extends AbstractErrorController {\n    \n    @RequestMapping(produces = \"text/html\")//产生html类型的数据；浏览器发送的请求来到这个方法处理\n\tpublic ModelAndView errorHtml(HttpServletRequest request,\n\t\t\tHttpServletResponse response) {\n\t\tHttpStatus status = getStatus(request);\n\t\tMap<String, Object> model = Collections.unmodifiableMap(getErrorAttributes(\n\t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));\n\t\tresponse.setStatus(status.value());\n        \n        //去哪个页面作为错误页面；包含页面地址和页面内容\n\t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);\n\t\treturn (modelAndView == null ? new ModelAndView(\"error\", model) : modelAndView);\n\t}\n\n\t@RequestMapping\n\t@ResponseBody    //产生json数据，其他客户端来到这个方法处理；\n\tpublic ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {\n\t\tMap<String, Object> body = getErrorAttributes(request,\n\t\t\t\tisIncludeStackTrace(request, MediaType.ALL));\n\t\tHttpStatus status = getStatus(request);\n\t\treturn new ResponseEntity<Map<String, Object>>(body, status);\n\t}\n```\n\n\n\n​\t3、ErrorPageCustomizer：\n\n```java\n\t@Value(\"${error.path:/error}\")\n\tprivate String path = \"/error\";  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）\n```\n\n\n\n​\t4、DefaultErrorViewResolver：\n\n```java\n@Override\n\tpublic ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,\n\t\t\tMap<String, Object> model) {\n\t\tModelAndView modelAndView = resolve(String.valueOf(status), model);\n\t\tif (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\n\t\t\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n\t\t}\n\t\treturn modelAndView;\n\t}\n\n\tprivate ModelAndView resolve(String viewName, Map<String, Object> model) {\n        //默认SpringBoot可以去找到一个页面？  error/404\n\t\tString errorViewName = \"error/\" + viewName;\n        \n        //模板引擎可以解析这个页面地址就用模板引擎解析\n\t\tTemplateAvailabilityProvider provider = this.templateAvailabilityProviders\n\t\t\t\t.getProvider(errorViewName, this.applicationContext);\n\t\tif (provider != null) {\n            //模板引擎可用的情况下返回到errorViewName指定的视图地址\n\t\t\treturn new ModelAndView(errorViewName, model);\n\t\t}\n        //模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html\n\t\treturn resolveResource(errorViewName, model);\n\t}\n```\n\n\n\n​\t步骤：\n\n​\t\t一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被**BasicErrorController**处理；\n\n​\t\t1）响应页面；去哪个页面是由**DefaultErrorViewResolver**解析得到的；\n\n```java\nprotected ModelAndView resolveErrorView(HttpServletRequest request,\n      HttpServletResponse response, HttpStatus status, Map<String, Object> model) {\n    //所有的ErrorViewResolver得到ModelAndView\n   for (ErrorViewResolver resolver : this.errorViewResolvers) {\n      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);\n      if (modelAndView != null) {\n         return modelAndView;\n      }\n   }\n   return null;\n}\n```\n\n### 2）、如果定制错误响应：\n\n#### \t**1）、如何定制错误的页面；**\n\n​\t\t\t**1）、有模板引擎的情况下；error/状态码;** 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；\n\n​\t\t\t我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；\t\t\n\n​\t\t\t页面能获取的信息；\n\n​\t\t\t\ttimestamp：时间戳\n\n​\t\t\t\tstatus：状态码\n\n​\t\t\t\terror：错误提示\n\n​\t\t\t\texception：异常对象\n\n​\t\t\t\tmessage：异常消息\n\n​\t\t\t\terrors：JSR303数据校验的错误都在这里\n\n​\t\t\t2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；\n\n​\t\t\t3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；\n\n\n\n#### \t2）、如何定制错误的json数据；\n\n​\t\t1）、自定义异常处理&返回定制json数据；\n\n```java\n@ControllerAdvice\npublic class MyExceptionHandler {\n\n    @ResponseBody\n    @ExceptionHandler(UserNotExistException.class)\n    public Map<String,Object> handleException(Exception e){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"code\",\"user.notexist\");\n        map.put(\"message\",e.getMessage());\n        return map;\n    }\n}\n//没有自适应效果...\n```\n\n\n\n​\t\t2）、转发到/error进行自适应响应效果处理\n\n```java\n @ExceptionHandler(UserNotExistException.class)\n    public String handleException(Exception e, HttpServletRequest request){\n        Map<String,Object> map = new HashMap<>();\n        //传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程\n        /**\n         * Integer statusCode = (Integer) request\n         .getAttribute(\"javax.servlet.error.status_code\");\n         */\n        request.setAttribute(\"javax.servlet.error.status_code\",500);\n        map.put(\"code\",\"user.notexist\");\n        map.put(\"message\",e.getMessage());\n        //转发到/error\n        return \"forward:/error\";\n    }\n```\n\n#### \t3）、将我们的定制数据携带出去；\n\n出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；\n\n​\t1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；\n\n​\t2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；\n\n​\t\t\t容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；\n\n自定义ErrorAttributes\n\n```java\n//给容器中加入我们自己定义的ErrorAttributes\n@Component\npublic class MyErrorAttributes extends DefaultErrorAttributes {\n\n    @Override\n    public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) {\n        Map<String, Object> map = super.getErrorAttributes(requestAttributes, includeStackTrace);\n        map.put(\"company\",\"atguigu\");\n        return map;\n    }\n}\n```\n\n最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容","source":"_posts/StringBoot-异常处理机制.md","raw":"---\ntitle: StringBoot-异常处理机制\n\ndate: 2018/09/16 11:18:44\n\n\n---\n\n### 1）、SpringBoot默认的错误处理机制\n\n默认效果：\n\n​\t\t1）、浏览器，返回一个默认的错误页面\n\n\n\n  浏览器发送请求的请求头：\n\n\n\n​\t\t2）、如果是其他客户端，默认响应一个json数据\n\n\n\n原理：\n\n​\t可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；\n\n  \t给容器中添加了以下组件\n\n​\t1、DefaultErrorAttributes：\n\n```java\n帮我们在页面共享信息；\n@Override\n\tpublic Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes,\n\t\t\tboolean includeStackTrace) {\n\t\tMap<String, Object> errorAttributes = new LinkedHashMap<String, Object>();\n\t\terrorAttributes.put(\"timestamp\", new Date());\n\t\taddStatus(errorAttributes, requestAttributes);\n\t\taddErrorDetails(errorAttributes, requestAttributes, includeStackTrace);\n\t\taddPath(errorAttributes, requestAttributes);\n\t\treturn errorAttributes;\n\t}\n```\n\n\n\n​\t2、BasicErrorController：处理默认/error请求\n\n```java\n@Controller\n@RequestMapping(\"${server.error.path:${error.path:/error}}\")\npublic class BasicErrorController extends AbstractErrorController {\n    \n    @RequestMapping(produces = \"text/html\")//产生html类型的数据；浏览器发送的请求来到这个方法处理\n\tpublic ModelAndView errorHtml(HttpServletRequest request,\n\t\t\tHttpServletResponse response) {\n\t\tHttpStatus status = getStatus(request);\n\t\tMap<String, Object> model = Collections.unmodifiableMap(getErrorAttributes(\n\t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));\n\t\tresponse.setStatus(status.value());\n        \n        //去哪个页面作为错误页面；包含页面地址和页面内容\n\t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);\n\t\treturn (modelAndView == null ? new ModelAndView(\"error\", model) : modelAndView);\n\t}\n\n\t@RequestMapping\n\t@ResponseBody    //产生json数据，其他客户端来到这个方法处理；\n\tpublic ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {\n\t\tMap<String, Object> body = getErrorAttributes(request,\n\t\t\t\tisIncludeStackTrace(request, MediaType.ALL));\n\t\tHttpStatus status = getStatus(request);\n\t\treturn new ResponseEntity<Map<String, Object>>(body, status);\n\t}\n```\n\n\n\n​\t3、ErrorPageCustomizer：\n\n```java\n\t@Value(\"${error.path:/error}\")\n\tprivate String path = \"/error\";  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）\n```\n\n\n\n​\t4、DefaultErrorViewResolver：\n\n```java\n@Override\n\tpublic ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,\n\t\t\tMap<String, Object> model) {\n\t\tModelAndView modelAndView = resolve(String.valueOf(status), model);\n\t\tif (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\n\t\t\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n\t\t}\n\t\treturn modelAndView;\n\t}\n\n\tprivate ModelAndView resolve(String viewName, Map<String, Object> model) {\n        //默认SpringBoot可以去找到一个页面？  error/404\n\t\tString errorViewName = \"error/\" + viewName;\n        \n        //模板引擎可以解析这个页面地址就用模板引擎解析\n\t\tTemplateAvailabilityProvider provider = this.templateAvailabilityProviders\n\t\t\t\t.getProvider(errorViewName, this.applicationContext);\n\t\tif (provider != null) {\n            //模板引擎可用的情况下返回到errorViewName指定的视图地址\n\t\t\treturn new ModelAndView(errorViewName, model);\n\t\t}\n        //模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html\n\t\treturn resolveResource(errorViewName, model);\n\t}\n```\n\n\n\n​\t步骤：\n\n​\t\t一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被**BasicErrorController**处理；\n\n​\t\t1）响应页面；去哪个页面是由**DefaultErrorViewResolver**解析得到的；\n\n```java\nprotected ModelAndView resolveErrorView(HttpServletRequest request,\n      HttpServletResponse response, HttpStatus status, Map<String, Object> model) {\n    //所有的ErrorViewResolver得到ModelAndView\n   for (ErrorViewResolver resolver : this.errorViewResolvers) {\n      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);\n      if (modelAndView != null) {\n         return modelAndView;\n      }\n   }\n   return null;\n}\n```\n\n### 2）、如果定制错误响应：\n\n#### \t**1）、如何定制错误的页面；**\n\n​\t\t\t**1）、有模板引擎的情况下；error/状态码;** 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；\n\n​\t\t\t我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；\t\t\n\n​\t\t\t页面能获取的信息；\n\n​\t\t\t\ttimestamp：时间戳\n\n​\t\t\t\tstatus：状态码\n\n​\t\t\t\terror：错误提示\n\n​\t\t\t\texception：异常对象\n\n​\t\t\t\tmessage：异常消息\n\n​\t\t\t\terrors：JSR303数据校验的错误都在这里\n\n​\t\t\t2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；\n\n​\t\t\t3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；\n\n\n\n#### \t2）、如何定制错误的json数据；\n\n​\t\t1）、自定义异常处理&返回定制json数据；\n\n```java\n@ControllerAdvice\npublic class MyExceptionHandler {\n\n    @ResponseBody\n    @ExceptionHandler(UserNotExistException.class)\n    public Map<String,Object> handleException(Exception e){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"code\",\"user.notexist\");\n        map.put(\"message\",e.getMessage());\n        return map;\n    }\n}\n//没有自适应效果...\n```\n\n\n\n​\t\t2）、转发到/error进行自适应响应效果处理\n\n```java\n @ExceptionHandler(UserNotExistException.class)\n    public String handleException(Exception e, HttpServletRequest request){\n        Map<String,Object> map = new HashMap<>();\n        //传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程\n        /**\n         * Integer statusCode = (Integer) request\n         .getAttribute(\"javax.servlet.error.status_code\");\n         */\n        request.setAttribute(\"javax.servlet.error.status_code\",500);\n        map.put(\"code\",\"user.notexist\");\n        map.put(\"message\",e.getMessage());\n        //转发到/error\n        return \"forward:/error\";\n    }\n```\n\n#### \t3）、将我们的定制数据携带出去；\n\n出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；\n\n​\t1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；\n\n​\t2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；\n\n​\t\t\t容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；\n\n自定义ErrorAttributes\n\n```java\n//给容器中加入我们自己定义的ErrorAttributes\n@Component\npublic class MyErrorAttributes extends DefaultErrorAttributes {\n\n    @Override\n    public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) {\n        Map<String, Object> map = super.getErrorAttributes(requestAttributes, includeStackTrace);\n        map.put(\"company\",\"atguigu\");\n        return map;\n    }\n}\n```\n\n最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容","slug":"StringBoot-异常处理机制","published":1,"updated":"2020-05-30T15:26:59.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hqn0009sx01f9uacz0b","content":"<h3 id=\"1）、SpringBoot默认的错误处理机制\"><a href=\"#1）、SpringBoot默认的错误处理机制\" class=\"headerlink\" title=\"1）、SpringBoot默认的错误处理机制\"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p>\n<p>​        1）、浏览器，返回一个默认的错误页面</p>\n<p>  浏览器发送请求的请求头：</p>\n<p>​        2）、如果是其他客户端，默认响应一个json数据</p>\n<p>原理：</p>\n<p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p>\n<pre><code>给容器中添加了以下组件</code></pre><p>​    1、DefaultErrorAttributes：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">帮我们在页面共享信息；</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t<span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; errorAttributes = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">\"timestamp\"</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">\t\taddStatus(errorAttributes, requestAttributes);</span><br><span class=\"line\">\t\taddErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class=\"line\">\t\taddPath(errorAttributes, requestAttributes);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    2、BasicErrorController：处理默认/error请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicErrorController</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractErrorController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(produces = <span class=\"string\">\"text/html\"</span>)<span class=\"comment\">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tHttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class=\"line\">\t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class=\"line\">\t\tresponse.setStatus(status.value());</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class=\"line\">\t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (modelAndView == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"error\"</span>, model) : modelAndView);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span>    <span class=\"comment\">//产生json数据，其他客户端来到这个方法处理；</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class=\"line\">\t\t\t\tisIncludeStackTrace(request, MediaType.ALL));</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    3、ErrorPageCustomizer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;error.path:/error&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String path = <span class=\"string\">\"/error\"</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    4、DefaultErrorViewResolver：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tMap&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">\t\tModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (modelAndView == <span class=\"keyword\">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class=\"line\">\t\t\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> ModelAndView <span class=\"title\">resolve</span><span class=\"params\">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//默认SpringBoot可以去找到一个页面？  error/404</span></span><br><span class=\"line\">\t\tString errorViewName = <span class=\"string\">\"error/\"</span> + viewName;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class=\"line\">\t\tTemplateAvailabilityProvider provider = <span class=\"keyword\">this</span>.templateAvailabilityProviders</span><br><span class=\"line\">\t\t\t\t.getProvider(errorViewName, <span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (provider != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(errorViewName, model);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        <span class=\"comment\">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resolveResource(errorViewName, model);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    步骤：</p>\n<p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p>\n<p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (ErrorViewResolver resolver : <span class=\"keyword\">this</span>.errorViewResolvers) &#123;</span><br><span class=\"line\">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (modelAndView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2）、如果定制错误响应：\"><a href=\"#2）、如果定制错误响应：\" class=\"headerlink\" title=\"2）、如果定制错误响应：\"></a>2）、如果定制错误响应：</h3><h4 id=\"1）、如何定制错误的页面；\"><a href=\"#1）、如何定制错误的页面；\" class=\"headerlink\" title=\"1）、如何定制错误的页面；\"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p>\n<p>​            我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p>\n<p>​            页面能获取的信息；</p>\n<p>​                timestamp：时间戳</p>\n<p>​                status：状态码</p>\n<p>​                error：错误提示</p>\n<p>​                exception：异常对象</p>\n<p>​                message：异常消息</p>\n<p>​                errors：JSR303数据校验的错误都在这里</p>\n<p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p>\n<p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p>\n<h4 id=\"2）、如何定制错误的json数据；\"><a href=\"#2）、如何定制错误的json数据；\" class=\"headerlink\" title=\"2）、如何定制错误的json数据；\"></a>2）、如何定制错误的json数据；</h4><p>​        1）、自定义异常处理&amp;返回定制json数据；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExceptionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(UserNotExistException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">String</span>,<span class=\"title\">Object</span>&gt; <span class=\"title\">handleException</span>(<span class=\"title\">Exception</span> <span class=\"title\">e</span>)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"code\"</span>,<span class=\"string\">\"user.notexist\"</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"message\"</span>,e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//没有自适应效果...</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        2）、转发到/error进行自适应响应效果处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler</span>(UserNotExistException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">   <span class=\"title\">public</span> <span class=\"title\">String</span> <span class=\"title\">handleException</span>(<span class=\"title\">Exception</span> <span class=\"title\">e</span>, <span class=\"title\">HttpServletRequest</span> <span class=\"title\">request</span>)</span>&#123;</span><br><span class=\"line\">       Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">       <span class=\"comment\">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * Integer statusCode = (Integer) request</span></span><br><span class=\"line\"><span class=\"comment\">        .getAttribute(\"javax.servlet.error.status_code\");</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       request.setAttribute(<span class=\"string\">\"javax.servlet.error.status_code\"</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">       map.put(<span class=\"string\">\"code\"</span>,<span class=\"string\">\"user.notexist\"</span>);</span><br><span class=\"line\">       map.put(<span class=\"string\">\"message\"</span>,e.getMessage());</span><br><span class=\"line\">       <span class=\"comment\">//转发到/error</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"forward:/error\"</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）、将我们的定制数据携带出去；\"><a href=\"#3）、将我们的定制数据携带出去；\" class=\"headerlink\" title=\"3）、将我们的定制数据携带出去；\"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p>\n<p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p>\n<p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>\n<p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p>\n<p>自定义ErrorAttributes</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//给容器中加入我们自己定义的ErrorAttributes</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyErrorAttributes</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultErrorAttributes</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes, <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"company\"</span>,<span class=\"string\">\"atguigu\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容</p>\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h3 id=\"1）、SpringBoot默认的错误处理机制\"><a href=\"#1）、SpringBoot默认的错误处理机制\" class=\"headerlink\" title=\"1）、SpringBoot默认的错误处理机制\"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p>\n<p>​        1）、浏览器，返回一个默认的错误页面</p>\n<p>  浏览器发送请求的请求头：</p>\n<p>​        2）、如果是其他客户端，默认响应一个json数据</p>\n<p>原理：</p>\n<p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p>\n<pre><code>给容器中添加了以下组件</code></pre><p>​    1、DefaultErrorAttributes：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">帮我们在页面共享信息；</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t<span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; errorAttributes = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">\"timestamp\"</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">\t\taddStatus(errorAttributes, requestAttributes);</span><br><span class=\"line\">\t\taddErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class=\"line\">\t\taddPath(errorAttributes, requestAttributes);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    2、BasicErrorController：处理默认/error请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicErrorController</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractErrorController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(produces = <span class=\"string\">\"text/html\"</span>)<span class=\"comment\">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tHttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class=\"line\">\t\t\t\trequest, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class=\"line\">\t\tresponse.setStatus(status.value());</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class=\"line\">\t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (modelAndView == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"error\"</span>, model) : modelAndView);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span>    <span class=\"comment\">//产生json数据，其他客户端来到这个方法处理；</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class=\"line\">\t\t\t\tisIncludeStackTrace(request, MediaType.ALL));</span><br><span class=\"line\">\t\tHttpStatus status = getStatus(request);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    3、ErrorPageCustomizer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;error.path:/error&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String path = <span class=\"string\">\"/error\"</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    4、DefaultErrorViewResolver：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tMap&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">\t\tModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (modelAndView == <span class=\"keyword\">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class=\"line\">\t\t\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> ModelAndView <span class=\"title\">resolve</span><span class=\"params\">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//默认SpringBoot可以去找到一个页面？  error/404</span></span><br><span class=\"line\">\t\tString errorViewName = <span class=\"string\">\"error/\"</span> + viewName;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class=\"line\">\t\tTemplateAvailabilityProvider provider = <span class=\"keyword\">this</span>.templateAvailabilityProviders</span><br><span class=\"line\">\t\t\t\t.getProvider(errorViewName, <span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (provider != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(errorViewName, model);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        <span class=\"comment\">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resolveResource(errorViewName, model);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    步骤：</p>\n<p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p>\n<p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (ErrorViewResolver resolver : <span class=\"keyword\">this</span>.errorViewResolvers) &#123;</span><br><span class=\"line\">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (modelAndView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2）、如果定制错误响应：\"><a href=\"#2）、如果定制错误响应：\" class=\"headerlink\" title=\"2）、如果定制错误响应：\"></a>2）、如果定制错误响应：</h3><h4 id=\"1）、如何定制错误的页面；\"><a href=\"#1）、如何定制错误的页面；\" class=\"headerlink\" title=\"1）、如何定制错误的页面；\"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p>\n<p>​            我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p>\n<p>​            页面能获取的信息；</p>\n<p>​                timestamp：时间戳</p>\n<p>​                status：状态码</p>\n<p>​                error：错误提示</p>\n<p>​                exception：异常对象</p>\n<p>​                message：异常消息</p>\n<p>​                errors：JSR303数据校验的错误都在这里</p>\n<p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p>\n<p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p>\n<h4 id=\"2）、如何定制错误的json数据；\"><a href=\"#2）、如何定制错误的json数据；\" class=\"headerlink\" title=\"2）、如何定制错误的json数据；\"></a>2）、如何定制错误的json数据；</h4><p>​        1）、自定义异常处理&amp;返回定制json数据；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExceptionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(UserNotExistException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">String</span>,<span class=\"title\">Object</span>&gt; <span class=\"title\">handleException</span>(<span class=\"title\">Exception</span> <span class=\"title\">e</span>)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"code\"</span>,<span class=\"string\">\"user.notexist\"</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"message\"</span>,e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//没有自适应效果...</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        2）、转发到/error进行自适应响应效果处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler</span>(UserNotExistException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">   <span class=\"title\">public</span> <span class=\"title\">String</span> <span class=\"title\">handleException</span>(<span class=\"title\">Exception</span> <span class=\"title\">e</span>, <span class=\"title\">HttpServletRequest</span> <span class=\"title\">request</span>)</span>&#123;</span><br><span class=\"line\">       Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">       <span class=\"comment\">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * Integer statusCode = (Integer) request</span></span><br><span class=\"line\"><span class=\"comment\">        .getAttribute(\"javax.servlet.error.status_code\");</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       request.setAttribute(<span class=\"string\">\"javax.servlet.error.status_code\"</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">       map.put(<span class=\"string\">\"code\"</span>,<span class=\"string\">\"user.notexist\"</span>);</span><br><span class=\"line\">       map.put(<span class=\"string\">\"message\"</span>,e.getMessage());</span><br><span class=\"line\">       <span class=\"comment\">//转发到/error</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"forward:/error\"</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）、将我们的定制数据携带出去；\"><a href=\"#3）、将我们的定制数据携带出去；\" class=\"headerlink\" title=\"3）、将我们的定制数据携带出去；\"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p>\n<p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p>\n<p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>\n<p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p>\n<p>自定义ErrorAttributes</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//给容器中加入我们自己定义的ErrorAttributes</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyErrorAttributes</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultErrorAttributes</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes, <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class=\"line\">        map.put(<span class=\"string\">\"company\"</span>,<span class=\"string\">\"atguigu\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容</p>\n"},{"title":"StringBoot-RestfulCRUD","date":"2018-08-29T13:11:44.000Z","_content":"\n### 1）、默认访问首页\n\n```java\n//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\n//@EnableWebMvc   不要接管SpringMVC\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n       // super.addViewControllers(registry);\n        //浏览器发送 /atguigu 请求来到 success\n        registry.addViewController(\"/atguigu\").setViewName(\"success\");\n    }\n\n    //所有的WebMvcConfigurerAdapter组件都会一起起作用\n    @Bean //将组件注册在容器\n    public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n            @Override\n            public void addViewControllers(ViewControllerRegistry registry) {\n                registry.addViewController(\"/\").setViewName(\"login\");\n                registry.addViewController(\"/index.html\").setViewName(\"login\");\n            }\n        };\n        return adapter;\n    }\n}\n\n```\n\n### 2）、国际化\n\n**1）、编写国际化配置文件；**\n\n2）、使用ResourceBundleMessageSource管理国际化资源文件\n\n3）、在页面使用fmt:message取出国际化内容\n\n\n\n步骤：\n\n1）、编写国际化配置文件，抽取页面需要显示的国际化消息\n\n\n\n2）、SpringBoot自动配置好了管理国际化资源文件的组件；\n\n```java\n@ConfigurationProperties(prefix = \"spring.messages\")\npublic class MessageSourceAutoConfiguration {\n    \n    /**\n\t * Comma-separated list of basenames (essentially a fully-qualified classpath\n\t * location), each following the ResourceBundle convention with relaxed support for\n\t * slash based locations. If it doesn't contain a package qualifier (such as\n\t * \"org.mypackage\"), it will be resolved from the classpath root.\n\t */\n\tprivate String basename = \"messages\";  \n    //我们的配置文件可以直接放在类路径下叫messages.properties；\n    \n    @Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(this.basename)) {\n            //设置国际化资源文件的基础名（去掉语言国家代码的）\n\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(\n\t\t\t\t\tStringUtils.trimAllWhitespace(this.basename)));\n\t\t}\n\t\tif (this.encoding != null) {\n\t\t\tmessageSource.setDefaultEncoding(this.encoding.name());\n\t\t}\n\t\tmessageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);\n\t\tmessageSource.setCacheSeconds(this.cacheSeconds);\n\t\tmessageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);\n\t\treturn messageSource;\n\t}\n```\n\n\n\n3）、去页面获取国际化的值；\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180211134506.png)\n\n\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\"  xmlns:th=\"http://www.thymeleaf.org\">\n\t<head>\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\t\t<meta name=\"description\" content=\"\">\n\t\t<meta name=\"author\" content=\"\">\n\t\t<title>Signin Template for Bootstrap</title>\n\t\t<!-- Bootstrap core CSS -->\n\t\t<link href=\"asserts/css/bootstrap.min.css\" th:href=\"@{/webjars/bootstrap/4.0.0/css/bootstrap.css}\" rel=\"stylesheet\">\n\t\t<!-- Custom styles for this template -->\n\t\t<link href=\"asserts/css/signin.css\" th:href=\"@{/asserts/css/signin.css}\" rel=\"stylesheet\">\n\t</head>\n\n\t<body class=\"text-center\">\n\t\t<form class=\"form-signin\" action=\"dashboard.html\">\n\t\t\t<img class=\"mb-4\" th:src=\"@{/asserts/img/bootstrap-solid.svg}\" src=\"asserts/img/bootstrap-solid.svg\" alt=\"\" width=\"72\" height=\"72\">\n\t\t\t<h1 class=\"h3 mb-3 font-weight-normal\" th:text=\"#{login.tip}\">Please sign in</h1>\n\t\t\t<label class=\"sr-only\" th:text=\"#{login.username}\">Username</label>\n\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"Username\" th:placeholder=\"#{login.username}\" required=\"\" autofocus=\"\">\n\t\t\t<label class=\"sr-only\" th:text=\"#{login.password}\">Password</label>\n\t\t\t<input type=\"password\" class=\"form-control\" placeholder=\"Password\" th:placeholder=\"#{login.password}\" required=\"\">\n\t\t\t<div class=\"checkbox mb-3\">\n\t\t\t\t<label>\n          \t\t<input type=\"checkbox\" value=\"remember-me\"/> [[#{login.remember}]]\n        </label>\n\t\t\t</div>\n\t\t\t<button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" th:text=\"#{login.btn}\">Sign in</button>\n\t\t\t<p class=\"mt-5 mb-3 text-muted\">© 2017-2018</p>\n\t\t\t<a class=\"btn btn-sm\">中文</a>\n\t\t\t<a class=\"btn btn-sm\">English</a>\n\t\t</form>\n\n\t</body>\n\n</html>\n```\n\n效果：根据浏览器语言设置的信息切换了国际化；\n\n\n\n原理：\n\n​\t国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；\n\n```java\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"locale\")\n\t\tpublic LocaleResolver localeResolver() {\n\t\t\tif (this.mvcProperties\n\t\t\t\t\t.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {\n\t\t\t\treturn new FixedLocaleResolver(this.mvcProperties.getLocale());\n\t\t\t}\n\t\t\tAcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();\n\t\t\tlocaleResolver.setDefaultLocale(this.mvcProperties.getLocale());\n\t\t\treturn localeResolver;\n\t\t}\n默认的就是根据请求头带来的区域信息获取Locale进行国际化\n```\n\n4）、点击链接切换国际化\n\n```java\n/**\n * 可以在连接上携带区域信息\n */\npublic class MyLocaleResolver implements LocaleResolver {\n    \n    @Override\n    public Locale resolveLocale(HttpServletRequest request) {\n        String l = request.getParameter(\"l\");\n        Locale locale = Locale.getDefault();\n        if(!StringUtils.isEmpty(l)){\n            String[] split = l.split(\"_\");\n            locale = new Locale(split[0],split[1]);\n        }\n        return locale;\n    }\n\n    @Override\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n\n    }\n}\n\n\n @Bean\n    public LocaleResolver localeResolver(){\n        return new MyLocaleResolver();\n    }\n}\n\n\n```\n\n### 3）、登陆\n\n开发期间模板引擎页面修改以后，要实时生效\n\n1）、禁用模板引擎的缓存\n\n```\n# 禁用缓存\nspring.thymeleaf.cache=false \n```\n\n2）、页面修改完成以后ctrl+f9：重新编译；\n\n\n\n登陆错误消息的显示\n\n```html\n<p style=\"color: red\" th:text=\"${msg}\" th:if=\"${not #strings.isEmpty(msg)}\"></p>\n```\n\n\n\n### 4）、拦截器进行登陆检查\n\n拦截器\n\n```java\n/**\n * 登陆检查，\n */\npublic class LoginHandlerInterceptor implements HandlerInterceptor {\n    //目标方法执行之前\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        Object user = request.getSession().getAttribute(\"loginUser\");\n        if(user == null){\n            //未登陆，返回登陆页面\n            request.setAttribute(\"msg\",\"没有权限请先登陆\");\n            request.getRequestDispatcher(\"/index.html\").forward(request,response);\n            return false;\n        }else{\n            //已登陆，放行请求\n            return true;\n        }\n\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n    }\n}\n\n```\n\n\n\n注册拦截器\n\n```java\n  //所有的WebMvcConfigurerAdapter组件都会一起起作用\n    @Bean //将组件注册在容器\n    public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n            @Override\n            public void addViewControllers(ViewControllerRegistry registry) {\n                registry.addViewController(\"/\").setViewName(\"login\");\n                registry.addViewController(\"/index.html\").setViewName(\"login\");\n                registry.addViewController(\"/main.html\").setViewName(\"dashboard\");\n            }\n\n            //注册拦截器\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                //super.addInterceptors(registry);\n                //静态资源；  *.css , *.js\n                //SpringBoot已经做好了静态资源映射\n                registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(\"/**\")\n                        .excludePathPatterns(\"/index.html\",\"/\",\"/user/login\");\n            }\n        };\n        return adapter;\n    }\n```\n\n### 5）、CRUD-员工列表\n\n实验要求：\n\n1）、RestfulCRUD：CRUD满足Rest风格；\n\nURI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作\n\n|      | 普通CRUD（uri来区分操作） | RestfulCRUD       |\n| ---- | ------------------------- | ----------------- |\n| 查询 | getEmp                    | emp---GET         |\n| 添加 | addEmp?xxx                | emp---POST        |\n| 修改 | updateEmp?id=xxx&xxx=xx   | emp/{id}---PUT    |\n| 删除 | deleteEmp?id=1            | emp/{id}---DELETE |\n\n2）、实验的请求架构;\n\n| 实验功能                             | 请求URI | 请求方式 |\n| ------------------------------------ | ------- | -------- |\n| 查询所有员工                         | emps    | GET      |\n| 查询某个员工(来到修改页面)           | emp/1   | GET      |\n| 来到添加页面                         | emp     | GET      |\n| 添加员工                             | emp     | POST     |\n| 来到修改页面（查出员工进行信息回显） | emp/1   | GET      |\n| 修改员工                             | emp     | PUT      |\n| 删除员工                             | emp/1   | DELETE   |\n\n3）、员工列表：\n\n#### thymeleaf公共页面元素抽取\n\n```html\n1、抽取公共片段\n<div th:fragment=\"copy\">\n&copy; 2011 The Good Thymes Virtual Grocery\n</div>\n\n2、引入公共片段\n<div th:insert=\"~{footer :: copy}\"></div>\n~{templatename::selector}：模板名::选择器\n~{templatename::fragmentname}:模板名::片段名\n\n3、默认效果：\ninsert的公共片段在div标签中\n如果使用th:insert等属性进行引入，可以不用写~{}：\n行内写法可以加上：[[~{}]];[(~{})]；\n```\n\n\n\n三种引入公共片段的th属性：\n\n**th:insert**：将公共片段整个插入到声明引入的元素中\n\n**th:replace**：将声明引入的元素替换为公共片段\n\n**th:include**：将被引入的片段的内容包含进这个标签中\n\n\n\n```html\n<footer th:fragment=\"copy\">\n&copy; 2011 The Good Thymes Virtual Grocery\n</footer>\n\n引入方式\n<div th:insert=\"footer :: copy\"></div>\n<div th:replace=\"footer :: copy\"></div>\n<div th:include=\"footer :: copy\"></div>\n\n效果\n<div>\n    <footer>\n    &copy; 2011 The Good Thymes Virtual Grocery\n    </footer>\n</div>\n\n<footer>\n&copy; 2011 The Good Thymes Virtual Grocery\n</footer>\n\n<div>\n&copy; 2011 The Good Thymes Virtual Grocery\n</div>\n```\n\n\n\n引入片段的时候传入参数： \n\n```html\n<nav class=\"col-md-2 d-none d-md-block bg-light sidebar\" id=\"sidebar\">\n    <div class=\"sidebar-sticky\">\n        <ul class=\"nav flex-column\">\n            <li class=\"nav-item\">\n                <a class=\"nav-link active\"\n                   th:class=\"${activeUri=='main.html'?'nav-link active':'nav-link'}\"\n                   href=\"#\" th:href=\"@{/main.html}\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-home\">\n                        <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\n                        <polyline points=\"9 22 9 12 15 12 15 22\"></polyline>\n                    </svg>\n                    Dashboard <span class=\"sr-only\">(current)</span>\n                </a>\n            </li>\n\n<!--引入侧边栏;传入参数-->\n<div th:replace=\"commons/bar::#sidebar(activeUri='emps')\"></div>\n```\n\n### 6）、CRUD-员工添加\n\n添加页面\n\n```html\n<form>\n    <div class=\"form-group\">\n        <label>LastName</label>\n        <input type=\"text\" class=\"form-control\" placeholder=\"zhangsan\">\n    </div>\n    <div class=\"form-group\">\n        <label>Email</label>\n        <input type=\"email\" class=\"form-control\" placeholder=\"zhangsan@atguigu.com\">\n    </div>\n    <div class=\"form-group\">\n        <label>Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\"  value=\"1\">\n            <label class=\"form-check-label\">男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\"  value=\"0\">\n            <label class=\"form-check-label\">女</label>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label>department</label>\n        <select class=\"form-control\">\n            <option>1</option>\n            <option>2</option>\n            <option>3</option>\n            <option>4</option>\n            <option>5</option>\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Birth</label>\n        <input type=\"text\" class=\"form-control\" placeholder=\"zhangsan\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">添加</button>\n</form>\n```\n\n提交的数据格式不对：生日：日期；\n\n2017-12-12；2017/12/12；2017.12.12；\n\n日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;\n\n2017-12-12---Date； 类型转换，格式化;\n\n默认日期是按照/的方式；\n\n### 7）、CRUD-员工修改\n\n修改添加二合一表单\n\n```html\n<!--需要区分是员工修改还是添加；-->\n<form th:action=\"@{/emp}\" method=\"post\">\n    <!--发送put请求修改员工数据-->\n    <!--\n1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）\n2、页面创建一个post表单\n3、创建一个input项，name=\"_method\";值就是我们指定的请求方式\n-->\n    <input type=\"hidden\" name=\"_method\" value=\"put\" th:if=\"${emp!=null}\"/>\n    <input type=\"hidden\" name=\"id\" th:if=\"${emp!=null}\" th:value=\"${emp.id}\">\n    <div class=\"form-group\">\n        <label>LastName</label>\n        <input name=\"lastName\" type=\"text\" class=\"form-control\" placeholder=\"zhangsan\" th:value=\"${emp!=null}?${emp.lastName}\">\n    </div>\n    <div class=\"form-group\">\n        <label>Email</label>\n        <input name=\"email\" type=\"email\" class=\"form-control\" placeholder=\"zhangsan@atguigu.com\" th:value=\"${emp!=null}?${emp.email}\">\n    </div>\n    <div class=\"form-group\">\n        <label>Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\" th:checked=\"${emp!=null}?${emp.gender==1}\">\n            <label class=\"form-check-label\">男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\" th:checked=\"${emp!=null}?${emp.gender==0}\">\n            <label class=\"form-check-label\">女</label>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label>department</label>\n        <!--提交的是部门的id-->\n        <select class=\"form-control\" name=\"department.id\">\n            <option th:selected=\"${emp!=null}?${dept.id == emp.department.id}\" th:value=\"${dept.id}\" th:each=\"dept:${depts}\" th:text=\"${dept.departmentName}\">1</option>\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Birth</label>\n        <input name=\"birth\" type=\"text\" class=\"form-control\" placeholder=\"zhangsan\" th:value=\"${emp!=null}?${#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')}\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\" th:text=\"${emp!=null}?'修改':'添加'\">添加</button>\n</form>\n```\n\n### 8）、CRUD-员工删除\n\n```html\n<tr th:each=\"emp:${emps}\">\n    <td th:text=\"${emp.id}\"></td>\n    <td>[[${emp.lastName}]]</td>\n    <td th:text=\"${emp.email}\"></td>\n    <td th:text=\"${emp.gender}==0?'女':'男'\"></td>\n    <td th:text=\"${emp.department.departmentName}\"></td>\n    <td th:text=\"${#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')}\"></td>\n    <td>\n        <a class=\"btn btn-sm btn-primary\" th:href=\"@{/emp/}+${emp.id}\">编辑</a>\n        <button th:attr=\"del_uri=@{/emp/}+${emp.id}\" class=\"btn btn-sm btn-danger deleteBtn\">删除</button>\n    </td>\n</tr>\n\n\n<script>\n    $(\".deleteBtn\").click(function(){\n        //删除当前员工的\n        $(\"#deleteEmpForm\").attr(\"action\",$(this).attr(\"del_uri\")).submit();\n        return false;\n    });\n</script>\n```\n\n","source":"_posts/StringBoot-RestfulCRUD.md","raw":"---\ntitle: StringBoot-RestfulCRUD\n\ndate: 2018/08/29 21:11:44\n\n---\n\n### 1）、默认访问首页\n\n```java\n//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\n//@EnableWebMvc   不要接管SpringMVC\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n       // super.addViewControllers(registry);\n        //浏览器发送 /atguigu 请求来到 success\n        registry.addViewController(\"/atguigu\").setViewName(\"success\");\n    }\n\n    //所有的WebMvcConfigurerAdapter组件都会一起起作用\n    @Bean //将组件注册在容器\n    public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n            @Override\n            public void addViewControllers(ViewControllerRegistry registry) {\n                registry.addViewController(\"/\").setViewName(\"login\");\n                registry.addViewController(\"/index.html\").setViewName(\"login\");\n            }\n        };\n        return adapter;\n    }\n}\n\n```\n\n### 2）、国际化\n\n**1）、编写国际化配置文件；**\n\n2）、使用ResourceBundleMessageSource管理国际化资源文件\n\n3）、在页面使用fmt:message取出国际化内容\n\n\n\n步骤：\n\n1）、编写国际化配置文件，抽取页面需要显示的国际化消息\n\n\n\n2）、SpringBoot自动配置好了管理国际化资源文件的组件；\n\n```java\n@ConfigurationProperties(prefix = \"spring.messages\")\npublic class MessageSourceAutoConfiguration {\n    \n    /**\n\t * Comma-separated list of basenames (essentially a fully-qualified classpath\n\t * location), each following the ResourceBundle convention with relaxed support for\n\t * slash based locations. If it doesn't contain a package qualifier (such as\n\t * \"org.mypackage\"), it will be resolved from the classpath root.\n\t */\n\tprivate String basename = \"messages\";  \n    //我们的配置文件可以直接放在类路径下叫messages.properties；\n    \n    @Bean\n\tpublic MessageSource messageSource() {\n\t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(this.basename)) {\n            //设置国际化资源文件的基础名（去掉语言国家代码的）\n\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(\n\t\t\t\t\tStringUtils.trimAllWhitespace(this.basename)));\n\t\t}\n\t\tif (this.encoding != null) {\n\t\t\tmessageSource.setDefaultEncoding(this.encoding.name());\n\t\t}\n\t\tmessageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);\n\t\tmessageSource.setCacheSeconds(this.cacheSeconds);\n\t\tmessageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);\n\t\treturn messageSource;\n\t}\n```\n\n\n\n3）、去页面获取国际化的值；\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180211134506.png)\n\n\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\"  xmlns:th=\"http://www.thymeleaf.org\">\n\t<head>\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\t\t<meta name=\"description\" content=\"\">\n\t\t<meta name=\"author\" content=\"\">\n\t\t<title>Signin Template for Bootstrap</title>\n\t\t<!-- Bootstrap core CSS -->\n\t\t<link href=\"asserts/css/bootstrap.min.css\" th:href=\"@{/webjars/bootstrap/4.0.0/css/bootstrap.css}\" rel=\"stylesheet\">\n\t\t<!-- Custom styles for this template -->\n\t\t<link href=\"asserts/css/signin.css\" th:href=\"@{/asserts/css/signin.css}\" rel=\"stylesheet\">\n\t</head>\n\n\t<body class=\"text-center\">\n\t\t<form class=\"form-signin\" action=\"dashboard.html\">\n\t\t\t<img class=\"mb-4\" th:src=\"@{/asserts/img/bootstrap-solid.svg}\" src=\"asserts/img/bootstrap-solid.svg\" alt=\"\" width=\"72\" height=\"72\">\n\t\t\t<h1 class=\"h3 mb-3 font-weight-normal\" th:text=\"#{login.tip}\">Please sign in</h1>\n\t\t\t<label class=\"sr-only\" th:text=\"#{login.username}\">Username</label>\n\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"Username\" th:placeholder=\"#{login.username}\" required=\"\" autofocus=\"\">\n\t\t\t<label class=\"sr-only\" th:text=\"#{login.password}\">Password</label>\n\t\t\t<input type=\"password\" class=\"form-control\" placeholder=\"Password\" th:placeholder=\"#{login.password}\" required=\"\">\n\t\t\t<div class=\"checkbox mb-3\">\n\t\t\t\t<label>\n          \t\t<input type=\"checkbox\" value=\"remember-me\"/> [[#{login.remember}]]\n        </label>\n\t\t\t</div>\n\t\t\t<button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" th:text=\"#{login.btn}\">Sign in</button>\n\t\t\t<p class=\"mt-5 mb-3 text-muted\">© 2017-2018</p>\n\t\t\t<a class=\"btn btn-sm\">中文</a>\n\t\t\t<a class=\"btn btn-sm\">English</a>\n\t\t</form>\n\n\t</body>\n\n</html>\n```\n\n效果：根据浏览器语言设置的信息切换了国际化；\n\n\n\n原理：\n\n​\t国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；\n\n```java\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"locale\")\n\t\tpublic LocaleResolver localeResolver() {\n\t\t\tif (this.mvcProperties\n\t\t\t\t\t.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {\n\t\t\t\treturn new FixedLocaleResolver(this.mvcProperties.getLocale());\n\t\t\t}\n\t\t\tAcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();\n\t\t\tlocaleResolver.setDefaultLocale(this.mvcProperties.getLocale());\n\t\t\treturn localeResolver;\n\t\t}\n默认的就是根据请求头带来的区域信息获取Locale进行国际化\n```\n\n4）、点击链接切换国际化\n\n```java\n/**\n * 可以在连接上携带区域信息\n */\npublic class MyLocaleResolver implements LocaleResolver {\n    \n    @Override\n    public Locale resolveLocale(HttpServletRequest request) {\n        String l = request.getParameter(\"l\");\n        Locale locale = Locale.getDefault();\n        if(!StringUtils.isEmpty(l)){\n            String[] split = l.split(\"_\");\n            locale = new Locale(split[0],split[1]);\n        }\n        return locale;\n    }\n\n    @Override\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n\n    }\n}\n\n\n @Bean\n    public LocaleResolver localeResolver(){\n        return new MyLocaleResolver();\n    }\n}\n\n\n```\n\n### 3）、登陆\n\n开发期间模板引擎页面修改以后，要实时生效\n\n1）、禁用模板引擎的缓存\n\n```\n# 禁用缓存\nspring.thymeleaf.cache=false \n```\n\n2）、页面修改完成以后ctrl+f9：重新编译；\n\n\n\n登陆错误消息的显示\n\n```html\n<p style=\"color: red\" th:text=\"${msg}\" th:if=\"${not #strings.isEmpty(msg)}\"></p>\n```\n\n\n\n### 4）、拦截器进行登陆检查\n\n拦截器\n\n```java\n/**\n * 登陆检查，\n */\npublic class LoginHandlerInterceptor implements HandlerInterceptor {\n    //目标方法执行之前\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        Object user = request.getSession().getAttribute(\"loginUser\");\n        if(user == null){\n            //未登陆，返回登陆页面\n            request.setAttribute(\"msg\",\"没有权限请先登陆\");\n            request.getRequestDispatcher(\"/index.html\").forward(request,response);\n            return false;\n        }else{\n            //已登陆，放行请求\n            return true;\n        }\n\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n    }\n}\n\n```\n\n\n\n注册拦截器\n\n```java\n  //所有的WebMvcConfigurerAdapter组件都会一起起作用\n    @Bean //将组件注册在容器\n    public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){\n        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {\n            @Override\n            public void addViewControllers(ViewControllerRegistry registry) {\n                registry.addViewController(\"/\").setViewName(\"login\");\n                registry.addViewController(\"/index.html\").setViewName(\"login\");\n                registry.addViewController(\"/main.html\").setViewName(\"dashboard\");\n            }\n\n            //注册拦截器\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                //super.addInterceptors(registry);\n                //静态资源；  *.css , *.js\n                //SpringBoot已经做好了静态资源映射\n                registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(\"/**\")\n                        .excludePathPatterns(\"/index.html\",\"/\",\"/user/login\");\n            }\n        };\n        return adapter;\n    }\n```\n\n### 5）、CRUD-员工列表\n\n实验要求：\n\n1）、RestfulCRUD：CRUD满足Rest风格；\n\nURI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作\n\n|      | 普通CRUD（uri来区分操作） | RestfulCRUD       |\n| ---- | ------------------------- | ----------------- |\n| 查询 | getEmp                    | emp---GET         |\n| 添加 | addEmp?xxx                | emp---POST        |\n| 修改 | updateEmp?id=xxx&xxx=xx   | emp/{id}---PUT    |\n| 删除 | deleteEmp?id=1            | emp/{id}---DELETE |\n\n2）、实验的请求架构;\n\n| 实验功能                             | 请求URI | 请求方式 |\n| ------------------------------------ | ------- | -------- |\n| 查询所有员工                         | emps    | GET      |\n| 查询某个员工(来到修改页面)           | emp/1   | GET      |\n| 来到添加页面                         | emp     | GET      |\n| 添加员工                             | emp     | POST     |\n| 来到修改页面（查出员工进行信息回显） | emp/1   | GET      |\n| 修改员工                             | emp     | PUT      |\n| 删除员工                             | emp/1   | DELETE   |\n\n3）、员工列表：\n\n#### thymeleaf公共页面元素抽取\n\n```html\n1、抽取公共片段\n<div th:fragment=\"copy\">\n&copy; 2011 The Good Thymes Virtual Grocery\n</div>\n\n2、引入公共片段\n<div th:insert=\"~{footer :: copy}\"></div>\n~{templatename::selector}：模板名::选择器\n~{templatename::fragmentname}:模板名::片段名\n\n3、默认效果：\ninsert的公共片段在div标签中\n如果使用th:insert等属性进行引入，可以不用写~{}：\n行内写法可以加上：[[~{}]];[(~{})]；\n```\n\n\n\n三种引入公共片段的th属性：\n\n**th:insert**：将公共片段整个插入到声明引入的元素中\n\n**th:replace**：将声明引入的元素替换为公共片段\n\n**th:include**：将被引入的片段的内容包含进这个标签中\n\n\n\n```html\n<footer th:fragment=\"copy\">\n&copy; 2011 The Good Thymes Virtual Grocery\n</footer>\n\n引入方式\n<div th:insert=\"footer :: copy\"></div>\n<div th:replace=\"footer :: copy\"></div>\n<div th:include=\"footer :: copy\"></div>\n\n效果\n<div>\n    <footer>\n    &copy; 2011 The Good Thymes Virtual Grocery\n    </footer>\n</div>\n\n<footer>\n&copy; 2011 The Good Thymes Virtual Grocery\n</footer>\n\n<div>\n&copy; 2011 The Good Thymes Virtual Grocery\n</div>\n```\n\n\n\n引入片段的时候传入参数： \n\n```html\n<nav class=\"col-md-2 d-none d-md-block bg-light sidebar\" id=\"sidebar\">\n    <div class=\"sidebar-sticky\">\n        <ul class=\"nav flex-column\">\n            <li class=\"nav-item\">\n                <a class=\"nav-link active\"\n                   th:class=\"${activeUri=='main.html'?'nav-link active':'nav-link'}\"\n                   href=\"#\" th:href=\"@{/main.html}\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-home\">\n                        <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\n                        <polyline points=\"9 22 9 12 15 12 15 22\"></polyline>\n                    </svg>\n                    Dashboard <span class=\"sr-only\">(current)</span>\n                </a>\n            </li>\n\n<!--引入侧边栏;传入参数-->\n<div th:replace=\"commons/bar::#sidebar(activeUri='emps')\"></div>\n```\n\n### 6）、CRUD-员工添加\n\n添加页面\n\n```html\n<form>\n    <div class=\"form-group\">\n        <label>LastName</label>\n        <input type=\"text\" class=\"form-control\" placeholder=\"zhangsan\">\n    </div>\n    <div class=\"form-group\">\n        <label>Email</label>\n        <input type=\"email\" class=\"form-control\" placeholder=\"zhangsan@atguigu.com\">\n    </div>\n    <div class=\"form-group\">\n        <label>Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\"  value=\"1\">\n            <label class=\"form-check-label\">男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\"  value=\"0\">\n            <label class=\"form-check-label\">女</label>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label>department</label>\n        <select class=\"form-control\">\n            <option>1</option>\n            <option>2</option>\n            <option>3</option>\n            <option>4</option>\n            <option>5</option>\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Birth</label>\n        <input type=\"text\" class=\"form-control\" placeholder=\"zhangsan\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">添加</button>\n</form>\n```\n\n提交的数据格式不对：生日：日期；\n\n2017-12-12；2017/12/12；2017.12.12；\n\n日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;\n\n2017-12-12---Date； 类型转换，格式化;\n\n默认日期是按照/的方式；\n\n### 7）、CRUD-员工修改\n\n修改添加二合一表单\n\n```html\n<!--需要区分是员工修改还是添加；-->\n<form th:action=\"@{/emp}\" method=\"post\">\n    <!--发送put请求修改员工数据-->\n    <!--\n1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）\n2、页面创建一个post表单\n3、创建一个input项，name=\"_method\";值就是我们指定的请求方式\n-->\n    <input type=\"hidden\" name=\"_method\" value=\"put\" th:if=\"${emp!=null}\"/>\n    <input type=\"hidden\" name=\"id\" th:if=\"${emp!=null}\" th:value=\"${emp.id}\">\n    <div class=\"form-group\">\n        <label>LastName</label>\n        <input name=\"lastName\" type=\"text\" class=\"form-control\" placeholder=\"zhangsan\" th:value=\"${emp!=null}?${emp.lastName}\">\n    </div>\n    <div class=\"form-group\">\n        <label>Email</label>\n        <input name=\"email\" type=\"email\" class=\"form-control\" placeholder=\"zhangsan@atguigu.com\" th:value=\"${emp!=null}?${emp.email}\">\n    </div>\n    <div class=\"form-group\">\n        <label>Gender</label><br/>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"1\" th:checked=\"${emp!=null}?${emp.gender==1}\">\n            <label class=\"form-check-label\">男</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"0\" th:checked=\"${emp!=null}?${emp.gender==0}\">\n            <label class=\"form-check-label\">女</label>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <label>department</label>\n        <!--提交的是部门的id-->\n        <select class=\"form-control\" name=\"department.id\">\n            <option th:selected=\"${emp!=null}?${dept.id == emp.department.id}\" th:value=\"${dept.id}\" th:each=\"dept:${depts}\" th:text=\"${dept.departmentName}\">1</option>\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label>Birth</label>\n        <input name=\"birth\" type=\"text\" class=\"form-control\" placeholder=\"zhangsan\" th:value=\"${emp!=null}?${#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')}\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\" th:text=\"${emp!=null}?'修改':'添加'\">添加</button>\n</form>\n```\n\n### 8）、CRUD-员工删除\n\n```html\n<tr th:each=\"emp:${emps}\">\n    <td th:text=\"${emp.id}\"></td>\n    <td>[[${emp.lastName}]]</td>\n    <td th:text=\"${emp.email}\"></td>\n    <td th:text=\"${emp.gender}==0?'女':'男'\"></td>\n    <td th:text=\"${emp.department.departmentName}\"></td>\n    <td th:text=\"${#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')}\"></td>\n    <td>\n        <a class=\"btn btn-sm btn-primary\" th:href=\"@{/emp/}+${emp.id}\">编辑</a>\n        <button th:attr=\"del_uri=@{/emp/}+${emp.id}\" class=\"btn btn-sm btn-danger deleteBtn\">删除</button>\n    </td>\n</tr>\n\n\n<script>\n    $(\".deleteBtn\").click(function(){\n        //删除当前员工的\n        $(\"#deleteEmpForm\").attr(\"action\",$(this).attr(\"del_uri\")).submit();\n        return false;\n    });\n</script>\n```\n\n","slug":"StringBoot-RestfulCRUD","published":1,"updated":"2020-05-30T15:26:49.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hqo000asx01huvcffwd","content":"<h3 id=\"1）、默认访问首页\"><a href=\"#1）、默认访问首页\" class=\"headerlink\" title=\"1）、默认访问首页\"></a>1）、默认访问首页</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class=\"line\"><span class=\"comment\">//@EnableWebMvc   不要接管SpringMVC</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// super.addViewControllers(registry);</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">\"/atguigu\"</span>).setViewName(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"comment\">//将组件注册在容器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">                registry.addViewController(<span class=\"string\">\"/\"</span>).setViewName(<span class=\"string\">\"login\"</span>);</span><br><span class=\"line\">                registry.addViewController(<span class=\"string\">\"/index.html\"</span>).setViewName(<span class=\"string\">\"login\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2）、国际化\"><a href=\"#2）、国际化\" class=\"headerlink\" title=\"2）、国际化\"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p>\n<p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p>\n<p>3）、在页面使用fmt:message取出国际化内容</p>\n<p>步骤：</p>\n<p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p>\n<p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.messages\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Comma-separated list of basenames (essentially a fully-qualified classpath</span></span><br><span class=\"line\"><span class=\"comment\">\t * location), each following the ResourceBundle convention with relaxed support for</span></span><br><span class=\"line\"><span class=\"comment\">\t * slash based locations. If it doesn't contain a package qualifier (such as</span></span><br><span class=\"line\"><span class=\"comment\">\t * \"org.mypackage\"), it will be resolved from the classpath root.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String basename = <span class=\"string\">\"messages\"</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//我们的配置文件可以直接放在类路径下叫messages.properties；</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> MessageSource <span class=\"title\">messageSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tResourceBundleMessageSource messageSource = <span class=\"keyword\">new</span> ResourceBundleMessageSource();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.basename)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置国际化资源文件的基础名（去掉语言国家代码的）</span></span><br><span class=\"line\">\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class=\"line\">\t\t\t\t\tStringUtils.trimAllWhitespace(<span class=\"keyword\">this</span>.basename)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.encoding != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tmessageSource.setDefaultEncoding(<span class=\"keyword\">this</span>.encoding.name());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageSource.setFallbackToSystemLocale(<span class=\"keyword\">this</span>.fallbackToSystemLocale);</span><br><span class=\"line\">\t\tmessageSource.setCacheSeconds(<span class=\"keyword\">this</span>.cacheSeconds);</span><br><span class=\"line\">\t\tmessageSource.setAlwaysUseMessageFormat(<span class=\"keyword\">this</span>.alwaysUseMessageFormat);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> messageSource;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3）、去页面获取国际化的值；</p>\n<p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180211134506.png\" alt=\"\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>  <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, shrink-to-fit=no\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Signin Template for Bootstrap<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"asserts/css/bootstrap.min.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"asserts/css/signin.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/asserts/css/signin.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-center\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-signin\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"dashboard.html\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mb-4\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/asserts/img/bootstrap-solid.svg&#125;\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"asserts/img/bootstrap-solid.svg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"72\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"72\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"h3 mb-3 font-weight-normal\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;login.tip&#125;\"</span>&gt;</span>Please sign in<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;login.username&#125;\"</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Username\"</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">\"#&#123;login.username&#125;\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">autofocus</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;login.password&#125;\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">\"#&#123;login.password&#125;\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkbox mb-3\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          \t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"remember-me\"</span>/&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-lg btn-primary btn-block\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;login.btn&#125;\"</span>&gt;</span>Sign in<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mt-5 mb-3 text-muted\"</span>&gt;</span>© 2017-2018<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-sm\"</span>&gt;</span>中文<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-sm\"</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果：根据浏览器语言设置的信息切换了国际化；</p>\n<p>原理：</p>\n<p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@ConditionalOnProperty</span>(prefix = <span class=\"string\">\"spring.mvc\"</span>, name = <span class=\"string\">\"locale\"</span>)</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mvcProperties</span><br><span class=\"line\">\t\t\t\t\t.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FixedLocaleResolver(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tAcceptHeaderLocaleResolver localeResolver = <span class=\"keyword\">new</span> AcceptHeaderLocaleResolver();</span><br><span class=\"line\">\t\t\tlocaleResolver.setDefaultLocale(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> localeResolver;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">默认的就是根据请求头带来的区域信息获取Locale进行国际化</span><br></pre></td></tr></table></figure>\n\n<p>4）、点击链接切换国际化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以在连接上携带区域信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLocaleResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">LocaleResolver</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Locale <span class=\"title\">resolveLocale</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String l = request.getParameter(<span class=\"string\">\"l\"</span>);</span><br><span class=\"line\">        Locale locale = Locale.getDefault();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class=\"line\">            String[] split = l.split(<span class=\"string\">\"_\"</span>);</span><br><span class=\"line\">            locale = <span class=\"keyword\">new</span> Locale(split[<span class=\"number\">0</span>],split[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> locale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLocale</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyLocaleResolver();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3）、登陆\"><a href=\"#3）、登陆\" class=\"headerlink\" title=\"3）、登陆\"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p>\n<p>1）、禁用模板引擎的缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 禁用缓存</span><br><span class=\"line\">spring.thymeleaf.cache&#x3D;false</span><br></pre></td></tr></table></figure>\n\n<p>2）、页面修改完成以后ctrl+f9：重新编译；</p>\n<p>登陆错误消息的显示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;msg&#125;\"</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;not #strings.isEmpty(msg)&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4）、拦截器进行登陆检查\"><a href=\"#4）、拦截器进行登陆检查\" class=\"headerlink\" title=\"4）、拦截器进行登陆检查\"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 登陆检查，</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginHandlerInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//目标方法执行之前</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object user = request.getSession().getAttribute(<span class=\"string\">\"loginUser\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//未登陆，返回登陆页面</span></span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"没有权限请先登陆\"</span>);</span><br><span class=\"line\">            request.getRequestDispatcher(<span class=\"string\">\"/index.html\"</span>).forward(request,response);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//已登陆，放行请求</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注册拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span> <span class=\"comment\">//将组件注册在容器</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">              registry.addViewController(<span class=\"string\">\"/\"</span>).setViewName(<span class=\"string\">\"login\"</span>);</span><br><span class=\"line\">              registry.addViewController(<span class=\"string\">\"/index.html\"</span>).setViewName(<span class=\"string\">\"login\"</span>);</span><br><span class=\"line\">              registry.addViewController(<span class=\"string\">\"/main.html\"</span>).setViewName(<span class=\"string\">\"dashboard\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">//注册拦截器</span></span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">              <span class=\"comment\">//super.addInterceptors(registry);</span></span><br><span class=\"line\">              <span class=\"comment\">//静态资源；  *.css , *.js</span></span><br><span class=\"line\">              <span class=\"comment\">//SpringBoot已经做好了静态资源映射</span></span><br><span class=\"line\">              registry.addInterceptor(<span class=\"keyword\">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class=\"string\">\"/**\"</span>)</span><br><span class=\"line\">                      .excludePathPatterns(<span class=\"string\">\"/index.html\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/user/login\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5）、CRUD-员工列表\"><a href=\"#5）、CRUD-员工列表\" class=\"headerlink\" title=\"5）、CRUD-员工列表\"></a>5）、CRUD-员工列表</h3><p>实验要求：</p>\n<p>1）、RestfulCRUD：CRUD满足Rest风格；</p>\n<p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>普通CRUD（uri来区分操作）</th>\n<th>RestfulCRUD</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询</td>\n<td>getEmp</td>\n<td>emp—GET</td>\n</tr>\n<tr>\n<td>添加</td>\n<td>addEmp?xxx</td>\n<td>emp—POST</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>updateEmp?id=xxx&amp;xxx=xx</td>\n<td>emp/{id}—PUT</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>deleteEmp?id=1</td>\n<td>emp/{id}—DELETE</td>\n</tr>\n</tbody></table>\n<p>2）、实验的请求架构;</p>\n<table>\n<thead>\n<tr>\n<th>实验功能</th>\n<th>请求URI</th>\n<th>请求方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询所有员工</td>\n<td>emps</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>查询某个员工(来到修改页面)</td>\n<td>emp/1</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>来到添加页面</td>\n<td>emp</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>添加员工</td>\n<td>emp</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>来到修改页面（查出员工进行信息回显）</td>\n<td>emp/1</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>修改员工</td>\n<td>emp</td>\n<td>PUT</td>\n</tr>\n<tr>\n<td>删除员工</td>\n<td>emp/1</td>\n<td>DELETE</td>\n</tr>\n</tbody></table>\n<p>3）、员工列表：</p>\n<h4 id=\"thymeleaf公共页面元素抽取\"><a href=\"#thymeleaf公共页面元素抽取\" class=\"headerlink\" title=\"thymeleaf公共页面元素抽取\"></a>thymeleaf公共页面元素抽取</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、抽取公共片段</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">\"copy\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">2、引入公共片段</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">\"~&#123;footer :: copy&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">~&#123;templatename::selector&#125;：模板名::选择器</span><br><span class=\"line\">~&#123;templatename::fragmentname&#125;:模板名::片段名</span><br><span class=\"line\"></span><br><span class=\"line\">3、默认效果：</span><br><span class=\"line\">insert的公共片段在div标签中</span><br><span class=\"line\">如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：</span><br><span class=\"line\">行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure>\n\n\n\n<p>三种引入公共片段的th属性：</p>\n<p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p>\n<p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p>\n<p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">\"copy\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">引入方式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">\"footer :: copy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"footer :: copy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">\"footer :: copy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">效果</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>引入片段的时候传入参数： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-2 d-none d-md-block bg-light sidebar\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar-sticky\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav flex-column\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav-item\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav-link active\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                   <span class=\"attr\">th:class</span>=<span class=\"string\">\"$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                   <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/main.html&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"24\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"24\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 24 24\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">stroke</span>=<span class=\"string\">\"currentColor\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">stroke-linecap</span>=<span class=\"string\">\"round\"</span> <span class=\"attr\">stroke-linejoin</span>=<span class=\"string\">\"round\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"feather feather-home\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">polyline</span> <span class=\"attr\">points</span>=<span class=\"string\">\"9 22 9 12 15 12 15 22\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polyline</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">                    Dashboard <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>(current)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入侧边栏;传入参数--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"commons/bar::#sidebar(activeUri='emps')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6）、CRUD-员工添加\"><a href=\"#6）、CRUD-员工添加\" class=\"headerlink\" title=\"6）、CRUD-员工添加\"></a>6）、CRUD-员工添加</h3><p>添加页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan@atguigu.com\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check form-check-inline\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>  <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-label\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check form-check-inline\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>  <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-label\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>添加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>提交的数据格式不对：生日：日期；</p>\n<p>2017-12-12；2017/12/12；2017.12.12；</p>\n<p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p>\n<p>2017-12-12—Date； 类型转换，格式化;</p>\n<p>默认日期是按照/的方式；</p>\n<h3 id=\"7）、CRUD-员工修改\"><a href=\"#7）、CRUD-员工修改\" class=\"headerlink\" title=\"7）、CRUD-员工修改\"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--需要区分是员工修改还是添加；--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/emp&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--发送put请求修改员工数据--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span></span><br><span class=\"line\"><span class=\"comment\">2、页面创建一个post表单</span></span><br><span class=\"line\"><span class=\"comment\">3、创建一个input项，name=\"_method\";值就是我们指定的请求方式</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"_method\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"put\"</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;emp!=null&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;emp!=null&#125;\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;emp.id&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastName\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan@atguigu.com\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;emp.email&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check form-check-inline\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-label\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check form-check-inline\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-label\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--提交的是部门的id--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"department.id\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;dept.id&#125;\"</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"dept:$&#123;depts&#125;\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;dept.departmentName&#125;\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"birth\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?'修改':'添加'\"</span>&gt;</span>添加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8）、CRUD-员工删除\"><a href=\"#8）、CRUD-员工删除\" class=\"headerlink\" title=\"8）、CRUD-员工删除\"></a>8）、CRUD-员工删除</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"emp:$&#123;emps&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;emp.id&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;emp.email&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;emp.gender&#125;==0?'女':'男'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;emp.department.departmentName&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-sm btn-primary\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/emp/&#125;+$&#123;emp.id&#125;\"</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">th:attr</span>=<span class=\"string\">\"del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-sm btn-danger deleteBtn\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">\".deleteBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//删除当前员工的</span></span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">\"#deleteEmpForm\"</span>).attr(<span class=\"string\">\"action\"</span>,$(<span class=\"keyword\">this</span>).attr(<span class=\"string\">\"del_uri\"</span>)).submit();</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h3 id=\"1）、默认访问首页\"><a href=\"#1）、默认访问首页\" class=\"headerlink\" title=\"1）、默认访问首页\"></a>1）、默认访问首页</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class=\"line\"><span class=\"comment\">//@EnableWebMvc   不要接管SpringMVC</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// super.addViewControllers(registry);</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">\"/atguigu\"</span>).setViewName(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"comment\">//将组件注册在容器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">                registry.addViewController(<span class=\"string\">\"/\"</span>).setViewName(<span class=\"string\">\"login\"</span>);</span><br><span class=\"line\">                registry.addViewController(<span class=\"string\">\"/index.html\"</span>).setViewName(<span class=\"string\">\"login\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2）、国际化\"><a href=\"#2）、国际化\" class=\"headerlink\" title=\"2）、国际化\"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p>\n<p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p>\n<p>3）、在页面使用fmt:message取出国际化内容</p>\n<p>步骤：</p>\n<p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p>\n<p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.messages\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Comma-separated list of basenames (essentially a fully-qualified classpath</span></span><br><span class=\"line\"><span class=\"comment\">\t * location), each following the ResourceBundle convention with relaxed support for</span></span><br><span class=\"line\"><span class=\"comment\">\t * slash based locations. If it doesn't contain a package qualifier (such as</span></span><br><span class=\"line\"><span class=\"comment\">\t * \"org.mypackage\"), it will be resolved from the classpath root.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String basename = <span class=\"string\">\"messages\"</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//我们的配置文件可以直接放在类路径下叫messages.properties；</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> MessageSource <span class=\"title\">messageSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tResourceBundleMessageSource messageSource = <span class=\"keyword\">new</span> ResourceBundleMessageSource();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.basename)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置国际化资源文件的基础名（去掉语言国家代码的）</span></span><br><span class=\"line\">\t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class=\"line\">\t\t\t\t\tStringUtils.trimAllWhitespace(<span class=\"keyword\">this</span>.basename)));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.encoding != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tmessageSource.setDefaultEncoding(<span class=\"keyword\">this</span>.encoding.name());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageSource.setFallbackToSystemLocale(<span class=\"keyword\">this</span>.fallbackToSystemLocale);</span><br><span class=\"line\">\t\tmessageSource.setCacheSeconds(<span class=\"keyword\">this</span>.cacheSeconds);</span><br><span class=\"line\">\t\tmessageSource.setAlwaysUseMessageFormat(<span class=\"keyword\">this</span>.alwaysUseMessageFormat);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> messageSource;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3）、去页面获取国际化的值；</p>\n<p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180211134506.png\" alt=\"\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>  <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, shrink-to-fit=no\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Signin Template for Bootstrap<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"asserts/css/bootstrap.min.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"asserts/css/signin.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/asserts/css/signin.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-center\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-signin\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"dashboard.html\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mb-4\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/asserts/img/bootstrap-solid.svg&#125;\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"asserts/img/bootstrap-solid.svg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"72\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"72\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"h3 mb-3 font-weight-normal\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;login.tip&#125;\"</span>&gt;</span>Please sign in<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;login.username&#125;\"</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Username\"</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">\"#&#123;login.username&#125;\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">autofocus</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;login.password&#125;\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">\"#&#123;login.password&#125;\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkbox mb-3\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">          \t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"remember-me\"</span>/&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-lg btn-primary btn-block\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;login.btn&#125;\"</span>&gt;</span>Sign in<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mt-5 mb-3 text-muted\"</span>&gt;</span>© 2017-2018<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-sm\"</span>&gt;</span>中文<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-sm\"</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果：根据浏览器语言设置的信息切换了国际化；</p>\n<p>原理：</p>\n<p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@ConditionalOnProperty</span>(prefix = <span class=\"string\">\"spring.mvc\"</span>, name = <span class=\"string\">\"locale\"</span>)</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mvcProperties</span><br><span class=\"line\">\t\t\t\t\t.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FixedLocaleResolver(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tAcceptHeaderLocaleResolver localeResolver = <span class=\"keyword\">new</span> AcceptHeaderLocaleResolver();</span><br><span class=\"line\">\t\t\tlocaleResolver.setDefaultLocale(<span class=\"keyword\">this</span>.mvcProperties.getLocale());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> localeResolver;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">默认的就是根据请求头带来的区域信息获取Locale进行国际化</span><br></pre></td></tr></table></figure>\n\n<p>4）、点击链接切换国际化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以在连接上携带区域信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLocaleResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">LocaleResolver</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Locale <span class=\"title\">resolveLocale</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String l = request.getParameter(<span class=\"string\">\"l\"</span>);</span><br><span class=\"line\">        Locale locale = Locale.getDefault();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class=\"line\">            String[] split = l.split(<span class=\"string\">\"_\"</span>);</span><br><span class=\"line\">            locale = <span class=\"keyword\">new</span> Locale(split[<span class=\"number\">0</span>],split[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> locale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLocale</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title\">localeResolver</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyLocaleResolver();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3）、登陆\"><a href=\"#3）、登陆\" class=\"headerlink\" title=\"3）、登陆\"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p>\n<p>1）、禁用模板引擎的缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 禁用缓存</span><br><span class=\"line\">spring.thymeleaf.cache&#x3D;false</span><br></pre></td></tr></table></figure>\n\n<p>2）、页面修改完成以后ctrl+f9：重新编译；</p>\n<p>登陆错误消息的显示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: red\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;msg&#125;\"</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;not #strings.isEmpty(msg)&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4）、拦截器进行登陆检查\"><a href=\"#4）、拦截器进行登陆检查\" class=\"headerlink\" title=\"4）、拦截器进行登陆检查\"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 登陆检查，</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginHandlerInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//目标方法执行之前</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object user = request.getSession().getAttribute(<span class=\"string\">\"loginUser\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//未登陆，返回登陆页面</span></span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"没有权限请先登陆\"</span>);</span><br><span class=\"line\">            request.getRequestDispatcher(<span class=\"string\">\"/index.html\"</span>).forward(request,response);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//已登陆，放行请求</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注册拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span> <span class=\"comment\">//将组件注册在容器</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurerAdapter <span class=\"title\">webMvcConfigurerAdapter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      WebMvcConfigurerAdapter adapter = <span class=\"keyword\">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">              registry.addViewController(<span class=\"string\">\"/\"</span>).setViewName(<span class=\"string\">\"login\"</span>);</span><br><span class=\"line\">              registry.addViewController(<span class=\"string\">\"/index.html\"</span>).setViewName(<span class=\"string\">\"login\"</span>);</span><br><span class=\"line\">              registry.addViewController(<span class=\"string\">\"/main.html\"</span>).setViewName(<span class=\"string\">\"dashboard\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">//注册拦截器</span></span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">              <span class=\"comment\">//super.addInterceptors(registry);</span></span><br><span class=\"line\">              <span class=\"comment\">//静态资源；  *.css , *.js</span></span><br><span class=\"line\">              <span class=\"comment\">//SpringBoot已经做好了静态资源映射</span></span><br><span class=\"line\">              registry.addInterceptor(<span class=\"keyword\">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class=\"string\">\"/**\"</span>)</span><br><span class=\"line\">                      .excludePathPatterns(<span class=\"string\">\"/index.html\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"string\">\"/user/login\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5）、CRUD-员工列表\"><a href=\"#5）、CRUD-员工列表\" class=\"headerlink\" title=\"5）、CRUD-员工列表\"></a>5）、CRUD-员工列表</h3><p>实验要求：</p>\n<p>1）、RestfulCRUD：CRUD满足Rest风格；</p>\n<p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>普通CRUD（uri来区分操作）</th>\n<th>RestfulCRUD</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询</td>\n<td>getEmp</td>\n<td>emp—GET</td>\n</tr>\n<tr>\n<td>添加</td>\n<td>addEmp?xxx</td>\n<td>emp—POST</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>updateEmp?id=xxx&amp;xxx=xx</td>\n<td>emp/{id}—PUT</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>deleteEmp?id=1</td>\n<td>emp/{id}—DELETE</td>\n</tr>\n</tbody></table>\n<p>2）、实验的请求架构;</p>\n<table>\n<thead>\n<tr>\n<th>实验功能</th>\n<th>请求URI</th>\n<th>请求方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询所有员工</td>\n<td>emps</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>查询某个员工(来到修改页面)</td>\n<td>emp/1</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>来到添加页面</td>\n<td>emp</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>添加员工</td>\n<td>emp</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>来到修改页面（查出员工进行信息回显）</td>\n<td>emp/1</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>修改员工</td>\n<td>emp</td>\n<td>PUT</td>\n</tr>\n<tr>\n<td>删除员工</td>\n<td>emp/1</td>\n<td>DELETE</td>\n</tr>\n</tbody></table>\n<p>3）、员工列表：</p>\n<h4 id=\"thymeleaf公共页面元素抽取\"><a href=\"#thymeleaf公共页面元素抽取\" class=\"headerlink\" title=\"thymeleaf公共页面元素抽取\"></a>thymeleaf公共页面元素抽取</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、抽取公共片段</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">\"copy\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">2、引入公共片段</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">\"~&#123;footer :: copy&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">~&#123;templatename::selector&#125;：模板名::选择器</span><br><span class=\"line\">~&#123;templatename::fragmentname&#125;:模板名::片段名</span><br><span class=\"line\"></span><br><span class=\"line\">3、默认效果：</span><br><span class=\"line\">insert的公共片段在div标签中</span><br><span class=\"line\">如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：</span><br><span class=\"line\">行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure>\n\n\n\n<p>三种引入公共片段的th属性：</p>\n<p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p>\n<p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p>\n<p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">\"copy\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">引入方式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">\"footer :: copy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"footer :: copy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">\"footer :: copy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">效果</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>引入片段的时候传入参数： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-2 d-none d-md-block bg-light sidebar\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar-sticky\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav flex-column\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav-item\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav-link active\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                   <span class=\"attr\">th:class</span>=<span class=\"string\">\"$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                   <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/main.html&#125;\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"24\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"24\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 24 24\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">stroke</span>=<span class=\"string\">\"currentColor\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">stroke-linecap</span>=<span class=\"string\">\"round\"</span> <span class=\"attr\">stroke-linejoin</span>=<span class=\"string\">\"round\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"feather feather-home\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">polyline</span> <span class=\"attr\">points</span>=<span class=\"string\">\"9 22 9 12 15 12 15 22\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">polyline</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">                    Dashboard <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>(current)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入侧边栏;传入参数--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">\"commons/bar::#sidebar(activeUri='emps')\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6）、CRUD-员工添加\"><a href=\"#6）、CRUD-员工添加\" class=\"headerlink\" title=\"6）、CRUD-员工添加\"></a>6）、CRUD-员工添加</h3><p>添加页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan@atguigu.com\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check form-check-inline\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>  <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-label\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check form-check-inline\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>  <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-label\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>添加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>提交的数据格式不对：生日：日期；</p>\n<p>2017-12-12；2017/12/12；2017.12.12；</p>\n<p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p>\n<p>2017-12-12—Date； 类型转换，格式化;</p>\n<p>默认日期是按照/的方式；</p>\n<h3 id=\"7）、CRUD-员工修改\"><a href=\"#7）、CRUD-员工修改\" class=\"headerlink\" title=\"7）、CRUD-员工修改\"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--需要区分是员工修改还是添加；--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/emp&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--发送put请求修改员工数据--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span></span><br><span class=\"line\"><span class=\"comment\">2、页面创建一个post表单</span></span><br><span class=\"line\"><span class=\"comment\">3、创建一个input项，name=\"_method\";值就是我们指定的请求方式</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"_method\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"put\"</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;emp!=null&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;emp!=null&#125;\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;emp.id&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>LastName<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastName\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan@atguigu.com\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;emp.email&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Gender<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check form-check-inline\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-label\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check form-check-inline\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">th:checked</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-check-label\"</span>&gt;</span>女<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>department<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--提交的是部门的id--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"department.id\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;dept.id&#125;\"</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"dept:$&#123;depts&#125;\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;dept.departmentName&#125;\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Birth<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"birth\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"zhangsan\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;emp!=null&#125;?'修改':'添加'\"</span>&gt;</span>添加<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8）、CRUD-员工删除\"><a href=\"#8）、CRUD-员工删除\" class=\"headerlink\" title=\"8）、CRUD-员工删除\"></a>8）、CRUD-员工删除</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"emp:$&#123;emps&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;emp.id&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;emp.email&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;emp.gender&#125;==0?'女':'男'\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;emp.department.departmentName&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-sm btn-primary\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/emp/&#125;+$&#123;emp.id&#125;\"</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">th:attr</span>=<span class=\"string\">\"del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-sm btn-danger deleteBtn\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">\".deleteBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//删除当前员工的</span></span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">\"#deleteEmpForm\"</span>).attr(<span class=\"string\">\"action\"</span>,$(<span class=\"keyword\">this</span>).attr(<span class=\"string\">\"del_uri\"</span>)).submit();</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"StringBoot-Thymeleaf","date":"2018-07-22T05:10:11.000Z","_content":"\n## 1、简介\n\n\n\n使用SpringBoot；\n\n**1）、创建SpringBoot应用，选中我们需要的模块；**\n\n**2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来**\n\n**3）、自己编写业务代码；**\n\n\n\n**自动配置原理？**\n\n这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx\n\n```\nxxxxAutoConfiguration：帮我们给容器中自动配置组件；\nxxxxProperties:配置类来封装配置文件的内容；\n\n```\n\n\n\n## 2、SpringBoot对静态资源的映射规则；\n\n```java\n@ConfigurationProperties(prefix = \"spring.resources\", ignoreUnknownFields = false)\npublic class ResourceProperties implements ResourceLoaderAware {\n  //可以设置和静态资源有关的参数，缓存时间等\n```\n\n\n\n```java\n\tWebMvcAuotConfiguration：\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug(\"Default resource handling disabled\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tInteger cachePeriod = this.resourceProperties.getCachePeriod();\n\t\t\tif (!registry.hasMappingForPattern(\"/webjars/**\")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler(\"/webjars/**\")\n\t\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\t\t\"classpath:/META-INF/resources/webjars/\")\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n          \t//静态资源文件夹映射\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations())\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t}\n\n        //配置欢迎页映射\n\t\t@Bean\n\t\tpublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n\t\t\t\tResourceProperties resourceProperties) {\n\t\t\treturn new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),\n\t\t\t\t\tthis.mvcProperties.getStaticPathPattern());\n\t\t}\n\n       //配置喜欢的图标\n\t\t@Configuration\n\t\t@ConditionalOnProperty(value = \"spring.mvc.favicon.enabled\", matchIfMissing = true)\n\t\tpublic static class FaviconConfiguration {\n\n\t\t\tprivate final ResourceProperties resourceProperties;\n\n\t\t\tpublic FaviconConfiguration(ResourceProperties resourceProperties) {\n\t\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n              \t//所有  **/favicon.ico \n\t\t\t\tmapping.setUrlMap(Collections.singletonMap(\"**/favicon.ico\",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler\n\t\t\t\t\t\t.setLocations(this.resourceProperties.getFaviconLocations());\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\n\t\t}\n\n```\n\n\n\n==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==\n\n​\twebjars：以jar包的方式引入静态资源；\n\nhttp://www.webjars.org/\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180203181751.png)\n\nlocalhost:8080/webjars/jquery/3.3.1/jquery.js\n\n```xml\n<!--引入jquery-webjar-->在访问的时候只需要写webjars下面资源的名称即可\n\t\t<dependency>\n\t\t\t<groupId>org.webjars</groupId>\n\t\t\t<artifactId>jquery</artifactId>\n\t\t\t<version>3.3.1</version>\n\t\t</dependency>\n```\n\n\n\n==2）、\"/**\" 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==\n\n```\n\"classpath:/META-INF/resources/\", \n\"classpath:/resources/\",\n\"classpath:/static/\", \n\"classpath:/public/\" \n\"/\"：当前项目的根路径\n```\n\nlocalhost:8080/abc ===  去静态资源文件夹里面找abc\n\n==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被\"/**\"映射；==\n\n​\tlocalhost:8080/   找index页面\n\n==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==\n\n\n\n## 3、模板引擎\n\nJSP、Velocity、Freemarker、Thymeleaf\n\n![](images/template-engine.png)\n\n\n\nSpringBoot推荐的Thymeleaf；\n\n语法更简单，功能更强大；\n\n\n\n### 1、引入thymeleaf；\n\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n          \t2.1.6\n\t\t</dependency>\n切换thymeleaf版本\n<properties>\n\t\t<thymeleaf.version>3.0.9.RELEASE</thymeleaf.version>\n\t\t<!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 -->\n\t\t<!-- thymeleaf2   layout1-->\n\t\t<thymeleaf-layout-dialect.version>2.2.2</thymeleaf-layout-dialect.version>\n  </properties>\n```\n\n\n\n### 2、Thymeleaf使用\n\n```java\n@ConfigurationProperties(prefix = \"spring.thymeleaf\")\npublic class ThymeleafProperties {\n\n\tprivate static final Charset DEFAULT_ENCODING = Charset.forName(\"UTF-8\");\n\n\tprivate static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(\"text/html\");\n\n\tpublic static final String DEFAULT_PREFIX = \"classpath:/templates/\";\n\n\tpublic static final String DEFAULT_SUFFIX = \".html\";\n  \t//\n```\n\n只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；\n\n使用：\n\n1、导入thymeleaf的名称空间\n\n```xml\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n```\n\n2、使用thymeleaf语法；\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <h1>成功！</h1>\n    <!--th:text 将div里面的文本内容设置为 -->\n    <div th:text=\"${hello}\">这是显示欢迎信息</div>\n</body>\n</html>\n```\n\n### 3、语法规则\n\n1）、th:text；改变当前元素里面的文本内容；\n\n​\tth：任意html属性；来替换原生属性的值","source":"_posts/StringBoot-Thymeleaf.md","raw":"---\ntitle: StringBoot-Thymeleaf\n\ndate: 2018/07/22 13:10:11\n\n\n\n---\n\n## 1、简介\n\n\n\n使用SpringBoot；\n\n**1）、创建SpringBoot应用，选中我们需要的模块；**\n\n**2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来**\n\n**3）、自己编写业务代码；**\n\n\n\n**自动配置原理？**\n\n这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx\n\n```\nxxxxAutoConfiguration：帮我们给容器中自动配置组件；\nxxxxProperties:配置类来封装配置文件的内容；\n\n```\n\n\n\n## 2、SpringBoot对静态资源的映射规则；\n\n```java\n@ConfigurationProperties(prefix = \"spring.resources\", ignoreUnknownFields = false)\npublic class ResourceProperties implements ResourceLoaderAware {\n  //可以设置和静态资源有关的参数，缓存时间等\n```\n\n\n\n```java\n\tWebMvcAuotConfiguration：\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug(\"Default resource handling disabled\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tInteger cachePeriod = this.resourceProperties.getCachePeriod();\n\t\t\tif (!registry.hasMappingForPattern(\"/webjars/**\")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler(\"/webjars/**\")\n\t\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\t\t\"classpath:/META-INF/resources/webjars/\")\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n          \t//静态资源文件夹映射\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations())\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t}\n\n        //配置欢迎页映射\n\t\t@Bean\n\t\tpublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n\t\t\t\tResourceProperties resourceProperties) {\n\t\t\treturn new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),\n\t\t\t\t\tthis.mvcProperties.getStaticPathPattern());\n\t\t}\n\n       //配置喜欢的图标\n\t\t@Configuration\n\t\t@ConditionalOnProperty(value = \"spring.mvc.favicon.enabled\", matchIfMissing = true)\n\t\tpublic static class FaviconConfiguration {\n\n\t\t\tprivate final ResourceProperties resourceProperties;\n\n\t\t\tpublic FaviconConfiguration(ResourceProperties resourceProperties) {\n\t\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n              \t//所有  **/favicon.ico \n\t\t\t\tmapping.setUrlMap(Collections.singletonMap(\"**/favicon.ico\",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler\n\t\t\t\t\t\t.setLocations(this.resourceProperties.getFaviconLocations());\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\n\t\t}\n\n```\n\n\n\n==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==\n\n​\twebjars：以jar包的方式引入静态资源；\n\nhttp://www.webjars.org/\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180203181751.png)\n\nlocalhost:8080/webjars/jquery/3.3.1/jquery.js\n\n```xml\n<!--引入jquery-webjar-->在访问的时候只需要写webjars下面资源的名称即可\n\t\t<dependency>\n\t\t\t<groupId>org.webjars</groupId>\n\t\t\t<artifactId>jquery</artifactId>\n\t\t\t<version>3.3.1</version>\n\t\t</dependency>\n```\n\n\n\n==2）、\"/**\" 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==\n\n```\n\"classpath:/META-INF/resources/\", \n\"classpath:/resources/\",\n\"classpath:/static/\", \n\"classpath:/public/\" \n\"/\"：当前项目的根路径\n```\n\nlocalhost:8080/abc ===  去静态资源文件夹里面找abc\n\n==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被\"/**\"映射；==\n\n​\tlocalhost:8080/   找index页面\n\n==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==\n\n\n\n## 3、模板引擎\n\nJSP、Velocity、Freemarker、Thymeleaf\n\n![](images/template-engine.png)\n\n\n\nSpringBoot推荐的Thymeleaf；\n\n语法更简单，功能更强大；\n\n\n\n### 1、引入thymeleaf；\n\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n          \t2.1.6\n\t\t</dependency>\n切换thymeleaf版本\n<properties>\n\t\t<thymeleaf.version>3.0.9.RELEASE</thymeleaf.version>\n\t\t<!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 -->\n\t\t<!-- thymeleaf2   layout1-->\n\t\t<thymeleaf-layout-dialect.version>2.2.2</thymeleaf-layout-dialect.version>\n  </properties>\n```\n\n\n\n### 2、Thymeleaf使用\n\n```java\n@ConfigurationProperties(prefix = \"spring.thymeleaf\")\npublic class ThymeleafProperties {\n\n\tprivate static final Charset DEFAULT_ENCODING = Charset.forName(\"UTF-8\");\n\n\tprivate static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(\"text/html\");\n\n\tpublic static final String DEFAULT_PREFIX = \"classpath:/templates/\";\n\n\tpublic static final String DEFAULT_SUFFIX = \".html\";\n  \t//\n```\n\n只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；\n\n使用：\n\n1、导入thymeleaf的名称空间\n\n```xml\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n```\n\n2、使用thymeleaf语法；\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <h1>成功！</h1>\n    <!--th:text 将div里面的文本内容设置为 -->\n    <div th:text=\"${hello}\">这是显示欢迎信息</div>\n</body>\n</html>\n```\n\n### 3、语法规则\n\n1）、th:text；改变当前元素里面的文本内容；\n\n​\tth：任意html属性；来替换原生属性的值","slug":"StringBoot-Thymeleaf","published":1,"updated":"2020-05-30T15:26:24.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hqp000bsx01b9ibcafq","content":"<h2 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>使用SpringBoot；</p>\n<p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p>\n<p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p>\n<p><strong>3）、自己编写业务代码；</strong></p>\n<p><strong>自动配置原理？</strong></p>\n<p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxxAutoConfiguration：帮我们给容器中自动配置组件；</span><br><span class=\"line\">xxxxProperties:配置类来封装配置文件的内容；</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2、SpringBoot对静态资源的映射规则；\"><a href=\"#2、SpringBoot对静态资源的映射规则；\" class=\"headerlink\" title=\"2、SpringBoot对静态资源的映射规则；\"></a>2、SpringBoot对静态资源的映射规则；</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.resources\"</span>, ignoreUnknownFields = <span class=\"keyword\">false</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceProperties</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResourceLoaderAware</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//可以设置和静态资源有关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebMvcAuotConfiguration：</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">\"Default resource handling disabled\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tInteger cachePeriod = <span class=\"keyword\">this</span>.resourceProperties.getCachePeriod();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">\"/webjars/**\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tcustomizeResourceHandlerRegistration(</span><br><span class=\"line\">\t\t\t\t\tregistry.addResourceHandler(<span class=\"string\">\"/webjars/**\"</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\t.addResourceLocations(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"string\">\"classpath:/META-INF/resources/webjars/\"</span>)</span><br><span class=\"line\">\t\t\t\t\t.setCachePeriod(cachePeriod));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString staticPathPattern = <span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\">         \t<span class=\"comment\">//静态资源文件夹映射</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">\t\t\tcustomizeResourceHandlerRegistration(</span><br><span class=\"line\">\t\t\t\t\tregistry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">\t\t\t\t\t\t\t.addResourceLocations(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">this</span>.resourceProperties.getStaticLocations())</span><br><span class=\"line\">\t\t\t\t\t.setCachePeriod(cachePeriod));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//配置欢迎页映射</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> WelcomePageHandlerMapping <span class=\"title\">welcomePageHandlerMapping</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//配置喜欢的图标</span></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnProperty</span>(value = <span class=\"string\">\"spring.mvc.favicon.enabled\"</span>, matchIfMissing = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FaviconConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ResourceProperties resourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FaviconConfiguration</span><span class=\"params\">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.resourceProperties = resourceProperties;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> SimpleUrlHandlerMapping <span class=\"title\">faviconHandlerMapping</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSimpleUrlHandlerMapping mapping = <span class=\"keyword\">new</span> SimpleUrlHandlerMapping();</span><br><span class=\"line\">\t\t\tmapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">1</span>);</span><br><span class=\"line\">             \t<span class=\"comment\">//所有  **/favicon.ico </span></span><br><span class=\"line\">\t\t\tmapping.setUrlMap(Collections.singletonMap(<span class=\"string\">\"**/favicon.ico\"</span>,</span><br><span class=\"line\">\t\t\t\t\tfaviconRequestHandler()));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mapping;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> ResourceHttpRequestHandler <span class=\"title\">faviconRequestHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tResourceHttpRequestHandler requestHandler = <span class=\"keyword\">new</span> ResourceHttpRequestHandler();</span><br><span class=\"line\">\t\t\trequestHandler</span><br><span class=\"line\">\t\t\t\t\t.setLocations(<span class=\"keyword\">this</span>.resourceProperties.getFaviconLocations());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> requestHandler;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==</p>\n<p>​    webjars：以jar包的方式引入静态资源；</p>\n<p><a href=\"http://www.webjars.org/\" target=\"_blank\" rel=\"noopener\">http://www.webjars.org/</a></p>\n<p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180203181751.png\" alt=\"\"></p>\n<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入jquery-webjar--&gt;</span>在访问的时候只需要写webjars下面资源的名称即可</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.webjars<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jquery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;resources&#x2F;&quot;,</span><br><span class=\"line\">&quot;classpath:&#x2F;static&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;public&#x2F;&quot; </span><br><span class=\"line\">&quot;&#x2F;&quot;：当前项目的根路径</span><br></pre></td></tr></table></figure>\n\n<p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p>\n<p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p>\n<p>​    localhost:8080/   找index页面</p>\n<p>==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==</p>\n<h2 id=\"3、模板引擎\"><a href=\"#3、模板引擎\" class=\"headerlink\" title=\"3、模板引擎\"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p>\n<p><img src=\"images/template-engine.png\" alt=\"\"></p>\n<p>SpringBoot推荐的Thymeleaf；</p>\n<p>语法更简单，功能更强大；</p>\n<h3 id=\"1、引入thymeleaf；\"><a href=\"#1、引入thymeleaf；\" class=\"headerlink\" title=\"1、引入thymeleaf；\"></a>1、引入thymeleaf；</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          \t2.1.6</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">切换thymeleaf版本</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf.version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- thymeleaf2   layout1--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2、Thymeleaf使用\"><a href=\"#2、Thymeleaf使用\" class=\"headerlink\" title=\"2、Thymeleaf使用\"></a>2、Thymeleaf使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.thymeleaf\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThymeleafProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class=\"string\">\"text/html\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PREFIX = <span class=\"string\">\"classpath:/templates/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_SUFFIX = <span class=\"string\">\".html\"</span>;</span><br><span class=\"line\">  \t<span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n\n<p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p>\n<p>使用：</p>\n<p>1、导入thymeleaf的名称空间</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、使用thymeleaf语法；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>成功！<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;hello&#125;\"</span>&gt;</span>这是显示欢迎信息<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、语法规则\"><a href=\"#3、语法规则\" class=\"headerlink\" title=\"3、语法规则\"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p>\n<p>​    th：任意html属性；来替换原生属性的值</p>\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h2 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>使用SpringBoot；</p>\n<p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p>\n<p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p>\n<p><strong>3）、自己编写业务代码；</strong></p>\n<p><strong>自动配置原理？</strong></p>\n<p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxxAutoConfiguration：帮我们给容器中自动配置组件；</span><br><span class=\"line\">xxxxProperties:配置类来封装配置文件的内容；</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2、SpringBoot对静态资源的映射规则；\"><a href=\"#2、SpringBoot对静态资源的映射规则；\" class=\"headerlink\" title=\"2、SpringBoot对静态资源的映射规则；\"></a>2、SpringBoot对静态资源的映射规则；</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.resources\"</span>, ignoreUnknownFields = <span class=\"keyword\">false</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceProperties</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResourceLoaderAware</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//可以设置和静态资源有关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebMvcAuotConfiguration：</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">\"Default resource handling disabled\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tInteger cachePeriod = <span class=\"keyword\">this</span>.resourceProperties.getCachePeriod();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">\"/webjars/**\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tcustomizeResourceHandlerRegistration(</span><br><span class=\"line\">\t\t\t\t\tregistry.addResourceHandler(<span class=\"string\">\"/webjars/**\"</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\t.addResourceLocations(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"string\">\"classpath:/META-INF/resources/webjars/\"</span>)</span><br><span class=\"line\">\t\t\t\t\t.setCachePeriod(cachePeriod));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString staticPathPattern = <span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\">         \t<span class=\"comment\">//静态资源文件夹映射</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">\t\t\tcustomizeResourceHandlerRegistration(</span><br><span class=\"line\">\t\t\t\t\tregistry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">\t\t\t\t\t\t\t.addResourceLocations(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">this</span>.resourceProperties.getStaticLocations())</span><br><span class=\"line\">\t\t\t\t\t.setCachePeriod(cachePeriod));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//配置欢迎页映射</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> WelcomePageHandlerMapping <span class=\"title\">welcomePageHandlerMapping</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//配置喜欢的图标</span></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnProperty</span>(value = <span class=\"string\">\"spring.mvc.favicon.enabled\"</span>, matchIfMissing = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FaviconConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ResourceProperties resourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FaviconConfiguration</span><span class=\"params\">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.resourceProperties = resourceProperties;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> SimpleUrlHandlerMapping <span class=\"title\">faviconHandlerMapping</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSimpleUrlHandlerMapping mapping = <span class=\"keyword\">new</span> SimpleUrlHandlerMapping();</span><br><span class=\"line\">\t\t\tmapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">1</span>);</span><br><span class=\"line\">             \t<span class=\"comment\">//所有  **/favicon.ico </span></span><br><span class=\"line\">\t\t\tmapping.setUrlMap(Collections.singletonMap(<span class=\"string\">\"**/favicon.ico\"</span>,</span><br><span class=\"line\">\t\t\t\t\tfaviconRequestHandler()));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mapping;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> ResourceHttpRequestHandler <span class=\"title\">faviconRequestHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tResourceHttpRequestHandler requestHandler = <span class=\"keyword\">new</span> ResourceHttpRequestHandler();</span><br><span class=\"line\">\t\t\trequestHandler</span><br><span class=\"line\">\t\t\t\t\t.setLocations(<span class=\"keyword\">this</span>.resourceProperties.getFaviconLocations());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> requestHandler;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==</p>\n<p>​    webjars：以jar包的方式引入静态资源；</p>\n<p><a href=\"http://www.webjars.org/\" target=\"_blank\" rel=\"noopener\">http://www.webjars.org/</a></p>\n<p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180203181751.png\" alt=\"\"></p>\n<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入jquery-webjar--&gt;</span>在访问的时候只需要写webjars下面资源的名称即可</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.webjars<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jquery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;resources&#x2F;&quot;,</span><br><span class=\"line\">&quot;classpath:&#x2F;static&#x2F;&quot;, </span><br><span class=\"line\">&quot;classpath:&#x2F;public&#x2F;&quot; </span><br><span class=\"line\">&quot;&#x2F;&quot;：当前项目的根路径</span><br></pre></td></tr></table></figure>\n\n<p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p>\n<p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p>\n<p>​    localhost:8080/   找index页面</p>\n<p>==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==</p>\n<h2 id=\"3、模板引擎\"><a href=\"#3、模板引擎\" class=\"headerlink\" title=\"3、模板引擎\"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p>\n<p><img src=\"images/template-engine.png\" alt=\"\"></p>\n<p>SpringBoot推荐的Thymeleaf；</p>\n<p>语法更简单，功能更强大；</p>\n<h3 id=\"1、引入thymeleaf；\"><a href=\"#1、引入thymeleaf；\" class=\"headerlink\" title=\"1、引入thymeleaf；\"></a>1、引入thymeleaf；</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          \t2.1.6</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">切换thymeleaf版本</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf.version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- thymeleaf2   layout1--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class=\"tag\">&lt;/<span class=\"name\">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2、Thymeleaf使用\"><a href=\"#2、Thymeleaf使用\" class=\"headerlink\" title=\"2、Thymeleaf使用\"></a>2、Thymeleaf使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.thymeleaf\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThymeleafProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class=\"string\">\"text/html\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PREFIX = <span class=\"string\">\"classpath:/templates/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_SUFFIX = <span class=\"string\">\".html\"</span>;</span><br><span class=\"line\">  \t<span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n\n<p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p>\n<p>使用：</p>\n<p>1、导入thymeleaf的名称空间</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、使用thymeleaf语法；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>成功！<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;hello&#125;\"</span>&gt;</span>这是显示欢迎信息<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、语法规则\"><a href=\"#3、语法规则\" class=\"headerlink\" title=\"3、语法规则\"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p>\n<p>​    th：任意html属性；来替换原生属性的值</p>\n"},{"title":"StringBoot-日志框架","date":"2018-05-07T07:10:11.000Z","_content":"\n## 1、日志框架\n\n 小张；开发一个大型系统；\n\n\t\t1、System.out.println(\"\")；将关键数据打印在控制台；去掉？写在一个文件？\n\t\n\t\t2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；\n\t\n\t\t3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？\n\t\n\t\t4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；\n\t\n\t\t5、JDBC---数据库驱动；\n\t\n\t\t\t写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；\n\t\n\t\t\t给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；\n\n\n\n**市面上的日志框架；**\n\nJUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j....\n\n| 日志门面  （日志的抽象层）                                   | 日志实现                                             |\n| ------------------------------------------------------------ | ---------------------------------------------------- |\n| ~~JCL（Jakarta  Commons Logging）~~    SLF4j（Simple  Logging Facade for Java）    **~~jboss-logging~~** | Log4j  JUL（java.util.logging）  Log4j2  **Logback** |\n\n左边选一个门面（抽象层）、右边来选一个实现；\n\n日志门面：  SLF4J；\n\n日志实现：Logback；\n\n\n\nSpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘\n\n\t**==SpringBoot选用 SLF4j和logback；==**\n\n\n\n## 2、SLF4j使用\n\n### 1、如何在系统中使用SLF4j   https://www.slf4j.org\n\n以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；\n\n给系统里面导入slf4j的jar和  logback的实现jar\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HelloWorld {\n  public static void main(String[] args) {\n    Logger logger = LoggerFactory.getLogger(HelloWorld.class);\n    logger.info(\"Hello World\");\n  }\n}\n```\n\n图示；\n\n![images/concrete-bindings.png](images/concrete-bindings.png)\n\n每一个日志的实现框架都有自己的配置文件。使用slf4j以后，**配置文件还是做成日志实现框架自己本身的配置文件；**\n\n### 2、遗留问题\n\na（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx\n\n统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？\n\n![](images/legacy.png)\n\n**如何让系统中所有的日志都统一到slf4j；**\n\n==1、将系统中其他日志框架先排除出去；==\n\n==2、用中间包来替换原有的日志框架；==\n\n==3、我们导入slf4j其他的实现==\n\n\n\n## 3、SpringBoot日志关系\n\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter</artifactId>\n\t\t</dependency>\n```\n\n\n\nSpringBoot使用它来做日志功能；\n\n```xml\n\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-logging</artifactId>\n\t\t</dependency>\n```\n\n底层依赖关系\n\n![](images/搜狗截图20180131220946.png)\n\n总结：\n\n\t1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录\n\t\n\t2）、SpringBoot也把其他的日志都替换成了slf4j；\n\t\n\t3）、中间替换包？\n\n```java\n@SuppressWarnings(\"rawtypes\")\npublic abstract class LogFactory {\n\n    static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = \"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j\";\n\n    static LogFactory logFactory = new SLF4JLogFactory();\n```\n\n![](images/搜狗截图20180131221411.png)\n\n\n\n\t4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？\n\t\n\t\t\tSpring框架用的是commons-logging；\n\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-core</artifactId>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>commons-logging</groupId>\n\t\t\t\t\t<artifactId>commons-logging</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n```\n\n**==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==**\n\n## 4、日志使用；\n\n### 1、默认配置\n\nSpringBoot默认帮我们配置好了日志；\n\n```java\n\t//记录器\n\tLogger logger = LoggerFactory.getLogger(getClass());\n\t@Test\n\tpublic void contextLoads() {\n\t\t//System.out.println();\n\n\t\t//日志的级别；\n\t\t//由低到高   trace<debug<info<warn<error\n\t\t//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效\n\t\tlogger.trace(\"这是trace日志...\");\n\t\tlogger.debug(\"这是debug日志...\");\n\t\t//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别\n\t\tlogger.info(\"这是info日志...\");\n\t\tlogger.warn(\"这是warn日志...\");\n\t\tlogger.error(\"这是error日志...\");\n\n\n\t}\n```\n\n\n\n        日志输出格式：\n    \t\t%d表示日期时间，\n    \t\t%thread表示线程名，\n    \t\t%-5level：级别从左显示5个字符宽度\n    \t\t%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \n    \t\t%msg：日志消息，\n    \t\t%n是换行符\n        -->\n        %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\nSpringBoot修改日志的默认配置\n\n```properties\nlogging.level.com.atguigu=trace\n\n\n#logging.path=\n# 不指定路径在当前项目下生成springboot.log日志\n# 可以指定完整的路径；\n#logging.file=G:/springboot.log\n\n# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件\nlogging.path=/spring/log\n\n#  在控制台输出的日志的格式\nlogging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n\n# 指定文件中日志输出的格式\nlogging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n\n```\n\n| logging.file | logging.path | Example  | Description                        |\n| ------------ | ------------ | -------- | ---------------------------------- |\n| (none)       | (none)       |          | 只在控制台输出                     |\n| 指定文件名   | (none)       | my.log   | 输出日志到my.log文件               |\n| (none)       | 指定目录     | /var/log | 输出到指定目录的 spring.log 文件中 |\n\n### 2、指定配置\n\n给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了\n\n| Logging System          | Customization                                                |\n| ----------------------- | ------------------------------------------------------------ |\n| Logback                 | `logback-spring.xml`, `logback-spring.groovy`, `logback.xml` or `logback.groovy` |\n| Log4j2                  | `log4j2-spring.xml` or `log4j2.xml`                          |\n| JDK (Java Util Logging) | `logging.properties`                                         |\n\nlogback.xml：直接就被日志框架识别了；\n\n**logback-spring.xml**：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能\n\n```xml\n<springProfile name=\"staging\">\n    <!-- configuration to be enabled when the \"staging\" profile is active -->\n  \t可以指定某段配置只在某个环境下生效\n</springProfile>\n\n```\n\n如：\n\n```xml\n<appender name=\"stdout\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <!--\n        日志输出格式：\n\t\t\t%d表示日期时间，\n\t\t\t%thread表示线程名，\n\t\t\t%-5level：级别从左显示5个字符宽度\n\t\t\t%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \n\t\t\t%msg：日志消息，\n\t\t\t%n是换行符\n        -->\n        <layout class=\"ch.qos.logback.classic.PatternLayout\">\n            <springProfile name=\"dev\">\n                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n</pattern>\n            </springProfile>\n            <springProfile name=\"!dev\">\n                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n</pattern>\n            </springProfile>\n        </layout>\n    </appender>\n```\n\n\n\n如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误\n\n `no applicable action for [springProfile]`\n\n## 5、切换日志框架\n\n可以按照slf4j的日志适配图，进行相关的切换；\n\nslf4j+log4j的方式；\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n  <exclusions>\n    <exclusion>\n      <artifactId>logback-classic</artifactId>\n      <groupId>ch.qos.logback</groupId>\n    </exclusion>\n    <exclusion>\n      <artifactId>log4j-over-slf4j</artifactId>\n      <groupId>org.slf4j</groupId>\n    </exclusion>\n  </exclusions>\n</dependency>\n\n<dependency>\n  <groupId>org.slf4j</groupId>\n  <artifactId>slf4j-log4j12</artifactId>\n</dependency>\n\n```\n\n\n\n\n\n切换为log4j2\n\n```xml\n   <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <exclusions>\n                <exclusion>\n                    <artifactId>spring-boot-starter-logging</artifactId>\n                    <groupId>org.springframework.boot</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-log4j2</artifactId>\n</dependency>\n```\n\n-----------------\n\n","source":"_posts/StringBoot-日志框架.md","raw":"---\ntitle: StringBoot-日志框架\n\ndate: 2018/05/07 15:10:11\n\n\n---\n\n## 1、日志框架\n\n 小张；开发一个大型系统；\n\n\t\t1、System.out.println(\"\")；将关键数据打印在控制台；去掉？写在一个文件？\n\t\n\t\t2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；\n\t\n\t\t3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？\n\t\n\t\t4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；\n\t\n\t\t5、JDBC---数据库驱动；\n\t\n\t\t\t写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；\n\t\n\t\t\t给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；\n\n\n\n**市面上的日志框架；**\n\nJUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j....\n\n| 日志门面  （日志的抽象层）                                   | 日志实现                                             |\n| ------------------------------------------------------------ | ---------------------------------------------------- |\n| ~~JCL（Jakarta  Commons Logging）~~    SLF4j（Simple  Logging Facade for Java）    **~~jboss-logging~~** | Log4j  JUL（java.util.logging）  Log4j2  **Logback** |\n\n左边选一个门面（抽象层）、右边来选一个实现；\n\n日志门面：  SLF4J；\n\n日志实现：Logback；\n\n\n\nSpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘\n\n\t**==SpringBoot选用 SLF4j和logback；==**\n\n\n\n## 2、SLF4j使用\n\n### 1、如何在系统中使用SLF4j   https://www.slf4j.org\n\n以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；\n\n给系统里面导入slf4j的jar和  logback的实现jar\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HelloWorld {\n  public static void main(String[] args) {\n    Logger logger = LoggerFactory.getLogger(HelloWorld.class);\n    logger.info(\"Hello World\");\n  }\n}\n```\n\n图示；\n\n![images/concrete-bindings.png](images/concrete-bindings.png)\n\n每一个日志的实现框架都有自己的配置文件。使用slf4j以后，**配置文件还是做成日志实现框架自己本身的配置文件；**\n\n### 2、遗留问题\n\na（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx\n\n统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？\n\n![](images/legacy.png)\n\n**如何让系统中所有的日志都统一到slf4j；**\n\n==1、将系统中其他日志框架先排除出去；==\n\n==2、用中间包来替换原有的日志框架；==\n\n==3、我们导入slf4j其他的实现==\n\n\n\n## 3、SpringBoot日志关系\n\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter</artifactId>\n\t\t</dependency>\n```\n\n\n\nSpringBoot使用它来做日志功能；\n\n```xml\n\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-logging</artifactId>\n\t\t</dependency>\n```\n\n底层依赖关系\n\n![](images/搜狗截图20180131220946.png)\n\n总结：\n\n\t1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录\n\t\n\t2）、SpringBoot也把其他的日志都替换成了slf4j；\n\t\n\t3）、中间替换包？\n\n```java\n@SuppressWarnings(\"rawtypes\")\npublic abstract class LogFactory {\n\n    static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = \"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j\";\n\n    static LogFactory logFactory = new SLF4JLogFactory();\n```\n\n![](images/搜狗截图20180131221411.png)\n\n\n\n\t4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？\n\t\n\t\t\tSpring框架用的是commons-logging；\n\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-core</artifactId>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>commons-logging</groupId>\n\t\t\t\t\t<artifactId>commons-logging</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n```\n\n**==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==**\n\n## 4、日志使用；\n\n### 1、默认配置\n\nSpringBoot默认帮我们配置好了日志；\n\n```java\n\t//记录器\n\tLogger logger = LoggerFactory.getLogger(getClass());\n\t@Test\n\tpublic void contextLoads() {\n\t\t//System.out.println();\n\n\t\t//日志的级别；\n\t\t//由低到高   trace<debug<info<warn<error\n\t\t//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效\n\t\tlogger.trace(\"这是trace日志...\");\n\t\tlogger.debug(\"这是debug日志...\");\n\t\t//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别\n\t\tlogger.info(\"这是info日志...\");\n\t\tlogger.warn(\"这是warn日志...\");\n\t\tlogger.error(\"这是error日志...\");\n\n\n\t}\n```\n\n\n\n        日志输出格式：\n    \t\t%d表示日期时间，\n    \t\t%thread表示线程名，\n    \t\t%-5level：级别从左显示5个字符宽度\n    \t\t%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \n    \t\t%msg：日志消息，\n    \t\t%n是换行符\n        -->\n        %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\nSpringBoot修改日志的默认配置\n\n```properties\nlogging.level.com.atguigu=trace\n\n\n#logging.path=\n# 不指定路径在当前项目下生成springboot.log日志\n# 可以指定完整的路径；\n#logging.file=G:/springboot.log\n\n# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件\nlogging.path=/spring/log\n\n#  在控制台输出的日志的格式\nlogging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n\n# 指定文件中日志输出的格式\nlogging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n\n```\n\n| logging.file | logging.path | Example  | Description                        |\n| ------------ | ------------ | -------- | ---------------------------------- |\n| (none)       | (none)       |          | 只在控制台输出                     |\n| 指定文件名   | (none)       | my.log   | 输出日志到my.log文件               |\n| (none)       | 指定目录     | /var/log | 输出到指定目录的 spring.log 文件中 |\n\n### 2、指定配置\n\n给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了\n\n| Logging System          | Customization                                                |\n| ----------------------- | ------------------------------------------------------------ |\n| Logback                 | `logback-spring.xml`, `logback-spring.groovy`, `logback.xml` or `logback.groovy` |\n| Log4j2                  | `log4j2-spring.xml` or `log4j2.xml`                          |\n| JDK (Java Util Logging) | `logging.properties`                                         |\n\nlogback.xml：直接就被日志框架识别了；\n\n**logback-spring.xml**：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能\n\n```xml\n<springProfile name=\"staging\">\n    <!-- configuration to be enabled when the \"staging\" profile is active -->\n  \t可以指定某段配置只在某个环境下生效\n</springProfile>\n\n```\n\n如：\n\n```xml\n<appender name=\"stdout\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <!--\n        日志输出格式：\n\t\t\t%d表示日期时间，\n\t\t\t%thread表示线程名，\n\t\t\t%-5level：级别从左显示5个字符宽度\n\t\t\t%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \n\t\t\t%msg：日志消息，\n\t\t\t%n是换行符\n        -->\n        <layout class=\"ch.qos.logback.classic.PatternLayout\">\n            <springProfile name=\"dev\">\n                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n</pattern>\n            </springProfile>\n            <springProfile name=\"!dev\">\n                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n</pattern>\n            </springProfile>\n        </layout>\n    </appender>\n```\n\n\n\n如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误\n\n `no applicable action for [springProfile]`\n\n## 5、切换日志框架\n\n可以按照slf4j的日志适配图，进行相关的切换；\n\nslf4j+log4j的方式；\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n  <exclusions>\n    <exclusion>\n      <artifactId>logback-classic</artifactId>\n      <groupId>ch.qos.logback</groupId>\n    </exclusion>\n    <exclusion>\n      <artifactId>log4j-over-slf4j</artifactId>\n      <groupId>org.slf4j</groupId>\n    </exclusion>\n  </exclusions>\n</dependency>\n\n<dependency>\n  <groupId>org.slf4j</groupId>\n  <artifactId>slf4j-log4j12</artifactId>\n</dependency>\n\n```\n\n\n\n\n\n切换为log4j2\n\n```xml\n   <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <exclusions>\n                <exclusion>\n                    <artifactId>spring-boot-starter-logging</artifactId>\n                    <groupId>org.springframework.boot</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-log4j2</artifactId>\n</dependency>\n```\n\n-----------------\n\n","slug":"StringBoot-日志框架","published":1,"updated":"2020-05-30T15:26:12.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hqr000csx01ax1a9yj2","content":"<h2 id=\"1、日志框架\"><a href=\"#1、日志框架\" class=\"headerlink\" title=\"1、日志框架\"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p>\n<pre><code>1、System.out.println(&quot;&quot;)；将关键数据打印在控制台；去掉？写在一个文件？\n\n2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；\n\n3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？\n\n4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；\n\n5、JDBC---数据库驱动；\n\n    写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；\n\n    给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</code></pre><p><strong>市面上的日志框架；</strong></p>\n<p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p>\n<table>\n<thead>\n<tr>\n<th>日志门面  （日志的抽象层）</th>\n<th>日志实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td>\n<td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td>\n</tr>\n</tbody></table>\n<p>左边选一个门面（抽象层）、右边来选一个实现；</p>\n<p>日志门面：  SLF4J；</p>\n<p>日志实现：Logback；</p>\n<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p>\n<pre><code>**==SpringBoot选用 SLF4j和logback；==**</code></pre><h2 id=\"2、SLF4j使用\"><a href=\"#2、SLF4j使用\" class=\"headerlink\" title=\"2、SLF4j使用\"></a>2、SLF4j使用</h2><h3 id=\"1、如何在系统中使用SLF4j-https-www-slf4j-org\"><a href=\"#1、如何在系统中使用SLF4j-https-www-slf4j-org\" class=\"headerlink\" title=\"1、如何在系统中使用SLF4j   https://www.slf4j.org\"></a>1、如何在系统中使用SLF4j   <a href=\"https://www.slf4j.org\" target=\"_blank\" rel=\"noopener\">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>\n<p>给系统里面导入slf4j的jar和  logback的实现jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    logger.info(<span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>图示；</p>\n<p><img src=\"images/concrete-bindings.png\" alt=\"images/concrete-bindings.png\"></p>\n<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p>\n<h3 id=\"2、遗留问题\"><a href=\"#2、遗留问题\" class=\"headerlink\" title=\"2、遗留问题\"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p>\n<p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p>\n<p><img src=\"images/legacy.png\" alt=\"\"></p>\n<p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p>\n<p>==1、将系统中其他日志框架先排除出去；==</p>\n<p>==2、用中间包来替换原有的日志框架；==</p>\n<p>==3、我们导入slf4j其他的实现==</p>\n<h2 id=\"3、SpringBoot日志关系\"><a href=\"#3、SpringBoot日志关系\" class=\"headerlink\" title=\"3、SpringBoot日志关系\"></a>3、SpringBoot日志关系</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>SpringBoot使用它来做日志功能；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>底层依赖关系</p>\n<p><img src=\"images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131220946.png\" alt=\"\"></p>\n<p>总结：</p>\n<pre><code>1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录\n\n2）、SpringBoot也把其他的日志都替换成了slf4j；\n\n3）、中间替换包？</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"rawtypes\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class=\"string\">\"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> LogFactory logFactory = <span class=\"keyword\">new</span> SLF4JLogFactory();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131221411.png\" alt=\"\"></p>\n<pre><code>4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？\n\n        Spring框架用的是commons-logging；</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==</strong></p>\n<h2 id=\"4、日志使用；\"><a href=\"#4、日志使用；\" class=\"headerlink\" title=\"4、日志使用；\"></a>4、日志使用；</h2><h3 id=\"1、默认配置\"><a href=\"#1、默认配置\" class=\"headerlink\" title=\"1、默认配置\"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//记录器</span></span><br><span class=\"line\">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//System.out.println();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//日志的级别；</span></span><br><span class=\"line\">\t<span class=\"comment\">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class=\"line\">\t<span class=\"comment\">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span></span><br><span class=\"line\">\tlogger.trace(<span class=\"string\">\"这是trace日志...\"</span>);</span><br><span class=\"line\">\tlogger.debug(<span class=\"string\">\"这是debug日志...\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class=\"line\">\tlogger.info(<span class=\"string\">\"这是info日志...\"</span>);</span><br><span class=\"line\">\tlogger.warn(<span class=\"string\">\"这是warn日志...\"</span>);</span><br><span class=\"line\">\tlogger.error(<span class=\"string\">\"这是error日志...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<pre><code>日志输出格式：\n    %d表示日期时间，\n    %thread表示线程名，\n    %-5level：级别从左显示5个字符宽度\n    %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \n    %msg：日志消息，\n    %n是换行符\n--&gt;\n%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">logging.level.com.atguigu</span>=<span class=\"string\">trace</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#logging.path=</span></span><br><span class=\"line\"><span class=\"comment\"># 不指定路径在当前项目下生成springboot.log日志</span></span><br><span class=\"line\"><span class=\"comment\"># 可以指定完整的路径；</span></span><br><span class=\"line\"><span class=\"comment\">#logging.file=G:/springboot.log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span></span><br><span class=\"line\"><span class=\"meta\">logging.path</span>=<span class=\"string\">/spring/log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  在控制台输出的日志的格式</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.console</span>=<span class=\"string\">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class=\"line\"><span class=\"comment\"># 指定文件中日志输出的格式</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.file</span>=<span class=\"string\">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>logging.file</th>\n<th>logging.path</th>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(none)</td>\n<td>(none)</td>\n<td></td>\n<td>只在控制台输出</td>\n</tr>\n<tr>\n<td>指定文件名</td>\n<td>(none)</td>\n<td>my.log</td>\n<td>输出日志到my.log文件</td>\n</tr>\n<tr>\n<td>(none)</td>\n<td>指定目录</td>\n<td>/var/log</td>\n<td>输出到指定目录的 spring.log 文件中</td>\n</tr>\n</tbody></table>\n<h3 id=\"2、指定配置\"><a href=\"#2、指定配置\" class=\"headerlink\" title=\"2、指定配置\"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>\n<table>\n<thead>\n<tr>\n<th>Logging System</th>\n<th>Customization</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logback</td>\n<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>\n</tr>\n<tr>\n<td>Log4j2</td>\n<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>\n</tr>\n<tr>\n<td>JDK (Java Util Logging)</td>\n<td><code>logging.properties</code></td>\n</tr>\n</tbody></table>\n<p>logback.xml：直接就被日志框架识别了；</p>\n<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">\"staging\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- configuration to be enabled when the \"staging\" profile is active --&gt;</span></span><br><span class=\"line\">  \t可以指定某段配置只在某个环境下生效</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"stdout\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        日志输出格式：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%d表示日期时间，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%thread表示线程名，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%-5level：级别从左显示5个字符宽度</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%msg：日志消息，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%n是换行符</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dev\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">\"!dev\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>\n<p> <code>no applicable action for [springProfile]</code></p>\n<h2 id=\"5、切换日志框架\"><a href=\"#5、切换日志框架\" class=\"headerlink\" title=\"5、切换日志框架\"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p>\n<p>slf4j+log4j的方式；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>切换为log4j2</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h2 id=\"1、日志框架\"><a href=\"#1、日志框架\" class=\"headerlink\" title=\"1、日志框架\"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p>\n<pre><code>1、System.out.println(&quot;&quot;)；将关键数据打印在控制台；去掉？写在一个文件？\n\n2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；\n\n3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？\n\n4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；\n\n5、JDBC---数据库驱动；\n\n    写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；\n\n    给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</code></pre><p><strong>市面上的日志框架；</strong></p>\n<p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p>\n<table>\n<thead>\n<tr>\n<th>日志门面  （日志的抽象层）</th>\n<th>日志实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td>\n<td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td>\n</tr>\n</tbody></table>\n<p>左边选一个门面（抽象层）、右边来选一个实现；</p>\n<p>日志门面：  SLF4J；</p>\n<p>日志实现：Logback；</p>\n<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p>\n<pre><code>**==SpringBoot选用 SLF4j和logback；==**</code></pre><h2 id=\"2、SLF4j使用\"><a href=\"#2、SLF4j使用\" class=\"headerlink\" title=\"2、SLF4j使用\"></a>2、SLF4j使用</h2><h3 id=\"1、如何在系统中使用SLF4j-https-www-slf4j-org\"><a href=\"#1、如何在系统中使用SLF4j-https-www-slf4j-org\" class=\"headerlink\" title=\"1、如何在系统中使用SLF4j   https://www.slf4j.org\"></a>1、如何在系统中使用SLF4j   <a href=\"https://www.slf4j.org\" target=\"_blank\" rel=\"noopener\">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>\n<p>给系统里面导入slf4j的jar和  logback的实现jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    logger.info(<span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>图示；</p>\n<p><img src=\"images/concrete-bindings.png\" alt=\"images/concrete-bindings.png\"></p>\n<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p>\n<h3 id=\"2、遗留问题\"><a href=\"#2、遗留问题\" class=\"headerlink\" title=\"2、遗留问题\"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p>\n<p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p>\n<p><img src=\"images/legacy.png\" alt=\"\"></p>\n<p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p>\n<p>==1、将系统中其他日志框架先排除出去；==</p>\n<p>==2、用中间包来替换原有的日志框架；==</p>\n<p>==3、我们导入slf4j其他的实现==</p>\n<h2 id=\"3、SpringBoot日志关系\"><a href=\"#3、SpringBoot日志关系\" class=\"headerlink\" title=\"3、SpringBoot日志关系\"></a>3、SpringBoot日志关系</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>SpringBoot使用它来做日志功能；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>底层依赖关系</p>\n<p><img src=\"images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131220946.png\" alt=\"\"></p>\n<p>总结：</p>\n<pre><code>1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录\n\n2）、SpringBoot也把其他的日志都替换成了slf4j；\n\n3）、中间替换包？</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"rawtypes\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class=\"string\">\"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> LogFactory logFactory = <span class=\"keyword\">new</span> SLF4JLogFactory();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131221411.png\" alt=\"\"></p>\n<pre><code>4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？\n\n        Spring框架用的是commons-logging；</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==</strong></p>\n<h2 id=\"4、日志使用；\"><a href=\"#4、日志使用；\" class=\"headerlink\" title=\"4、日志使用；\"></a>4、日志使用；</h2><h3 id=\"1、默认配置\"><a href=\"#1、默认配置\" class=\"headerlink\" title=\"1、默认配置\"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//记录器</span></span><br><span class=\"line\">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//System.out.println();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//日志的级别；</span></span><br><span class=\"line\">\t<span class=\"comment\">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class=\"line\">\t<span class=\"comment\">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span></span><br><span class=\"line\">\tlogger.trace(<span class=\"string\">\"这是trace日志...\"</span>);</span><br><span class=\"line\">\tlogger.debug(<span class=\"string\">\"这是debug日志...\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class=\"line\">\tlogger.info(<span class=\"string\">\"这是info日志...\"</span>);</span><br><span class=\"line\">\tlogger.warn(<span class=\"string\">\"这是warn日志...\"</span>);</span><br><span class=\"line\">\tlogger.error(<span class=\"string\">\"这是error日志...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<pre><code>日志输出格式：\n    %d表示日期时间，\n    %thread表示线程名，\n    %-5level：级别从左显示5个字符宽度\n    %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \n    %msg：日志消息，\n    %n是换行符\n--&gt;\n%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">logging.level.com.atguigu</span>=<span class=\"string\">trace</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#logging.path=</span></span><br><span class=\"line\"><span class=\"comment\"># 不指定路径在当前项目下生成springboot.log日志</span></span><br><span class=\"line\"><span class=\"comment\"># 可以指定完整的路径；</span></span><br><span class=\"line\"><span class=\"comment\">#logging.file=G:/springboot.log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span></span><br><span class=\"line\"><span class=\"meta\">logging.path</span>=<span class=\"string\">/spring/log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  在控制台输出的日志的格式</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.console</span>=<span class=\"string\">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class=\"line\"><span class=\"comment\"># 指定文件中日志输出的格式</span></span><br><span class=\"line\"><span class=\"meta\">logging.pattern.file</span>=<span class=\"string\">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>logging.file</th>\n<th>logging.path</th>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(none)</td>\n<td>(none)</td>\n<td></td>\n<td>只在控制台输出</td>\n</tr>\n<tr>\n<td>指定文件名</td>\n<td>(none)</td>\n<td>my.log</td>\n<td>输出日志到my.log文件</td>\n</tr>\n<tr>\n<td>(none)</td>\n<td>指定目录</td>\n<td>/var/log</td>\n<td>输出到指定目录的 spring.log 文件中</td>\n</tr>\n</tbody></table>\n<h3 id=\"2、指定配置\"><a href=\"#2、指定配置\" class=\"headerlink\" title=\"2、指定配置\"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>\n<table>\n<thead>\n<tr>\n<th>Logging System</th>\n<th>Customization</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logback</td>\n<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>\n</tr>\n<tr>\n<td>Log4j2</td>\n<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>\n</tr>\n<tr>\n<td>JDK (Java Util Logging)</td>\n<td><code>logging.properties</code></td>\n</tr>\n</tbody></table>\n<p>logback.xml：直接就被日志框架识别了；</p>\n<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">\"staging\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- configuration to be enabled when the \"staging\" profile is active --&gt;</span></span><br><span class=\"line\">  \t可以指定某段配置只在某个环境下生效</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"stdout\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        日志输出格式：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%d表示日期时间，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%thread表示线程名，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%-5level：级别从左显示5个字符宽度</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%msg：日志消息，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t%n是换行符</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dev\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">\"!dev\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>\n<p> <code>no applicable action for [springProfile]</code></p>\n<h2 id=\"5、切换日志框架\"><a href=\"#5、切换日志框架\" class=\"headerlink\" title=\"5、切换日志框架\"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p>\n<p>slf4j+log4j的方式；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>切换为log4j2</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"StringBoot-自动配置","date":"2018-08-22T14:01:09.000Z","_content":"\nhttps://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications\n\n### 1. Spring MVC auto-configuration\n\nSpring Boot 自动配置好了SpringMVC\n\n以下是SpringBoot对SpringMVC的默认配置:**==（WebMvcAutoConfiguration）==**\n\n- Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.\n\n  - 自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））\n  - ContentNegotiatingViewResolver：组合所有的视图解析器的；\n  - ==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==\n\n- Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars\n\n- Static `index.html` support. 静态首页访问\n\n- Custom `Favicon` support (see below).  favicon.ico\n\n  \n\n- 自动注册了 of `Converter`, `GenericConverter`, `Formatter` beans.\n\n  - Converter：转换器；  public String hello(User user)：类型转换使用Converter\n  - `Formatter`  格式化器；  2017.12.17===Date；\n\n```java\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"date-format\")//在文件中配置日期格式化的规则\n\t\tpublic Formatter<Date> dateFormatter() {\n\t\t\treturn new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件\n\t\t}\n```\n\n​\t==自己添加的格式化器转换器，我们只需要放在容器中即可==\n\n- Support for `HttpMessageConverters` (see below).\n\n  - HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User---Json；\n\n  - `HttpMessageConverters` 是从容器中确定；获取所有的HttpMessageConverter；\n\n    ==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==\n\n    \n\n- Automatic registration of `MessageCodesResolver` (see below).定义错误代码生成规则\n\n- Automatic use of a `ConfigurableWebBindingInitializer` bean (see below).\n\n  ==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==\n\n  ```\n  初始化WebDataBinder；\n  请求数据=====JavaBean；\n  ```\n\n**org.springframework.boot.autoconfigure.web：web的所有自动场景；**\n\nIf you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own `@Configuration` class of type `WebMvcConfigurerAdapter`, but **without** `@EnableWebMvc`. If you wish to provide custom instances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter` or `ExceptionHandlerExceptionResolver` you can declare a `WebMvcRegistrationsAdapter` instance providing such components.\n\nIf you want to take complete control of Spring MVC, you can add your own `@Configuration` annotated with `@EnableWebMvc`.\n\n### 2、扩展SpringMVC\n\n```xml\n    <mvc:view-controller path=\"/hello\" view-name=\"success\"/>\n    <mvc:interceptors>\n        <mvc:interceptor>\n            <mvc:mapping path=\"/hello\"/>\n            <bean></bean>\n        </mvc:interceptor>\n    </mvc:interceptors>\n```\n\n**==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==**;\n\n既保留了所有的自动配置，也能用我们扩展的配置；\n\n```java\n//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n       // super.addViewControllers(registry);\n        //浏览器发送 /atguigu 请求来到 success\n        registry.addViewController(\"/atguigu\").setViewName(\"success\");\n    }\n}\n```\n\n原理：\n\n​\t1）、WebMvcAutoConfiguration是SpringMVC的自动配置类\n\n​\t2）、在做其他自动配置时会导入；@Import(**EnableWebMvcConfiguration**.class)\n\n```java\n    @Configuration\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n      private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();\n\n\t //从容器中获取所有的WebMvcConfigurer\n      @Autowired(required = false)\n      public void setConfigurers(List<WebMvcConfigurer> configurers) {\n          if (!CollectionUtils.isEmpty(configurers)) {\n              this.configurers.addWebMvcConfigurers(configurers);\n            \t//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  \n            \t@Override\n             // public void addViewControllers(ViewControllerRegistry registry) {\n              //    for (WebMvcConfigurer delegate : this.delegates) {\n               //       delegate.addViewControllers(registry);\n               //   }\n              }\n          }\n\t}\n```\n\n​\t3）、容器中所有的WebMvcConfigurer都会一起起作用；\n\n​\t4）、我们的配置类也会被调用；\n\n​\t效果：SpringMVC的自动配置和我们的扩展配置都会起作用；\n\n### 3、全面接管SpringMVC；\n\nSpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了\n\n**我们需要在配置类中添加@EnableWebMvc即可；**\n\n```java\n//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\n@EnableWebMvc\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n       // super.addViewControllers(registry);\n        //浏览器发送 /atguigu 请求来到 success\n        registry.addViewController(\"/atguigu\").setViewName(\"success\");\n    }\n}\n```\n\n原理：\n\n为什么@EnableWebMvc自动配置就失效了；\n\n1）@EnableWebMvc的核心\n\n```java\n@Import(DelegatingWebMvcConfiguration.class)\npublic @interface EnableWebMvc {\n```\n\n2）、\n\n```java\n@Configuration\npublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\n```\n\n3）、\n\n```java\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n\t\tWebMvcConfigurerAdapter.class })\n//容器中没有这个组件的时候，这个自动配置类才生效\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n\t\tValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n```\n\n4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；\n\n5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；\n\n\n\n## 5、如何修改SpringBoot的默认配置\n\n模式：\n\n​\t1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；\n\n​\t2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置\n\n​\t3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置","source":"_posts/StringBoot-自动配置.md","raw":"---\ntitle: StringBoot-自动配置\n\ndate: 2018/08/22 22:01:09\n---\n\nhttps://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications\n\n### 1. Spring MVC auto-configuration\n\nSpring Boot 自动配置好了SpringMVC\n\n以下是SpringBoot对SpringMVC的默认配置:**==（WebMvcAutoConfiguration）==**\n\n- Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.\n\n  - 自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））\n  - ContentNegotiatingViewResolver：组合所有的视图解析器的；\n  - ==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==\n\n- Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars\n\n- Static `index.html` support. 静态首页访问\n\n- Custom `Favicon` support (see below).  favicon.ico\n\n  \n\n- 自动注册了 of `Converter`, `GenericConverter`, `Formatter` beans.\n\n  - Converter：转换器；  public String hello(User user)：类型转换使用Converter\n  - `Formatter`  格式化器；  2017.12.17===Date；\n\n```java\n\t\t@Bean\n\t\t@ConditionalOnProperty(prefix = \"spring.mvc\", name = \"date-format\")//在文件中配置日期格式化的规则\n\t\tpublic Formatter<Date> dateFormatter() {\n\t\t\treturn new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件\n\t\t}\n```\n\n​\t==自己添加的格式化器转换器，我们只需要放在容器中即可==\n\n- Support for `HttpMessageConverters` (see below).\n\n  - HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User---Json；\n\n  - `HttpMessageConverters` 是从容器中确定；获取所有的HttpMessageConverter；\n\n    ==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==\n\n    \n\n- Automatic registration of `MessageCodesResolver` (see below).定义错误代码生成规则\n\n- Automatic use of a `ConfigurableWebBindingInitializer` bean (see below).\n\n  ==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==\n\n  ```\n  初始化WebDataBinder；\n  请求数据=====JavaBean；\n  ```\n\n**org.springframework.boot.autoconfigure.web：web的所有自动场景；**\n\nIf you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own `@Configuration` class of type `WebMvcConfigurerAdapter`, but **without** `@EnableWebMvc`. If you wish to provide custom instances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter` or `ExceptionHandlerExceptionResolver` you can declare a `WebMvcRegistrationsAdapter` instance providing such components.\n\nIf you want to take complete control of Spring MVC, you can add your own `@Configuration` annotated with `@EnableWebMvc`.\n\n### 2、扩展SpringMVC\n\n```xml\n    <mvc:view-controller path=\"/hello\" view-name=\"success\"/>\n    <mvc:interceptors>\n        <mvc:interceptor>\n            <mvc:mapping path=\"/hello\"/>\n            <bean></bean>\n        </mvc:interceptor>\n    </mvc:interceptors>\n```\n\n**==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==**;\n\n既保留了所有的自动配置，也能用我们扩展的配置；\n\n```java\n//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n       // super.addViewControllers(registry);\n        //浏览器发送 /atguigu 请求来到 success\n        registry.addViewController(\"/atguigu\").setViewName(\"success\");\n    }\n}\n```\n\n原理：\n\n​\t1）、WebMvcAutoConfiguration是SpringMVC的自动配置类\n\n​\t2）、在做其他自动配置时会导入；@Import(**EnableWebMvcConfiguration**.class)\n\n```java\n    @Configuration\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {\n      private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();\n\n\t //从容器中获取所有的WebMvcConfigurer\n      @Autowired(required = false)\n      public void setConfigurers(List<WebMvcConfigurer> configurers) {\n          if (!CollectionUtils.isEmpty(configurers)) {\n              this.configurers.addWebMvcConfigurers(configurers);\n            \t//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  \n            \t@Override\n             // public void addViewControllers(ViewControllerRegistry registry) {\n              //    for (WebMvcConfigurer delegate : this.delegates) {\n               //       delegate.addViewControllers(registry);\n               //   }\n              }\n          }\n\t}\n```\n\n​\t3）、容器中所有的WebMvcConfigurer都会一起起作用；\n\n​\t4）、我们的配置类也会被调用；\n\n​\t效果：SpringMVC的自动配置和我们的扩展配置都会起作用；\n\n### 3、全面接管SpringMVC；\n\nSpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了\n\n**我们需要在配置类中添加@EnableWebMvc即可；**\n\n```java\n//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能\n@EnableWebMvc\n@Configuration\npublic class MyMvcConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n       // super.addViewControllers(registry);\n        //浏览器发送 /atguigu 请求来到 success\n        registry.addViewController(\"/atguigu\").setViewName(\"success\");\n    }\n}\n```\n\n原理：\n\n为什么@EnableWebMvc自动配置就失效了；\n\n1）@EnableWebMvc的核心\n\n```java\n@Import(DelegatingWebMvcConfiguration.class)\npublic @interface EnableWebMvc {\n```\n\n2）、\n\n```java\n@Configuration\npublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {\n```\n\n3）、\n\n```java\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n\t\tWebMvcConfigurerAdapter.class })\n//容器中没有这个组件的时候，这个自动配置类才生效\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n\t\tValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n```\n\n4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；\n\n5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；\n\n\n\n## 5、如何修改SpringBoot的默认配置\n\n模式：\n\n​\t1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；\n\n​\t2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置\n\n​\t3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置","slug":"StringBoot-自动配置","published":1,"updated":"2020-05-30T15:26:35.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hqs000dsx01hjf38onp","content":"<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p>\n<h3 id=\"1-Spring-MVC-auto-configuration\"><a href=\"#1-Spring-MVC-auto-configuration\" class=\"headerlink\" title=\"1. Spring MVC auto-configuration\"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p>\n<p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p>\n<ul>\n<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>\n<ul>\n<li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li>\n<li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li>\n<li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li>\n</ul>\n</li>\n<li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p>\n</li>\n<li><p>Static <code>index.html</code> support. 静态首页访问</p>\n</li>\n<li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p>\n</li>\n</ul>\n<ul>\n<li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>\n<ul>\n<li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li>\n<li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty</span>(prefix = <span class=\"string\">\"spring.mvc\"</span>, name = <span class=\"string\">\"date-format\"</span>)<span class=\"comment\">//在文件中配置日期格式化的规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Formatter&lt;Date&gt; <span class=\"title\">dateFormatter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DateFormatter(<span class=\"keyword\">this</span>.mvcProperties.getDateFormat());<span class=\"comment\">//日期格式化组件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p>\n<ul>\n<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>\n<ul>\n<li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p>\n</li>\n<li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p>\n<p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p>\n</li>\n<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>\n<p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">初始化WebDataBinder；</span><br><span class=\"line\">请求数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;JavaBean；</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p>\n<p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href=\"https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc\" target=\"_blank\" rel=\"noopener\">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p>\n<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p>\n<h3 id=\"2、扩展SpringMVC\"><a href=\"#2、扩展SpringMVC\" class=\"headerlink\" title=\"2、扩展SpringMVC\"></a>2、扩展SpringMVC</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:view-controller</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/hello\"</span> <span class=\"attr\">view-name</span>=<span class=\"string\">\"success\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/hello\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</p>\n<p>既保留了所有的自动配置，也能用我们扩展的配置；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// super.addViewControllers(registry);</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">\"/atguigu\"</span>).setViewName(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原理：</p>\n<p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p>\n<p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnableWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WebMvcConfigurerComposite configurers = <span class=\"keyword\">new</span> WebMvcConfigurerComposite();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//从容器中获取所有的WebMvcConfigurer</span></span><br><span class=\"line\">     <span class=\"meta\">@Autowired</span>(required = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigurers</span><span class=\"params\">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class=\"line\">           \t<span class=\"comment\">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span></span><br><span class=\"line\">           \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"comment\">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class=\"line\">             <span class=\"comment\">//    for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class=\"line\">              <span class=\"comment\">//       delegate.addViewControllers(registry);</span></span><br><span class=\"line\">              <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p>\n<p>​    4）、我们的配置类也会被调用；</p>\n<p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p>\n<h3 id=\"3、全面接管SpringMVC；\"><a href=\"#3、全面接管SpringMVC；\" class=\"headerlink\" title=\"3、全面接管SpringMVC；\"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p>\n<p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// super.addViewControllers(registry);</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">\"/atguigu\"</span>).setViewName(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原理：</p>\n<p>为什么@EnableWebMvc自动配置就失效了；</p>\n<p>1）@EnableWebMvc的核心</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import</span>(DelegatingWebMvcConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableWebMvc</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>2）、</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>3）、</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(&#123; Servlet<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">DispatcherServlet</span>.<span class=\"title\">class</span>,</span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"title\">WebMvcConfigurerAdapter</span>.<span class=\"title\">class</span> &#125;)</span></span><br><span class=\"line\"><span class=\"class\">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ConditionalOnMissingBean</span>(<span class=\"title\">WebMvcConfigurationSupport</span>.<span class=\"title\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">AutoConfigureOrder</span>(<span class=\"title\">Ordered</span>.<span class=\"title\">HIGHEST_PRECEDENCE</span> + 10)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">AutoConfigureAfter</span>(</span>&#123; DispatcherServletAutoConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>,</span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"title\">ValidationAutoConfiguration</span>.<span class=\"title\">class</span> &#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p>\n<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p>\n<h2 id=\"5、如何修改SpringBoot的默认配置\"><a href=\"#5、如何修改SpringBoot的默认配置\" class=\"headerlink\" title=\"5、如何修改SpringBoot的默认配置\"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p>\n<p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>\n<p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p>\n<p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p>\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<p><a href=\"https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p>\n<h3 id=\"1-Spring-MVC-auto-configuration\"><a href=\"#1-Spring-MVC-auto-configuration\" class=\"headerlink\" title=\"1. Spring MVC auto-configuration\"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p>\n<p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p>\n<ul>\n<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>\n<ul>\n<li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li>\n<li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li>\n<li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li>\n</ul>\n</li>\n<li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p>\n</li>\n<li><p>Static <code>index.html</code> support. 静态首页访问</p>\n</li>\n<li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p>\n</li>\n</ul>\n<ul>\n<li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>\n<ul>\n<li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li>\n<li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty</span>(prefix = <span class=\"string\">\"spring.mvc\"</span>, name = <span class=\"string\">\"date-format\"</span>)<span class=\"comment\">//在文件中配置日期格式化的规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Formatter&lt;Date&gt; <span class=\"title\">dateFormatter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DateFormatter(<span class=\"keyword\">this</span>.mvcProperties.getDateFormat());<span class=\"comment\">//日期格式化组件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p>\n<ul>\n<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>\n<ul>\n<li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p>\n</li>\n<li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p>\n<p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p>\n</li>\n<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>\n<p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">初始化WebDataBinder；</span><br><span class=\"line\">请求数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;JavaBean；</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p>\n<p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href=\"https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc\" target=\"_blank\" rel=\"noopener\">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p>\n<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p>\n<h3 id=\"2、扩展SpringMVC\"><a href=\"#2、扩展SpringMVC\" class=\"headerlink\" title=\"2、扩展SpringMVC\"></a>2、扩展SpringMVC</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:view-controller</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/hello\"</span> <span class=\"attr\">view-name</span>=<span class=\"string\">\"success\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/hello\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</p>\n<p>既保留了所有的自动配置，也能用我们扩展的配置；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// super.addViewControllers(registry);</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">\"/atguigu\"</span>).setViewName(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原理：</p>\n<p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p>\n<p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnableWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WebMvcConfigurerComposite configurers = <span class=\"keyword\">new</span> WebMvcConfigurerComposite();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//从容器中获取所有的WebMvcConfigurer</span></span><br><span class=\"line\">     <span class=\"meta\">@Autowired</span>(required = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigurers</span><span class=\"params\">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class=\"line\">           \t<span class=\"comment\">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span></span><br><span class=\"line\">           \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"comment\">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class=\"line\">             <span class=\"comment\">//    for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class=\"line\">              <span class=\"comment\">//       delegate.addViewControllers(registry);</span></span><br><span class=\"line\">              <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p>\n<p>​    4）、我们的配置类也会被调用；</p>\n<p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p>\n<h3 id=\"3、全面接管SpringMVC；\"><a href=\"#3、全面接管SpringMVC；\" class=\"headerlink\" title=\"3、全面接管SpringMVC；\"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p>\n<p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// super.addViewControllers(registry);</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">\"/atguigu\"</span>).setViewName(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原理：</p>\n<p>为什么@EnableWebMvc自动配置就失效了；</p>\n<p>1）@EnableWebMvc的核心</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import</span>(DelegatingWebMvcConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableWebMvc</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>2）、</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelegatingWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>3）、</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(&#123; Servlet<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">DispatcherServlet</span>.<span class=\"title\">class</span>,</span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"title\">WebMvcConfigurerAdapter</span>.<span class=\"title\">class</span> &#125;)</span></span><br><span class=\"line\"><span class=\"class\">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ConditionalOnMissingBean</span>(<span class=\"title\">WebMvcConfigurationSupport</span>.<span class=\"title\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">AutoConfigureOrder</span>(<span class=\"title\">Ordered</span>.<span class=\"title\">HIGHEST_PRECEDENCE</span> + 10)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">AutoConfigureAfter</span>(</span>&#123; DispatcherServletAutoConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>,</span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"title\">ValidationAutoConfiguration</span>.<span class=\"title\">class</span> &#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p>\n<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p>\n<h2 id=\"5、如何修改SpringBoot的默认配置\"><a href=\"#5、如何修改SpringBoot的默认配置\" class=\"headerlink\" title=\"5、如何修改SpringBoot的默认配置\"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p>\n<p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>\n<p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p>\n<p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p>\n"},{"title":"StringBoot之配置值注入","date":"2018-02-04T05:16:11.000Z","_content":"配置文件\n\n```yaml\nperson:\n    lastName: hello\n    age: 18\n    boss: false\n    birth: 2017/12/12\n    maps: {k1: v1,k2: 12}\n    lists:\n      - lisi\n      - wanglei\n    dog:\n      name: 小狗\n      age: 12\n```\n\njavaBean：\n\n```java\n/**\n * 将配置文件中配置的每一个属性的值，映射到这个组件中\n * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\n *      prefix = \"person\"：配置文件中哪个下面的所有属性进行一一映射\n *\n * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；\n *\n */\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n    private Date birth;\n\n    private Map<String,Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n\n```\n\n\n\n我们可以导入配置文件处理器，以后编写配置就有提示了\n\n```xml\n<!--导入配置文件处理器，配置文件进行绑定就会有提示-->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-configuration-processor</artifactId>\n\t\t\t<optional>true</optional>\n\t\t</dependency>\n```\n\n#### 1、properties配置文件在idea中默认utf-8可能会乱码\n\n调整\n\n![idea配置乱码](images/搜狗截图20180130161620.png)\n\n#### 2、@Value获取值和@ConfigurationProperties获取值比较\n\n|            | @ConfigurationProperties | @Value |\n| ---------- | ------------------------ | ------ |\n| 功能         | 批量注入配置文件中的属性             | 一个个指定  |\n| 松散绑定（松散语法） | 支持                       | 不支持    |\n| SpEL       | 不支持                      | 支持     |\n| JSR303数据校验 | 支持                       | 不支持    |\n| 复杂类型封装     | 支持                       | 不支持    |\n\n配置文件yml还是properties他们都能获取到值；\n\n如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；\n\n如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；\n\n\n\n#### 3、配置文件注入值数据校验\n\n```java\n@Component\n@ConfigurationProperties(prefix = \"person\")\n@Validated\npublic class Person {\n\n    /**\n     * <bean class=\"Person\">\n     *      <property name=\"lastName\" value=\"字面量/${key}从环境变量、配置文件中获取值/#{SpEL}\"></property>\n     * <bean/>\n     */\n\n   //lastName必须是邮箱格式\n    @Email\n    //@Value(\"${person.last-name}\")\n    private String lastName;\n    //@Value(\"#{11*2}\")\n    private Integer age;\n    //@Value(\"true\")\n    private Boolean boss;\n\n    private Date birth;\n    private Map<String,Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n```\n\n\n\n#### 4、@PropertySource&@ImportResource&@Bean\n\n@**PropertySource**：加载指定的配置文件；\n\n```java\n/**\n * 将配置文件中配置的每一个属性的值，映射到这个组件中\n * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\n *      prefix = \"person\"：配置文件中哪个下面的所有属性进行一一映射\n *\n * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；\n *  @ConfigurationProperties(prefix = \"person\")默认从全局配置文件中获取值；\n *\n */\n@PropertySource(value = {\"classpath:person.properties\"})\n@Component\n@ConfigurationProperties(prefix = \"person\")\n//@Validated\npublic class Person {\n\n    /**\n     * <bean class=\"Person\">\n     *      <property name=\"lastName\" value=\"字面量/${key}从环境变量、配置文件中获取值/#{SpEL}\"></property>\n     * <bean/>\n     */\n\n   //lastName必须是邮箱格式\n   // @Email\n    //@Value(\"${person.last-name}\")\n    private String lastName;\n    //@Value(\"#{11*2}\")\n    private Integer age;\n    //@Value(\"true\")\n    private Boolean boss;\n\n```\n\n\n\n@**ImportResource**：导入Spring的配置文件，让配置文件里面的内容生效；\n\nSpring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；\n\n想让Spring的配置文件生效，加载进来；@**ImportResource**标注在一个配置类上\n\n```java\n@ImportResource(locations = {\"classpath:beans.xml\"})\n导入Spring的配置文件让其生效\n```\n\n\n\n不来编写Spring的配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n\n    <bean id=\"helloService\" class=\"com.atguigu.springboot.service.HelloService\"></bean>\n</beans>\n```\n\nSpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式\n\n1、配置类**@Configuration**------>Spring配置文件\n\n2、使用**@Bean**给容器中添加组件\n\n```java\n/**\n * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件\n *\n * 在配置文件中用<bean><bean/>标签添加组件\n *\n */\n@Configuration\npublic class MyAppConfig {\n\n    //将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名\n    @Bean\n    public HelloService helloService02(){\n        System.out.println(\"配置类@Bean给容器中添加组件了...\");\n        return new HelloService();\n    }\n}\n```\n##4、配置文件占位符\n\n### 1、随机数\n\n```java\n${random.value}、${random.int}、${random.long}\n${random.int(10)}、${random.int[1024,65536]}\n\n```\n\n\n\n### 2、占位符获取之前配置的值，如果没有可以是用:指定默认值\n\n```properties\nperson.last-name=王蕾${random.uuid}\nperson.age=${random.int}\nperson.birth=2017/12/15\nperson.boss=false\nperson.maps.k1=v1\nperson.maps.k2=14\nperson.lists=a,b,c\nperson.dog.name=${person.hello:hello}_dog\nperson.dog.age=15\n```","source":"_posts/StringBoot之配置值注入.md","raw":"---\n\ntitle: StringBoot之配置值注入\n\ndate: 2018/02/04 13:16:11\n\n---\n配置文件\n\n```yaml\nperson:\n    lastName: hello\n    age: 18\n    boss: false\n    birth: 2017/12/12\n    maps: {k1: v1,k2: 12}\n    lists:\n      - lisi\n      - wanglei\n    dog:\n      name: 小狗\n      age: 12\n```\n\njavaBean：\n\n```java\n/**\n * 将配置文件中配置的每一个属性的值，映射到这个组件中\n * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\n *      prefix = \"person\"：配置文件中哪个下面的所有属性进行一一映射\n *\n * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；\n *\n */\n@Component\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n    private Date birth;\n\n    private Map<String,Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n\n```\n\n\n\n我们可以导入配置文件处理器，以后编写配置就有提示了\n\n```xml\n<!--导入配置文件处理器，配置文件进行绑定就会有提示-->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-configuration-processor</artifactId>\n\t\t\t<optional>true</optional>\n\t\t</dependency>\n```\n\n#### 1、properties配置文件在idea中默认utf-8可能会乱码\n\n调整\n\n![idea配置乱码](images/搜狗截图20180130161620.png)\n\n#### 2、@Value获取值和@ConfigurationProperties获取值比较\n\n|            | @ConfigurationProperties | @Value |\n| ---------- | ------------------------ | ------ |\n| 功能         | 批量注入配置文件中的属性             | 一个个指定  |\n| 松散绑定（松散语法） | 支持                       | 不支持    |\n| SpEL       | 不支持                      | 支持     |\n| JSR303数据校验 | 支持                       | 不支持    |\n| 复杂类型封装     | 支持                       | 不支持    |\n\n配置文件yml还是properties他们都能获取到值；\n\n如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；\n\n如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；\n\n\n\n#### 3、配置文件注入值数据校验\n\n```java\n@Component\n@ConfigurationProperties(prefix = \"person\")\n@Validated\npublic class Person {\n\n    /**\n     * <bean class=\"Person\">\n     *      <property name=\"lastName\" value=\"字面量/${key}从环境变量、配置文件中获取值/#{SpEL}\"></property>\n     * <bean/>\n     */\n\n   //lastName必须是邮箱格式\n    @Email\n    //@Value(\"${person.last-name}\")\n    private String lastName;\n    //@Value(\"#{11*2}\")\n    private Integer age;\n    //@Value(\"true\")\n    private Boolean boss;\n\n    private Date birth;\n    private Map<String,Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n```\n\n\n\n#### 4、@PropertySource&@ImportResource&@Bean\n\n@**PropertySource**：加载指定的配置文件；\n\n```java\n/**\n * 将配置文件中配置的每一个属性的值，映射到这个组件中\n * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\n *      prefix = \"person\"：配置文件中哪个下面的所有属性进行一一映射\n *\n * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；\n *  @ConfigurationProperties(prefix = \"person\")默认从全局配置文件中获取值；\n *\n */\n@PropertySource(value = {\"classpath:person.properties\"})\n@Component\n@ConfigurationProperties(prefix = \"person\")\n//@Validated\npublic class Person {\n\n    /**\n     * <bean class=\"Person\">\n     *      <property name=\"lastName\" value=\"字面量/${key}从环境变量、配置文件中获取值/#{SpEL}\"></property>\n     * <bean/>\n     */\n\n   //lastName必须是邮箱格式\n   // @Email\n    //@Value(\"${person.last-name}\")\n    private String lastName;\n    //@Value(\"#{11*2}\")\n    private Integer age;\n    //@Value(\"true\")\n    private Boolean boss;\n\n```\n\n\n\n@**ImportResource**：导入Spring的配置文件，让配置文件里面的内容生效；\n\nSpring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；\n\n想让Spring的配置文件生效，加载进来；@**ImportResource**标注在一个配置类上\n\n```java\n@ImportResource(locations = {\"classpath:beans.xml\"})\n导入Spring的配置文件让其生效\n```\n\n\n\n不来编写Spring的配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n\n    <bean id=\"helloService\" class=\"com.atguigu.springboot.service.HelloService\"></bean>\n</beans>\n```\n\nSpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式\n\n1、配置类**@Configuration**------>Spring配置文件\n\n2、使用**@Bean**给容器中添加组件\n\n```java\n/**\n * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件\n *\n * 在配置文件中用<bean><bean/>标签添加组件\n *\n */\n@Configuration\npublic class MyAppConfig {\n\n    //将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名\n    @Bean\n    public HelloService helloService02(){\n        System.out.println(\"配置类@Bean给容器中添加组件了...\");\n        return new HelloService();\n    }\n}\n```\n##4、配置文件占位符\n\n### 1、随机数\n\n```java\n${random.value}、${random.int}、${random.long}\n${random.int(10)}、${random.int[1024,65536]}\n\n```\n\n\n\n### 2、占位符获取之前配置的值，如果没有可以是用:指定默认值\n\n```properties\nperson.last-name=王蕾${random.uuid}\nperson.age=${random.int}\nperson.birth=2017/12/15\nperson.boss=false\nperson.maps.k1=v1\nperson.maps.k2=14\nperson.lists=a,b,c\nperson.dog.name=${person.hello:hello}_dog\nperson.dog.age=15\n```","slug":"StringBoot之配置值注入","published":1,"updated":"2020-05-30T15:25:49.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hqu000esx0145w98kia","content":"<p>配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">    <span class=\"attr\">lastName:</span> <span class=\"string\">hello</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">    <span class=\"attr\">boss:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">birth:</span> <span class=\"number\">2017</span><span class=\"string\">/12/12</span></span><br><span class=\"line\">    <span class=\"attr\">maps:</span> <span class=\"string\">&#123;k1:</span> <span class=\"string\">v1,k2:</span> <span class=\"number\">12</span><span class=\"string\">&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">lists:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">lisi</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">wanglei</span></span><br><span class=\"line\">    <span class=\"attr\">dog:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">小狗</span></span><br><span class=\"line\">      <span class=\"attr\">age:</span> <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<p>javaBean：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class=\"line\"><span class=\"comment\"> *      prefix = \"person\"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有这个组件是容器中的组件，才能容器提供的<span class=\"doctag\">@ConfigurationProperties</span>功能；</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"person\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Object&gt; lists;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1、properties配置文件在idea中默认utf-8可能会乱码\"><a href=\"#1、properties配置文件在idea中默认utf-8可能会乱码\" class=\"headerlink\" title=\"1、properties配置文件在idea中默认utf-8可能会乱码\"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p>\n<p><img src=\"images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180130161620.png\" alt=\"idea配置乱码\"></p>\n<h4 id=\"2、-Value获取值和-ConfigurationProperties获取值比较\"><a href=\"#2、-Value获取值和-ConfigurationProperties获取值比较\" class=\"headerlink\" title=\"2、@Value获取值和@ConfigurationProperties获取值比较\"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table>\n<thead>\n<tr>\n<th></th>\n<th>@ConfigurationProperties</th>\n<th>@Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>功能</td>\n<td>批量注入配置文件中的属性</td>\n<td>一个个指定</td>\n</tr>\n<tr>\n<td>松散绑定（松散语法）</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>SpEL</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>JSR303数据校验</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>复杂类型封装</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody></table>\n<p>配置文件yml还是properties他们都能获取到值；</p>\n<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p>\n<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p>\n<h4 id=\"3、配置文件注入值数据校验\"><a href=\"#3、配置文件注入值数据校验\" class=\"headerlink\" title=\"3、配置文件注入值数据校验\"></a>3、配置文件注入值数据校验</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"person\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Validated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=\"Person\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *      &lt;property name=\"lastName\" value=\"字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;\"&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//lastName必须是邮箱格式</span></span><br><span class=\"line\">    <span class=\"meta\">@Email</span></span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"$&#123;person.last-name&#125;\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"#&#123;11*2&#125;\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"true\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Object&gt; lists;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4、-PropertySource-amp-ImportResource-amp-Bean\"><a href=\"#4、-PropertySource-amp-ImportResource-amp-Bean\" class=\"headerlink\" title=\"4、@PropertySource&amp;@ImportResource&amp;@Bean\"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class=\"line\"><span class=\"comment\"> *      prefix = \"person\"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有这个组件是容器中的组件，才能容器提供的<span class=\"doctag\">@ConfigurationProperties</span>功能；</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@ConfigurationProperties</span>(prefix = \"person\")默认从全局配置文件中获取值；</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource</span>(value = &#123;<span class=\"string\">\"classpath:person.properties\"</span>&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"person\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//@Validated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=\"Person\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *      &lt;property name=\"lastName\" value=\"字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;\"&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//lastName必须是邮箱格式</span></span><br><span class=\"line\">   <span class=\"comment\">// @Email</span></span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"$&#123;person.last-name&#125;\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"#&#123;11*2&#125;\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"true\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>\n<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>\n<p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ImportResource</span>(locations = &#123;<span class=\"string\">\"classpath:beans.xml\"</span>&#125;)</span><br><span class=\"line\">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure>\n\n\n\n<p>不来编写Spring的配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.springboot.service.HelloService\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p>\n<p>1、配置类<strong>@Configuration</strong>——&gt;Spring配置文件</p>\n<p>2、使用<strong>@Bean</strong>给容器中添加组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAppConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloService <span class=\"title\">helloService02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"配置类@Bean给容器中添加组件了...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##4、配置文件占位符</p>\n<h3 id=\"1、随机数\"><a href=\"#1、随机数\" class=\"headerlink\" title=\"1、随机数\"></a>1、随机数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;random.value&#125;、$&#123;random.<span class=\"keyword\">int</span>&#125;、$&#123;random.<span class=\"keyword\">long</span>&#125;</span><br><span class=\"line\">$&#123;random.<span class=\"keyword\">int</span>(<span class=\"number\">10</span>)&#125;、$&#123;random.<span class=\"keyword\">int</span>[<span class=\"number\">1024</span>,<span class=\"number\">65536</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2、占位符获取之前配置的值，如果没有可以是用-指定默认值\"><a href=\"#2、占位符获取之前配置的值，如果没有可以是用-指定默认值\" class=\"headerlink\" title=\"2、占位符获取之前配置的值，如果没有可以是用:指定默认值\"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">王蕾$&#123;random.uuid&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">$&#123;random.int&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.birth</span>=<span class=\"string\">2017/12/15</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">14</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">$&#123;person.hello:hello&#125;_dog</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<p>配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">    <span class=\"attr\">lastName:</span> <span class=\"string\">hello</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">    <span class=\"attr\">boss:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">birth:</span> <span class=\"number\">2017</span><span class=\"string\">/12/12</span></span><br><span class=\"line\">    <span class=\"attr\">maps:</span> <span class=\"string\">&#123;k1:</span> <span class=\"string\">v1,k2:</span> <span class=\"number\">12</span><span class=\"string\">&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">lists:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">lisi</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">wanglei</span></span><br><span class=\"line\">    <span class=\"attr\">dog:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">小狗</span></span><br><span class=\"line\">      <span class=\"attr\">age:</span> <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<p>javaBean：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class=\"line\"><span class=\"comment\"> *      prefix = \"person\"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有这个组件是容器中的组件，才能容器提供的<span class=\"doctag\">@ConfigurationProperties</span>功能；</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"person\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Object&gt; lists;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1、properties配置文件在idea中默认utf-8可能会乱码\"><a href=\"#1、properties配置文件在idea中默认utf-8可能会乱码\" class=\"headerlink\" title=\"1、properties配置文件在idea中默认utf-8可能会乱码\"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p>\n<p><img src=\"images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180130161620.png\" alt=\"idea配置乱码\"></p>\n<h4 id=\"2、-Value获取值和-ConfigurationProperties获取值比较\"><a href=\"#2、-Value获取值和-ConfigurationProperties获取值比较\" class=\"headerlink\" title=\"2、@Value获取值和@ConfigurationProperties获取值比较\"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table>\n<thead>\n<tr>\n<th></th>\n<th>@ConfigurationProperties</th>\n<th>@Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>功能</td>\n<td>批量注入配置文件中的属性</td>\n<td>一个个指定</td>\n</tr>\n<tr>\n<td>松散绑定（松散语法）</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>SpEL</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>JSR303数据校验</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>复杂类型封装</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody></table>\n<p>配置文件yml还是properties他们都能获取到值；</p>\n<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p>\n<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p>\n<h4 id=\"3、配置文件注入值数据校验\"><a href=\"#3、配置文件注入值数据校验\" class=\"headerlink\" title=\"3、配置文件注入值数据校验\"></a>3、配置文件注入值数据校验</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"person\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Validated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=\"Person\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *      &lt;property name=\"lastName\" value=\"字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;\"&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//lastName必须是邮箱格式</span></span><br><span class=\"line\">    <span class=\"meta\">@Email</span></span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"$&#123;person.last-name&#125;\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"#&#123;11*2&#125;\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"true\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Object&gt; lists;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4、-PropertySource-amp-ImportResource-amp-Bean\"><a href=\"#4、-PropertySource-amp-ImportResource-amp-Bean\" class=\"headerlink\" title=\"4、@PropertySource&amp;@ImportResource&amp;@Bean\"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class=\"line\"><span class=\"comment\"> *      prefix = \"person\"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有这个组件是容器中的组件，才能容器提供的<span class=\"doctag\">@ConfigurationProperties</span>功能；</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@ConfigurationProperties</span>(prefix = \"person\")默认从全局配置文件中获取值；</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource</span>(value = &#123;<span class=\"string\">\"classpath:person.properties\"</span>&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"person\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//@Validated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean class=\"Person\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *      &lt;property name=\"lastName\" value=\"字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;\"&gt;&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;bean/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//lastName必须是邮箱格式</span></span><br><span class=\"line\">   <span class=\"comment\">// @Email</span></span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"$&#123;person.last-name&#125;\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"#&#123;11*2&#125;\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"comment\">//@Value(\"true\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>\n<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>\n<p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ImportResource</span>(locations = &#123;<span class=\"string\">\"classpath:beans.xml\"</span>&#125;)</span><br><span class=\"line\">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure>\n\n\n\n<p>不来编写Spring的配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.springboot.service.HelloService\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p>\n<p>1、配置类<strong>@Configuration</strong>——&gt;Spring配置文件</p>\n<p>2、使用<strong>@Bean</strong>给容器中添加组件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAppConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloService <span class=\"title\">helloService02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"配置类@Bean给容器中添加组件了...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##4、配置文件占位符</p>\n<h3 id=\"1、随机数\"><a href=\"#1、随机数\" class=\"headerlink\" title=\"1、随机数\"></a>1、随机数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;random.value&#125;、$&#123;random.<span class=\"keyword\">int</span>&#125;、$&#123;random.<span class=\"keyword\">long</span>&#125;</span><br><span class=\"line\">$&#123;random.<span class=\"keyword\">int</span>(<span class=\"number\">10</span>)&#125;、$&#123;random.<span class=\"keyword\">int</span>[<span class=\"number\">1024</span>,<span class=\"number\">65536</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2、占位符获取之前配置的值，如果没有可以是用-指定默认值\"><a href=\"#2、占位符获取之前配置的值，如果没有可以是用-指定默认值\" class=\"headerlink\" title=\"2、占位符获取之前配置的值，如果没有可以是用:指定默认值\"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">person.last-name</span>=<span class=\"string\">王蕾$&#123;random.uuid&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.age</span>=<span class=\"string\">$&#123;random.int&#125;</span></span><br><span class=\"line\"><span class=\"meta\">person.birth</span>=<span class=\"string\">2017/12/15</span></span><br><span class=\"line\"><span class=\"meta\">person.boss</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k1</span>=<span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"meta\">person.maps.k2</span>=<span class=\"string\">14</span></span><br><span class=\"line\"><span class=\"meta\">person.lists</span>=<span class=\"string\">a,b,c</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.name</span>=<span class=\"string\">$&#123;person.hello:hello&#125;_dog</span></span><br><span class=\"line\"><span class=\"meta\">person.dog.age</span>=<span class=\"string\">15</span></span><br></pre></td></tr></table></figure>"},{"title":"StringBoot-配置嵌入式Servlet容器","date":"2018-11-01T17:16:34.000Z","_content":"\nSpringBoot默认使用Tomcat作为嵌入式的Servlet容器；\n\n问题？\n\n### 1）、如何定制和修改Servlet容器的相关配置；\n\n1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；\n\n```properties\nserver.port=8081\nserver.context-path=/crud\n\nserver.tomcat.uri-encoding=UTF-8\n\n//通用的Servlet容器设置\nserver.xxx\n//Tomcat的设置\nserver.tomcat.xxx\n```\n\n2、编写一个**EmbeddedServletContainerCustomizer**：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置\n\n```java\n@Bean  //一定要将这个定制器加入到容器中\npublic EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){\n    return new EmbeddedServletContainerCustomizer() {\n\n        //定制嵌入式的Servlet容器相关的规则\n        @Override\n        public void customize(ConfigurableEmbeddedServletContainer container) {\n            container.setPort(8083);\n        }\n    };\n}\n```\n\n### 2）、注册Servlet三大组件【Servlet、Filter、Listener】\n\n由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。\n\n注册三大组件用以下方式\n\nServletRegistrationBean\n\n```java\n//注册三大组件\n@Bean\npublic ServletRegistrationBean myServlet(){\n    ServletRegistrationBean registrationBean = new ServletRegistrationBean(new MyServlet(),\"/myServlet\");\n    return registrationBean;\n}\n\n```\n\nFilterRegistrationBean\n\n```java\n@Bean\npublic FilterRegistrationBean myFilter(){\n    FilterRegistrationBean registrationBean = new FilterRegistrationBean();\n    registrationBean.setFilter(new MyFilter());\n    registrationBean.setUrlPatterns(Arrays.asList(\"/hello\",\"/myServlet\"));\n    return registrationBean;\n}\n```\n\nServletListenerRegistrationBean\n\n```java\n@Bean\npublic ServletListenerRegistrationBean myListener(){\n    ServletListenerRegistrationBean<MyListener> registrationBean = new ServletListenerRegistrationBean<>(new MyListener());\n    return registrationBean;\n}\n```\n\n\n\nSpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；\n\nDispatcherServletAutoConfiguration中：\n\n```java\n@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\npublic ServletRegistrationBean dispatcherServletRegistration(\n      DispatcherServlet dispatcherServlet) {\n   ServletRegistrationBean registration = new ServletRegistrationBean(\n         dispatcherServlet, this.serverProperties.getServletMapping());\n    //默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp\n    //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径\n    \n   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n   registration.setLoadOnStartup(\n         this.webMvcProperties.getServlet().getLoadOnStartup());\n   if (this.multipartConfig != null) {\n      registration.setMultipartConfig(this.multipartConfig);\n   }\n   return registration;\n}\n\n```\n\n2）、SpringBoot能不能支持其他的Servlet容器；\n\n### 3）、替换为其他嵌入式Servlet容器\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180302114401.png)\n\n默认支持：\n\nTomcat（默认使用）\n\n```xml\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-web</artifactId>\n   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；\n</dependency>\n```\n\nJetty\n\n```xml\n<!-- 引入web模块 -->\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-web</artifactId>\n   <exclusions>\n      <exclusion>\n         <artifactId>spring-boot-starter-tomcat</artifactId>\n         <groupId>org.springframework.boot</groupId>\n      </exclusion>\n   </exclusions>\n</dependency>\n\n<!--引入其他的Servlet容器-->\n<dependency>\n   <artifactId>spring-boot-starter-jetty</artifactId>\n   <groupId>org.springframework.boot</groupId>\n</dependency>\n```\n\nUndertow\n\n```xml\n<!-- 引入web模块 -->\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-web</artifactId>\n   <exclusions>\n      <exclusion>\n         <artifactId>spring-boot-starter-tomcat</artifactId>\n         <groupId>org.springframework.boot</groupId>\n      </exclusion>\n   </exclusions>\n</dependency>\n\n<!--引入其他的Servlet容器-->\n<dependency>\n   <artifactId>spring-boot-starter-undertow</artifactId>\n   <groupId>org.springframework.boot</groupId>\n</dependency>\n```\n\n### 4）、嵌入式Servlet容器自动配置原理；\n\n\n\nEmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？\n\n```java\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@Import(BeanPostProcessorsRegistrar.class)\n//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件\n//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：\n//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作\npublic class EmbeddedServletContainerAutoConfiguration {\n    \n    @Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })//判断当前是否引入了Tomcat依赖；\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n    \n    /**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class,\n\t\t\tWebAppContext.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedJetty {\n\n\t\t@Bean\n\t\tpublic JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() {\n\t\t\treturn new JettyEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Undertow is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedUndertow {\n\n\t\t@Bean\n\t\tpublic UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() {\n\t\t\treturn new UndertowEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n```\n\n1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）\n\n```java\npublic interface EmbeddedServletContainerFactory {\n\n   //获取嵌入式的Servlet容器\n   EmbeddedServletContainer getEmbeddedServletContainer(\n         ServletContextInitializer... initializers);\n\n}\n```\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180302144835.png)\n\n2）、EmbeddedServletContainer：（嵌入式的Servlet容器）\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180302144910.png)\n\n\n\n3）、以**TomcatEmbeddedServletContainerFactory**为例\n\n```java\n@Override\npublic EmbeddedServletContainer getEmbeddedServletContainer(\n      ServletContextInitializer... initializers) {\n    //创建一个Tomcat\n   Tomcat tomcat = new Tomcat();\n    \n    //配置Tomcat的基本环节\n   File baseDir = (this.baseDirectory != null ? this.baseDirectory\n         : createTempDir(\"tomcat\"));\n   tomcat.setBaseDir(baseDir.getAbsolutePath());\n   Connector connector = new Connector(this.protocol);\n   tomcat.getService().addConnector(connector);\n   customizeConnector(connector);\n   tomcat.setConnector(connector);\n   tomcat.getHost().setAutoDeploy(false);\n   configureEngine(tomcat.getEngine());\n   for (Connector additionalConnector : this.additionalTomcatConnectors) {\n      tomcat.getService().addConnector(additionalConnector);\n   }\n   prepareContext(tomcat.getHost(), initializers);\n    \n    //将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器\n   return getTomcatEmbeddedServletContainer(tomcat);\n}\n```\n\n4）、我们对嵌入式容器的配置修改是怎么生效？\n\n```\nServerProperties、EmbeddedServletContainerCustomizer\n```\n\n\n\n**EmbeddedServletContainerCustomizer**：定制器帮我们修改了Servlet容器的配置？\n\n怎么修改的原理？\n\n5）、容器中导入了**EmbeddedServletContainerCustomizerBeanPostProcessor**\n\n```java\n//初始化之前\n@Override\npublic Object postProcessBeforeInitialization(Object bean, String beanName)\n      throws BeansException {\n    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件\n   if (bean instanceof ConfigurableEmbeddedServletContainer) {\n       //\n      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);\n   }\n   return bean;\n}\n\nprivate void postProcessBeforeInitialization(\n\t\t\tConfigurableEmbeddedServletContainer bean) {\n    //获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；\n    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) {\n        customizer.customize(bean);\n    }\n}\n\nprivate Collection<EmbeddedServletContainerCustomizer> getCustomizers() {\n    if (this.customizers == null) {\n        // Look up does not include the parent context\n        this.customizers = new ArrayList<EmbeddedServletContainerCustomizer>(\n            this.beanFactory\n            //从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer\n            //定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件\n            .getBeansOfType(EmbeddedServletContainerCustomizer.class,\n                            false, false)\n            .values());\n        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);\n        this.customizers = Collections.unmodifiableList(this.customizers);\n    }\n    return this.customizers;\n}\n\nServerProperties也是定制器\n```\n\n步骤：\n\n1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】\n\n2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；\n\n只要是嵌入式的Servlet容器工厂，后置处理器就工作；\n\n3）、后置处理器，从容器中获取所有的**EmbeddedServletContainerCustomizer**，调用定制器的定制方法\n\n\n\n###5）、嵌入式Servlet容器启动原理；\n\n什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；\n\n获取嵌入式的Servlet容器工厂：\n\n1）、SpringBoot应用启动运行run方法\n\n2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建**AnnotationConfigEmbeddedWebApplicationContext**，否则：**AnnotationConfigApplicationContext**\n\n3）、refresh(context);**刷新刚才创建好的ioc容器；**\n\n```java\npublic void refresh() throws BeansException, IllegalStateException {\n   synchronized (this.startupShutdownMonitor) {\n      // Prepare this context for refreshing.\n      prepareRefresh();\n\n      // Tell the subclass to refresh the internal bean factory.\n      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n      // Prepare the bean factory for use in this context.\n      prepareBeanFactory(beanFactory);\n\n      try {\n         // Allows post-processing of the bean factory in context subclasses.\n         postProcessBeanFactory(beanFactory);\n\n         // Invoke factory processors registered as beans in the context.\n         invokeBeanFactoryPostProcessors(beanFactory);\n\n         // Register bean processors that intercept bean creation.\n         registerBeanPostProcessors(beanFactory);\n\n         // Initialize message source for this context.\n         initMessageSource();\n\n         // Initialize event multicaster for this context.\n         initApplicationEventMulticaster();\n\n         // Initialize other special beans in specific context subclasses.\n         onRefresh();\n\n         // Check for listener beans and register them.\n         registerListeners();\n\n         // Instantiate all remaining (non-lazy-init) singletons.\n         finishBeanFactoryInitialization(beanFactory);\n\n         // Last step: publish corresponding event.\n         finishRefresh();\n      }\n\n      catch (BeansException ex) {\n         if (logger.isWarnEnabled()) {\n            logger.warn(\"Exception encountered during context initialization - \" +\n                  \"cancelling refresh attempt: \" + ex);\n         }\n\n         // Destroy already created singletons to avoid dangling resources.\n         destroyBeans();\n\n         // Reset 'active' flag.\n         cancelRefresh(ex);\n\n         // Propagate exception to caller.\n         throw ex;\n      }\n\n      finally {\n         // Reset common introspection caches in Spring's core, since we\n         // might not ever need metadata for singleton beans anymore...\n         resetCommonCaches();\n      }\n   }\n}\n```\n\n4）、  onRefresh(); web的ioc容器重写了onRefresh方法\n\n5）、webioc容器会创建嵌入式的Servlet容器；**createEmbeddedServletContainer**();\n\n**6）、获取嵌入式的Servlet容器工厂：**\n\nEmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();\n\n​\t从ioc容器中获取EmbeddedServletContainerFactory 组件；**TomcatEmbeddedServletContainerFactory**创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；\n\n7）、**使用容器工厂获取嵌入式的Servlet容器**：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());\n\n8）、嵌入式的Servlet容器创建对象并启动Servlet容器；\n\n**先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；**\n\n**==IOC容器启动创建嵌入式的Servlet容器==**\n\n\n\n## 9、使用外置的Servlet容器\n\n嵌入式Servlet容器：应用打成可执行的jar\n\n​\t\t优点：简单、便携；\n\n​\t\t缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；\n\n\n\n外置的Servlet容器：外面安装Tomcat---应用war包的方式打包；\n\n### 步骤\n\n1）、必须创建一个war项目；（利用idea创建好目录结构）\n\n2）、将嵌入式的Tomcat指定为provided；\n\n```xml\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-tomcat</artifactId>\n   <scope>provided</scope>\n</dependency>\n```\n\n3）、必须编写一个**SpringBootServletInitializer**的子类，并调用configure方法\n\n```java\npublic class ServletInitializer extends SpringBootServletInitializer {\n\n   @Override\n   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n       //传入SpringBoot应用的主程序\n      return application.sources(SpringBoot04WebJspApplication.class);\n   }\n\n}\n```\n\n4）、启动服务器就可以使用；\n\n### 原理\n\njar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；\n\nwar包：启动服务器，**服务器启动SpringBoot应用**【SpringBootServletInitializer】，启动ioc容器；\n\n\n\nservlet3.0（Spring注解版）：\n\n8.2.4 Shared libraries / runtimes pluggability：\n\n规则：\n\n​\t1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：\n\n​\t2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名\n\n​\t3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；\n\n\n\n流程：\n\n1）、启动Tomcat\n\n2）、org\\springframework\\spring-web\\4.3.14.RELEASE\\spring-web-4.3.14.RELEASE.jar!\\META-INF\\services\\javax.servlet.ServletContainerInitializer：\n\nSpring的web模块里面有这个文件：**org.springframework.web.SpringServletContainerInitializer**\n\n3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set<Class<?>>；为这些WebApplicationInitializer类型的类创建实例；\n\n4）、每一个WebApplicationInitializer都调用自己的onStartup；\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180302221835.png)\n\n5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法\n\n6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器\n\n```java\nprotected WebApplicationContext createRootApplicationContext(\n      ServletContext servletContext) {\n    //1、创建SpringApplicationBuilder\n   SpringApplicationBuilder builder = createSpringApplicationBuilder();\n   StandardServletEnvironment environment = new StandardServletEnvironment();\n   environment.initPropertySources(servletContext, null);\n   builder.environment(environment);\n   builder.main(getClass());\n   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);\n   if (parent != null) {\n      this.logger.info(\"Root context already created (using as parent).\");\n      servletContext.setAttribute(\n            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null);\n      builder.initializers(new ParentContextApplicationContextInitializer(parent));\n   }\n   builder.initializers(\n         new ServletContextApplicationContextInitializer(servletContext));\n   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);\n    \n    //调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来\n   builder = configure(builder);\n    \n    //使用builder创建一个Spring应用\n   SpringApplication application = builder.build();\n   if (application.getSources().isEmpty() && AnnotationUtils\n         .findAnnotation(getClass(), Configuration.class) != null) {\n      application.getSources().add(getClass());\n   }\n   Assert.state(!application.getSources().isEmpty(),\n         \"No SpringApplication sources have been defined. Either override the \"\n               + \"configure method or add an @Configuration annotation\");\n   // Ensure error pages are registered\n   if (this.registerErrorPageFilter) {\n      application.getSources().add(ErrorPageFilterConfiguration.class);\n   }\n    //启动Spring应用\n   return run(application);\n}\n```\n\n7）、Spring的应用就启动并且创建IOC容器\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n   StopWatch stopWatch = new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context = null;\n   FailureAnalyzers analyzers = null;\n   configureHeadlessProperty();\n   SpringApplicationRunListeners listeners = getRunListeners(args);\n   listeners.starting();\n   try {\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n            args);\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\n            applicationArguments);\n      Banner printedBanner = printBanner(environment);\n      context = createApplicationContext();\n      analyzers = new FailureAnalyzers(context);\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n       \n       //刷新IOC容器\n      refreshContext(context);\n      afterRefresh(context, applicationArguments);\n      listeners.finished(context, null);\n      stopWatch.stop();\n      if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      }\n      return context;\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   }\n}\n```\n\n**==启动Servlet容器，再启动SpringBoot应用==**","source":"_posts/StringBoot-配置嵌入式Servlet容器.md","raw":"---\ntitle: StringBoot-配置嵌入式Servlet容器\n\ndate: 2018/11/02 01:16:34\n---\n\nSpringBoot默认使用Tomcat作为嵌入式的Servlet容器；\n\n问题？\n\n### 1）、如何定制和修改Servlet容器的相关配置；\n\n1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；\n\n```properties\nserver.port=8081\nserver.context-path=/crud\n\nserver.tomcat.uri-encoding=UTF-8\n\n//通用的Servlet容器设置\nserver.xxx\n//Tomcat的设置\nserver.tomcat.xxx\n```\n\n2、编写一个**EmbeddedServletContainerCustomizer**：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置\n\n```java\n@Bean  //一定要将这个定制器加入到容器中\npublic EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){\n    return new EmbeddedServletContainerCustomizer() {\n\n        //定制嵌入式的Servlet容器相关的规则\n        @Override\n        public void customize(ConfigurableEmbeddedServletContainer container) {\n            container.setPort(8083);\n        }\n    };\n}\n```\n\n### 2）、注册Servlet三大组件【Servlet、Filter、Listener】\n\n由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。\n\n注册三大组件用以下方式\n\nServletRegistrationBean\n\n```java\n//注册三大组件\n@Bean\npublic ServletRegistrationBean myServlet(){\n    ServletRegistrationBean registrationBean = new ServletRegistrationBean(new MyServlet(),\"/myServlet\");\n    return registrationBean;\n}\n\n```\n\nFilterRegistrationBean\n\n```java\n@Bean\npublic FilterRegistrationBean myFilter(){\n    FilterRegistrationBean registrationBean = new FilterRegistrationBean();\n    registrationBean.setFilter(new MyFilter());\n    registrationBean.setUrlPatterns(Arrays.asList(\"/hello\",\"/myServlet\"));\n    return registrationBean;\n}\n```\n\nServletListenerRegistrationBean\n\n```java\n@Bean\npublic ServletListenerRegistrationBean myListener(){\n    ServletListenerRegistrationBean<MyListener> registrationBean = new ServletListenerRegistrationBean<>(new MyListener());\n    return registrationBean;\n}\n```\n\n\n\nSpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；\n\nDispatcherServletAutoConfiguration中：\n\n```java\n@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\npublic ServletRegistrationBean dispatcherServletRegistration(\n      DispatcherServlet dispatcherServlet) {\n   ServletRegistrationBean registration = new ServletRegistrationBean(\n         dispatcherServlet, this.serverProperties.getServletMapping());\n    //默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp\n    //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径\n    \n   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n   registration.setLoadOnStartup(\n         this.webMvcProperties.getServlet().getLoadOnStartup());\n   if (this.multipartConfig != null) {\n      registration.setMultipartConfig(this.multipartConfig);\n   }\n   return registration;\n}\n\n```\n\n2）、SpringBoot能不能支持其他的Servlet容器；\n\n### 3）、替换为其他嵌入式Servlet容器\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180302114401.png)\n\n默认支持：\n\nTomcat（默认使用）\n\n```xml\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-web</artifactId>\n   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；\n</dependency>\n```\n\nJetty\n\n```xml\n<!-- 引入web模块 -->\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-web</artifactId>\n   <exclusions>\n      <exclusion>\n         <artifactId>spring-boot-starter-tomcat</artifactId>\n         <groupId>org.springframework.boot</groupId>\n      </exclusion>\n   </exclusions>\n</dependency>\n\n<!--引入其他的Servlet容器-->\n<dependency>\n   <artifactId>spring-boot-starter-jetty</artifactId>\n   <groupId>org.springframework.boot</groupId>\n</dependency>\n```\n\nUndertow\n\n```xml\n<!-- 引入web模块 -->\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-web</artifactId>\n   <exclusions>\n      <exclusion>\n         <artifactId>spring-boot-starter-tomcat</artifactId>\n         <groupId>org.springframework.boot</groupId>\n      </exclusion>\n   </exclusions>\n</dependency>\n\n<!--引入其他的Servlet容器-->\n<dependency>\n   <artifactId>spring-boot-starter-undertow</artifactId>\n   <groupId>org.springframework.boot</groupId>\n</dependency>\n```\n\n### 4）、嵌入式Servlet容器自动配置原理；\n\n\n\nEmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？\n\n```java\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@Configuration\n@ConditionalOnWebApplication\n@Import(BeanPostProcessorsRegistrar.class)\n//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件\n//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：\n//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作\npublic class EmbeddedServletContainerAutoConfiguration {\n    \n    @Configuration\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class })//判断当前是否引入了Tomcat依赖；\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器\n\tpublic static class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {\n\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n    \n    /**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class,\n\t\t\tWebAppContext.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedJetty {\n\n\t\t@Bean\n\t\tpublic JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() {\n\t\t\treturn new JettyEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Undertow is being used.\n\t */\n\t@Configuration\n\t@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n\t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n\tpublic static class EmbeddedUndertow {\n\n\t\t@Bean\n\t\tpublic UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() {\n\t\t\treturn new UndertowEmbeddedServletContainerFactory();\n\t\t}\n\n\t}\n```\n\n1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）\n\n```java\npublic interface EmbeddedServletContainerFactory {\n\n   //获取嵌入式的Servlet容器\n   EmbeddedServletContainer getEmbeddedServletContainer(\n         ServletContextInitializer... initializers);\n\n}\n```\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180302144835.png)\n\n2）、EmbeddedServletContainer：（嵌入式的Servlet容器）\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180302144910.png)\n\n\n\n3）、以**TomcatEmbeddedServletContainerFactory**为例\n\n```java\n@Override\npublic EmbeddedServletContainer getEmbeddedServletContainer(\n      ServletContextInitializer... initializers) {\n    //创建一个Tomcat\n   Tomcat tomcat = new Tomcat();\n    \n    //配置Tomcat的基本环节\n   File baseDir = (this.baseDirectory != null ? this.baseDirectory\n         : createTempDir(\"tomcat\"));\n   tomcat.setBaseDir(baseDir.getAbsolutePath());\n   Connector connector = new Connector(this.protocol);\n   tomcat.getService().addConnector(connector);\n   customizeConnector(connector);\n   tomcat.setConnector(connector);\n   tomcat.getHost().setAutoDeploy(false);\n   configureEngine(tomcat.getEngine());\n   for (Connector additionalConnector : this.additionalTomcatConnectors) {\n      tomcat.getService().addConnector(additionalConnector);\n   }\n   prepareContext(tomcat.getHost(), initializers);\n    \n    //将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器\n   return getTomcatEmbeddedServletContainer(tomcat);\n}\n```\n\n4）、我们对嵌入式容器的配置修改是怎么生效？\n\n```\nServerProperties、EmbeddedServletContainerCustomizer\n```\n\n\n\n**EmbeddedServletContainerCustomizer**：定制器帮我们修改了Servlet容器的配置？\n\n怎么修改的原理？\n\n5）、容器中导入了**EmbeddedServletContainerCustomizerBeanPostProcessor**\n\n```java\n//初始化之前\n@Override\npublic Object postProcessBeforeInitialization(Object bean, String beanName)\n      throws BeansException {\n    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件\n   if (bean instanceof ConfigurableEmbeddedServletContainer) {\n       //\n      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);\n   }\n   return bean;\n}\n\nprivate void postProcessBeforeInitialization(\n\t\t\tConfigurableEmbeddedServletContainer bean) {\n    //获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；\n    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) {\n        customizer.customize(bean);\n    }\n}\n\nprivate Collection<EmbeddedServletContainerCustomizer> getCustomizers() {\n    if (this.customizers == null) {\n        // Look up does not include the parent context\n        this.customizers = new ArrayList<EmbeddedServletContainerCustomizer>(\n            this.beanFactory\n            //从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer\n            //定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件\n            .getBeansOfType(EmbeddedServletContainerCustomizer.class,\n                            false, false)\n            .values());\n        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);\n        this.customizers = Collections.unmodifiableList(this.customizers);\n    }\n    return this.customizers;\n}\n\nServerProperties也是定制器\n```\n\n步骤：\n\n1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】\n\n2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；\n\n只要是嵌入式的Servlet容器工厂，后置处理器就工作；\n\n3）、后置处理器，从容器中获取所有的**EmbeddedServletContainerCustomizer**，调用定制器的定制方法\n\n\n\n###5）、嵌入式Servlet容器启动原理；\n\n什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；\n\n获取嵌入式的Servlet容器工厂：\n\n1）、SpringBoot应用启动运行run方法\n\n2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建**AnnotationConfigEmbeddedWebApplicationContext**，否则：**AnnotationConfigApplicationContext**\n\n3）、refresh(context);**刷新刚才创建好的ioc容器；**\n\n```java\npublic void refresh() throws BeansException, IllegalStateException {\n   synchronized (this.startupShutdownMonitor) {\n      // Prepare this context for refreshing.\n      prepareRefresh();\n\n      // Tell the subclass to refresh the internal bean factory.\n      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n      // Prepare the bean factory for use in this context.\n      prepareBeanFactory(beanFactory);\n\n      try {\n         // Allows post-processing of the bean factory in context subclasses.\n         postProcessBeanFactory(beanFactory);\n\n         // Invoke factory processors registered as beans in the context.\n         invokeBeanFactoryPostProcessors(beanFactory);\n\n         // Register bean processors that intercept bean creation.\n         registerBeanPostProcessors(beanFactory);\n\n         // Initialize message source for this context.\n         initMessageSource();\n\n         // Initialize event multicaster for this context.\n         initApplicationEventMulticaster();\n\n         // Initialize other special beans in specific context subclasses.\n         onRefresh();\n\n         // Check for listener beans and register them.\n         registerListeners();\n\n         // Instantiate all remaining (non-lazy-init) singletons.\n         finishBeanFactoryInitialization(beanFactory);\n\n         // Last step: publish corresponding event.\n         finishRefresh();\n      }\n\n      catch (BeansException ex) {\n         if (logger.isWarnEnabled()) {\n            logger.warn(\"Exception encountered during context initialization - \" +\n                  \"cancelling refresh attempt: \" + ex);\n         }\n\n         // Destroy already created singletons to avoid dangling resources.\n         destroyBeans();\n\n         // Reset 'active' flag.\n         cancelRefresh(ex);\n\n         // Propagate exception to caller.\n         throw ex;\n      }\n\n      finally {\n         // Reset common introspection caches in Spring's core, since we\n         // might not ever need metadata for singleton beans anymore...\n         resetCommonCaches();\n      }\n   }\n}\n```\n\n4）、  onRefresh(); web的ioc容器重写了onRefresh方法\n\n5）、webioc容器会创建嵌入式的Servlet容器；**createEmbeddedServletContainer**();\n\n**6）、获取嵌入式的Servlet容器工厂：**\n\nEmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();\n\n​\t从ioc容器中获取EmbeddedServletContainerFactory 组件；**TomcatEmbeddedServletContainerFactory**创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；\n\n7）、**使用容器工厂获取嵌入式的Servlet容器**：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());\n\n8）、嵌入式的Servlet容器创建对象并启动Servlet容器；\n\n**先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；**\n\n**==IOC容器启动创建嵌入式的Servlet容器==**\n\n\n\n## 9、使用外置的Servlet容器\n\n嵌入式Servlet容器：应用打成可执行的jar\n\n​\t\t优点：简单、便携；\n\n​\t\t缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；\n\n\n\n外置的Servlet容器：外面安装Tomcat---应用war包的方式打包；\n\n### 步骤\n\n1）、必须创建一个war项目；（利用idea创建好目录结构）\n\n2）、将嵌入式的Tomcat指定为provided；\n\n```xml\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-tomcat</artifactId>\n   <scope>provided</scope>\n</dependency>\n```\n\n3）、必须编写一个**SpringBootServletInitializer**的子类，并调用configure方法\n\n```java\npublic class ServletInitializer extends SpringBootServletInitializer {\n\n   @Override\n   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n       //传入SpringBoot应用的主程序\n      return application.sources(SpringBoot04WebJspApplication.class);\n   }\n\n}\n```\n\n4）、启动服务器就可以使用；\n\n### 原理\n\njar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；\n\nwar包：启动服务器，**服务器启动SpringBoot应用**【SpringBootServletInitializer】，启动ioc容器；\n\n\n\nservlet3.0（Spring注解版）：\n\n8.2.4 Shared libraries / runtimes pluggability：\n\n规则：\n\n​\t1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：\n\n​\t2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名\n\n​\t3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；\n\n\n\n流程：\n\n1）、启动Tomcat\n\n2）、org\\springframework\\spring-web\\4.3.14.RELEASE\\spring-web-4.3.14.RELEASE.jar!\\META-INF\\services\\javax.servlet.ServletContainerInitializer：\n\nSpring的web模块里面有这个文件：**org.springframework.web.SpringServletContainerInitializer**\n\n3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set<Class<?>>；为这些WebApplicationInitializer类型的类创建实例；\n\n4）、每一个WebApplicationInitializer都调用自己的onStartup；\n\n![](/Users/wanglei/Desktop/images/搜狗截图20180302221835.png)\n\n5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法\n\n6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器\n\n```java\nprotected WebApplicationContext createRootApplicationContext(\n      ServletContext servletContext) {\n    //1、创建SpringApplicationBuilder\n   SpringApplicationBuilder builder = createSpringApplicationBuilder();\n   StandardServletEnvironment environment = new StandardServletEnvironment();\n   environment.initPropertySources(servletContext, null);\n   builder.environment(environment);\n   builder.main(getClass());\n   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);\n   if (parent != null) {\n      this.logger.info(\"Root context already created (using as parent).\");\n      servletContext.setAttribute(\n            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null);\n      builder.initializers(new ParentContextApplicationContextInitializer(parent));\n   }\n   builder.initializers(\n         new ServletContextApplicationContextInitializer(servletContext));\n   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);\n    \n    //调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来\n   builder = configure(builder);\n    \n    //使用builder创建一个Spring应用\n   SpringApplication application = builder.build();\n   if (application.getSources().isEmpty() && AnnotationUtils\n         .findAnnotation(getClass(), Configuration.class) != null) {\n      application.getSources().add(getClass());\n   }\n   Assert.state(!application.getSources().isEmpty(),\n         \"No SpringApplication sources have been defined. Either override the \"\n               + \"configure method or add an @Configuration annotation\");\n   // Ensure error pages are registered\n   if (this.registerErrorPageFilter) {\n      application.getSources().add(ErrorPageFilterConfiguration.class);\n   }\n    //启动Spring应用\n   return run(application);\n}\n```\n\n7）、Spring的应用就启动并且创建IOC容器\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n   StopWatch stopWatch = new StopWatch();\n   stopWatch.start();\n   ConfigurableApplicationContext context = null;\n   FailureAnalyzers analyzers = null;\n   configureHeadlessProperty();\n   SpringApplicationRunListeners listeners = getRunListeners(args);\n   listeners.starting();\n   try {\n      ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n            args);\n      ConfigurableEnvironment environment = prepareEnvironment(listeners,\n            applicationArguments);\n      Banner printedBanner = printBanner(environment);\n      context = createApplicationContext();\n      analyzers = new FailureAnalyzers(context);\n      prepareContext(context, environment, listeners, applicationArguments,\n            printedBanner);\n       \n       //刷新IOC容器\n      refreshContext(context);\n      afterRefresh(context, applicationArguments);\n      listeners.finished(context, null);\n      stopWatch.stop();\n      if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n               .logStarted(getApplicationLog(), stopWatch);\n      }\n      return context;\n   }\n   catch (Throwable ex) {\n      handleRunFailure(context, listeners, analyzers, ex);\n      throw new IllegalStateException(ex);\n   }\n}\n```\n\n**==启动Servlet容器，再启动SpringBoot应用==**","slug":"StringBoot-配置嵌入式Servlet容器","published":1,"updated":"2020-05-30T15:27:13.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hqv000fsx01hspw0rxi","content":"<p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>\n<p>问题？</p>\n<h3 id=\"1）、如何定制和修改Servlet容器的相关配置；\"><a href=\"#1）、如何定制和修改Servlet容器的相关配置；\" class=\"headerlink\" title=\"1）、如何定制和修改Servlet容器的相关配置；\"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">8081</span></span><br><span class=\"line\"><span class=\"meta\">server.context-path</span>=<span class=\"string\">/crud</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">server.tomcat.uri-encoding</span>=<span class=\"string\">UTF-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">//通用的Servlet容器设置</span></span><br><span class=\"line\"><span class=\"attr\">server.xxx</span></span><br><span class=\"line\"><span class=\"attr\">//Tomcat的设置</span></span><br><span class=\"line\"><span class=\"attr\">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span>  <span class=\"comment\">//一定要将这个定制器加入到容器中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainerCustomizer <span class=\"title\">embeddedServletContainerCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">            container.setPort(<span class=\"number\">8083</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2）、注册Servlet三大组件【Servlet、Filter、Listener】\"><a href=\"#2）、注册Servlet三大组件【Servlet、Filter、Listener】\" class=\"headerlink\" title=\"2）、注册Servlet三大组件【Servlet、Filter、Listener】\"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p>\n<p>注册三大组件用以下方式</p>\n<p>ServletRegistrationBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注册三大组件</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">myServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletRegistrationBean registrationBean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> MyServlet(),<span class=\"string\">\"/myServlet\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FilterRegistrationBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">myFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean registrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">    registrationBean.setFilter(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">    registrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">\"/hello\"</span>,<span class=\"string\">\"/myServlet\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ServletListenerRegistrationBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletListenerRegistrationBean <span class=\"title\">myListener</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class=\"keyword\">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class=\"keyword\">new</span> MyListener());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p>\n<p>DispatcherServletAutoConfiguration中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span>(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean</span>(value = DispatcherServlet<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">name</span> </span>= DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">dispatcherServletRegistration</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class=\"line\">   ServletRegistrationBean registration = <span class=\"keyword\">new</span> ServletRegistrationBean(</span><br><span class=\"line\">         dispatcherServlet, <span class=\"keyword\">this</span>.serverProperties.getServletMapping());</span><br><span class=\"line\">    <span class=\"comment\">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span></span><br><span class=\"line\">    <span class=\"comment\">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class=\"line\">    </span><br><span class=\"line\">   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class=\"line\">   registration.setLoadOnStartup(</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.multipartConfig != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      registration.setMultipartConfig(<span class=\"keyword\">this</span>.multipartConfig);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2）、SpringBoot能不能支持其他的Servlet容器；</p>\n<h3 id=\"3）、替换为其他嵌入式Servlet容器\"><a href=\"#3）、替换为其他嵌入式Servlet容器\" class=\"headerlink\" title=\"3）、替换为其他嵌入式Servlet容器\"></a>3）、替换为其他嵌入式Servlet容器</h3><p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302114401.png\" alt=\"\"></p>\n<p>默认支持：</p>\n<p>Tomcat（默认使用）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Jetty</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入web模块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Undertow</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入web模块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4）、嵌入式Servlet容器自动配置原理；\"><a href=\"#4）、嵌入式Servlet容器自动配置原理；\" class=\"headerlink\" title=\"4）、嵌入式Servlet容器自动配置原理；\"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(BeanPostProcessorsRegistrar<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">//导入<span class=\"title\">BeanPostProcessorsRegistrar</span>：<span class=\"title\">Spring</span>注解版；给容器中导入一些组件</span></span><br><span class=\"line\"><span class=\"class\">//导入了<span class=\"title\">EmbeddedServletContainerCustomizerBeanPostProcessor</span>：</span></span><br><span class=\"line\"><span class=\"class\">//后置处理器：<span class=\"title\">bean</span>初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass</span>(&#123; Servlet<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">Tomcat</span>.<span class=\"title\">class</span> &#125;)//判断当前是否引入了<span class=\"title\">Tomcat</span>依赖；</span></span><br><span class=\"line\"><span class=\"class\">\t@<span class=\"title\">ConditionalOnMissingBean</span>(<span class=\"title\">value</span> </span>= EmbeddedServletContainerFactory<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">search</span> </span>= SearchStrategy.CURRENT)<span class=\"comment\">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedTomcat</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> TomcatEmbeddedServletContainerFactory <span class=\"title\">tomcatEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Nested configuration if Jetty is being used.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass</span>(&#123; Servlet<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">Server</span>.<span class=\"title\">class</span>, <span class=\"title\">Loader</span>.<span class=\"title\">class</span>,</span></span><br><span class=\"line\"><span class=\"class\">\t\t\t<span class=\"title\">WebAppContext</span>.<span class=\"title\">class</span> &#125;)</span></span><br><span class=\"line\"><span class=\"class\">\t@<span class=\"title\">ConditionalOnMissingBean</span>(<span class=\"title\">value</span> </span>= EmbeddedServletContainerFactory<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">search</span> </span>= SearchStrategy.CURRENT)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedJetty</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> JettyEmbeddedServletContainerFactory <span class=\"title\">jettyEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JettyEmbeddedServletContainerFactory();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Nested configuration if Undertow is being used.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass</span>(&#123; Servlet<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">Undertow</span>.<span class=\"title\">class</span>, <span class=\"title\">SslClientAuthMode</span>.<span class=\"title\">class</span> &#125;)</span></span><br><span class=\"line\"><span class=\"class\">\t@<span class=\"title\">ConditionalOnMissingBean</span>(<span class=\"title\">value</span> </span>= EmbeddedServletContainerFactory<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">search</span> </span>= SearchStrategy.CURRENT)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedUndertow</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> UndertowEmbeddedServletContainerFactory <span class=\"title\">undertowEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//获取嵌入式的Servlet容器</span></span><br><span class=\"line\">   <span class=\"function\">EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         ServletContextInitializer... initializers)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144835.png\" alt=\"\"></p>\n<p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p>\n<p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144910.png\" alt=\"\"></p>\n<p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个Tomcat</span></span><br><span class=\"line\">   Tomcat tomcat = <span class=\"keyword\">new</span> Tomcat();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//配置Tomcat的基本环节</span></span><br><span class=\"line\">   File baseDir = (<span class=\"keyword\">this</span>.baseDirectory != <span class=\"keyword\">null</span> ? <span class=\"keyword\">this</span>.baseDirectory</span><br><span class=\"line\">         : createTempDir(<span class=\"string\">\"tomcat\"</span>));</span><br><span class=\"line\">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class=\"line\">   Connector connector = <span class=\"keyword\">new</span> Connector(<span class=\"keyword\">this</span>.protocol);</span><br><span class=\"line\">   tomcat.getService().addConnector(connector);</span><br><span class=\"line\">   customizeConnector(connector);</span><br><span class=\"line\">   tomcat.setConnector(connector);</span><br><span class=\"line\">   tomcat.getHost().setAutoDeploy(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">   configureEngine(tomcat.getEngine());</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Connector additionalConnector : <span class=\"keyword\">this</span>.additionalTomcatConnectors) &#123;</span><br><span class=\"line\">      tomcat.getService().addConnector(additionalConnector);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   prepareContext(tomcat.getHost(), initializers);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、我们对嵌入式容器的配置修改是怎么生效？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p>\n<p>怎么修改的原理？</p>\n<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化之前</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//</span></span><br><span class=\"line\">      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class=\"line\">        customizer.customize(bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class=\"title\">getCustomizers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.customizers == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Look up does not include the parent context</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = <span class=\"keyword\">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.beanFactory</span><br><span class=\"line\">            <span class=\"comment\">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class=\"line\">            <span class=\"comment\">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class=\"line\">            .getBeansOfType(EmbeddedServletContainerCustomizer<span class=\"class\">.<span class=\"keyword\">class</span>,</span></span><br><span class=\"line\"><span class=\"class\">                            <span class=\"title\">false</span>, <span class=\"title\">false</span>)</span></span><br><span class=\"line\"><span class=\"class\">            .<span class=\"title\">values</span>())</span>;</span><br><span class=\"line\">        Collections.sort(<span class=\"keyword\">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = Collections.unmodifiableList(<span class=\"keyword\">this</span>.customizers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.customizers;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ServerProperties也是定制器</span><br></pre></td></tr></table></figure>\n\n<p>步骤：</p>\n<p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>\n<p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p>\n<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>\n<p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p>\n<p>###5）、嵌入式Servlet容器启动原理；</p>\n<p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p>\n<p>获取嵌入式的Servlet容器工厂：</p>\n<p>1）、SpringBoot应用启动运行run方法</p>\n<p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p>\n<p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Prepare this context for refreshing.</span></span><br><span class=\"line\">      prepareRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class=\"line\">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Prepare the bean factory for use in this context.</span></span><br><span class=\"line\">      prepareBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">         postProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">         registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">         initMessageSource();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">         initApplicationEventMulticaster();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">         onRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">         registerListeners();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">         finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">         finishRefresh();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">\"Exception encountered during context initialization - \"</span> +</span><br><span class=\"line\">                  <span class=\"string\">\"cancelling refresh attempt: \"</span> + ex);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class=\"line\">         destroyBeans();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Reset 'active' flag.</span></span><br><span class=\"line\">         cancelRefresh(ex);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Propagate exception to caller.</span></span><br><span class=\"line\">         <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Reset common introspection caches in Spring's core, since we</span></span><br><span class=\"line\">         <span class=\"comment\">// might not ever need metadata for singleton beans anymore...</span></span><br><span class=\"line\">         resetCommonCaches();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p>\n<p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p>\n<p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p>\n<p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p>\n<p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p>\n<p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p>\n<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>\n<p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p>\n<p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p>\n<h2 id=\"9、使用外置的Servlet容器\"><a href=\"#9、使用外置的Servlet容器\" class=\"headerlink\" title=\"9、使用外置的Servlet容器\"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p>\n<p>​        优点：简单、便携；</p>\n<p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p>\n<p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p>\n<p>2）、将嵌入式的Tomcat指定为provided；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//传入SpringBoot应用的主程序</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> application.sources(SpringBoot04WebJspApplication<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、启动服务器就可以使用；</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p>\n<p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p>\n<p>servlet3.0（Spring注解版）：</p>\n<p>8.2.4 Shared libraries / runtimes pluggability：</p>\n<p>规则：</p>\n<p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p>\n<p>​    2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p>\n<p>​    3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p>\n<p>流程：</p>\n<p>1）、启动Tomcat</p>\n<p>2）、org\\springframework\\spring-web\\4.3.14.RELEASE\\spring-web-4.3.14.RELEASE.jar!\\META-INF\\services\\javax.servlet.ServletContainerInitializer：</p>\n<p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p>\n<p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p>\n<p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p>\n<p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302221835.png\" alt=\"\"></p>\n<p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>\n<p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> WebApplicationContext <span class=\"title\">createRootApplicationContext</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ServletContext servletContext)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、创建SpringApplicationBuilder</span></span><br><span class=\"line\">   SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class=\"line\">   StandardServletEnvironment environment = <span class=\"keyword\">new</span> StandardServletEnvironment();</span><br><span class=\"line\">   environment.initPropertySources(servletContext, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">   builder.environment(environment);</span><br><span class=\"line\">   builder.main(getClass());</span><br><span class=\"line\">   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.logger.info(<span class=\"string\">\"Root context already created (using as parent).\"</span>);</span><br><span class=\"line\">      servletContext.setAttribute(</span><br><span class=\"line\">            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      builder.initializers(<span class=\"keyword\">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   builder.initializers(</span><br><span class=\"line\">         <span class=\"keyword\">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class=\"line\">   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span></span><br><span class=\"line\">   builder = configure(builder);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//使用builder创建一个Spring应用</span></span><br><span class=\"line\">   SpringApplication application = builder.build();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils</span><br><span class=\"line\">         .findAnnotation(getClass(), Configuration<span class=\"class\">.<span class=\"keyword\">class</span>) !</span>= <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      application.getSources().add(getClass());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   Assert.state(!application.getSources().isEmpty(),</span><br><span class=\"line\">         <span class=\"string\">\"No SpringApplication sources have been defined. Either override the \"</span></span><br><span class=\"line\">               + <span class=\"string\">\"configure method or add an @Configuration annotation\"</span>);</span><br><span class=\"line\">   <span class=\"comment\">// Ensure error pages are registered</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.registerErrorPageFilter) &#123;</span><br><span class=\"line\">      application.getSources().add(ErrorPageFilterConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//启动Spring应用</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> run(application);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7）、Spring的应用就启动并且创建IOC容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">   StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">   stopWatch.start();</span><br><span class=\"line\">   ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   FailureAnalyzers analyzers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   configureHeadlessProperty();</span><br><span class=\"line\">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">   listeners.starting();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">            args);</span><br><span class=\"line\">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">            applicationArguments);</span><br><span class=\"line\">      Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">      context = createApplicationContext();</span><br><span class=\"line\">      analyzers = <span class=\"keyword\">new</span> FailureAnalyzers(context);</span><br><span class=\"line\">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">            printedBanner);</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//刷新IOC容器</span></span><br><span class=\"line\">      refreshContext(context);</span><br><span class=\"line\">      afterRefresh(context, applicationArguments);</span><br><span class=\"line\">      listeners.finished(context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      stopWatch.stop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>==启动Servlet容器，再启动SpringBoot应用==</strong></p>\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>\n<p>问题？</p>\n<h3 id=\"1）、如何定制和修改Servlet容器的相关配置；\"><a href=\"#1）、如何定制和修改Servlet容器的相关配置；\" class=\"headerlink\" title=\"1）、如何定制和修改Servlet容器的相关配置；\"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">8081</span></span><br><span class=\"line\"><span class=\"meta\">server.context-path</span>=<span class=\"string\">/crud</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">server.tomcat.uri-encoding</span>=<span class=\"string\">UTF-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">//通用的Servlet容器设置</span></span><br><span class=\"line\"><span class=\"attr\">server.xxx</span></span><br><span class=\"line\"><span class=\"attr\">//Tomcat的设置</span></span><br><span class=\"line\"><span class=\"attr\">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span>  <span class=\"comment\">//一定要将这个定制器加入到容器中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainerCustomizer <span class=\"title\">embeddedServletContainerCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">            container.setPort(<span class=\"number\">8083</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2）、注册Servlet三大组件【Servlet、Filter、Listener】\"><a href=\"#2）、注册Servlet三大组件【Servlet、Filter、Listener】\" class=\"headerlink\" title=\"2）、注册Servlet三大组件【Servlet、Filter、Listener】\"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p>\n<p>注册三大组件用以下方式</p>\n<p>ServletRegistrationBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注册三大组件</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">myServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletRegistrationBean registrationBean = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> MyServlet(),<span class=\"string\">\"/myServlet\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FilterRegistrationBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">myFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean registrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">    registrationBean.setFilter(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">    registrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">\"/hello\"</span>,<span class=\"string\">\"/myServlet\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ServletListenerRegistrationBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletListenerRegistrationBean <span class=\"title\">myListener</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class=\"keyword\">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class=\"keyword\">new</span> MyListener());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p>\n<p>DispatcherServletAutoConfiguration中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span>(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean</span>(value = DispatcherServlet<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">name</span> </span>= DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">dispatcherServletRegistration</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class=\"line\">   ServletRegistrationBean registration = <span class=\"keyword\">new</span> ServletRegistrationBean(</span><br><span class=\"line\">         dispatcherServlet, <span class=\"keyword\">this</span>.serverProperties.getServletMapping());</span><br><span class=\"line\">    <span class=\"comment\">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span></span><br><span class=\"line\">    <span class=\"comment\">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class=\"line\">    </span><br><span class=\"line\">   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class=\"line\">   registration.setLoadOnStartup(</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.multipartConfig != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      registration.setMultipartConfig(<span class=\"keyword\">this</span>.multipartConfig);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2）、SpringBoot能不能支持其他的Servlet容器；</p>\n<h3 id=\"3）、替换为其他嵌入式Servlet容器\"><a href=\"#3）、替换为其他嵌入式Servlet容器\" class=\"headerlink\" title=\"3）、替换为其他嵌入式Servlet容器\"></a>3）、替换为其他嵌入式Servlet容器</h3><p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302114401.png\" alt=\"\"></p>\n<p>默认支持：</p>\n<p>Tomcat（默认使用）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Jetty</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入web模块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Undertow</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入web模块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4）、嵌入式Servlet容器自动配置原理；\"><a href=\"#4）、嵌入式Servlet容器自动配置原理；\" class=\"headerlink\" title=\"4）、嵌入式Servlet容器自动配置原理；\"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(BeanPostProcessorsRegistrar<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">//导入<span class=\"title\">BeanPostProcessorsRegistrar</span>：<span class=\"title\">Spring</span>注解版；给容器中导入一些组件</span></span><br><span class=\"line\"><span class=\"class\">//导入了<span class=\"title\">EmbeddedServletContainerCustomizerBeanPostProcessor</span>：</span></span><br><span class=\"line\"><span class=\"class\">//后置处理器：<span class=\"title\">bean</span>初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass</span>(&#123; Servlet<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">Tomcat</span>.<span class=\"title\">class</span> &#125;)//判断当前是否引入了<span class=\"title\">Tomcat</span>依赖；</span></span><br><span class=\"line\"><span class=\"class\">\t@<span class=\"title\">ConditionalOnMissingBean</span>(<span class=\"title\">value</span> </span>= EmbeddedServletContainerFactory<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">search</span> </span>= SearchStrategy.CURRENT)<span class=\"comment\">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedTomcat</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> TomcatEmbeddedServletContainerFactory <span class=\"title\">tomcatEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Nested configuration if Jetty is being used.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass</span>(&#123; Servlet<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">Server</span>.<span class=\"title\">class</span>, <span class=\"title\">Loader</span>.<span class=\"title\">class</span>,</span></span><br><span class=\"line\"><span class=\"class\">\t\t\t<span class=\"title\">WebAppContext</span>.<span class=\"title\">class</span> &#125;)</span></span><br><span class=\"line\"><span class=\"class\">\t@<span class=\"title\">ConditionalOnMissingBean</span>(<span class=\"title\">value</span> </span>= EmbeddedServletContainerFactory<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">search</span> </span>= SearchStrategy.CURRENT)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedJetty</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> JettyEmbeddedServletContainerFactory <span class=\"title\">jettyEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JettyEmbeddedServletContainerFactory();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Nested configuration if Undertow is being used.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass</span>(&#123; Servlet<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">Undertow</span>.<span class=\"title\">class</span>, <span class=\"title\">SslClientAuthMode</span>.<span class=\"title\">class</span> &#125;)</span></span><br><span class=\"line\"><span class=\"class\">\t@<span class=\"title\">ConditionalOnMissingBean</span>(<span class=\"title\">value</span> </span>= EmbeddedServletContainerFactory<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">search</span> </span>= SearchStrategy.CURRENT)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmbeddedUndertow</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> UndertowEmbeddedServletContainerFactory <span class=\"title\">undertowEmbeddedServletContainerFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//获取嵌入式的Servlet容器</span></span><br><span class=\"line\">   <span class=\"function\">EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         ServletContextInitializer... initializers)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144835.png\" alt=\"\"></p>\n<p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p>\n<p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144910.png\" alt=\"\"></p>\n<p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainer <span class=\"title\">getEmbeddedServletContainer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个Tomcat</span></span><br><span class=\"line\">   Tomcat tomcat = <span class=\"keyword\">new</span> Tomcat();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//配置Tomcat的基本环节</span></span><br><span class=\"line\">   File baseDir = (<span class=\"keyword\">this</span>.baseDirectory != <span class=\"keyword\">null</span> ? <span class=\"keyword\">this</span>.baseDirectory</span><br><span class=\"line\">         : createTempDir(<span class=\"string\">\"tomcat\"</span>));</span><br><span class=\"line\">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class=\"line\">   Connector connector = <span class=\"keyword\">new</span> Connector(<span class=\"keyword\">this</span>.protocol);</span><br><span class=\"line\">   tomcat.getService().addConnector(connector);</span><br><span class=\"line\">   customizeConnector(connector);</span><br><span class=\"line\">   tomcat.setConnector(connector);</span><br><span class=\"line\">   tomcat.getHost().setAutoDeploy(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">   configureEngine(tomcat.getEngine());</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Connector additionalConnector : <span class=\"keyword\">this</span>.additionalTomcatConnectors) &#123;</span><br><span class=\"line\">      tomcat.getService().addConnector(additionalConnector);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   prepareContext(tomcat.getHost(), initializers);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、我们对嵌入式容器的配置修改是怎么生效？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p>\n<p>怎么修改的原理？</p>\n<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化之前</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class=\"line\">       <span class=\"comment\">//</span></span><br><span class=\"line\">      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class=\"line\">        customizer.customize(bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class=\"title\">getCustomizers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.customizers == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Look up does not include the parent context</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = <span class=\"keyword\">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.beanFactory</span><br><span class=\"line\">            <span class=\"comment\">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class=\"line\">            <span class=\"comment\">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class=\"line\">            .getBeansOfType(EmbeddedServletContainerCustomizer<span class=\"class\">.<span class=\"keyword\">class</span>,</span></span><br><span class=\"line\"><span class=\"class\">                            <span class=\"title\">false</span>, <span class=\"title\">false</span>)</span></span><br><span class=\"line\"><span class=\"class\">            .<span class=\"title\">values</span>())</span>;</span><br><span class=\"line\">        Collections.sort(<span class=\"keyword\">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customizers = Collections.unmodifiableList(<span class=\"keyword\">this</span>.customizers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.customizers;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ServerProperties也是定制器</span><br></pre></td></tr></table></figure>\n\n<p>步骤：</p>\n<p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>\n<p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p>\n<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>\n<p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p>\n<p>###5）、嵌入式Servlet容器启动原理；</p>\n<p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p>\n<p>获取嵌入式的Servlet容器工厂：</p>\n<p>1）、SpringBoot应用启动运行run方法</p>\n<p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p>\n<p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Prepare this context for refreshing.</span></span><br><span class=\"line\">      prepareRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class=\"line\">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Prepare the bean factory for use in this context.</span></span><br><span class=\"line\">      prepareBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">         postProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">         registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">         initMessageSource();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">         initApplicationEventMulticaster();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">         onRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">         registerListeners();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">         finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">         finishRefresh();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">\"Exception encountered during context initialization - \"</span> +</span><br><span class=\"line\">                  <span class=\"string\">\"cancelling refresh attempt: \"</span> + ex);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class=\"line\">         destroyBeans();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Reset 'active' flag.</span></span><br><span class=\"line\">         cancelRefresh(ex);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Propagate exception to caller.</span></span><br><span class=\"line\">         <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Reset common introspection caches in Spring's core, since we</span></span><br><span class=\"line\">         <span class=\"comment\">// might not ever need metadata for singleton beans anymore...</span></span><br><span class=\"line\">         resetCommonCaches();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p>\n<p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p>\n<p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p>\n<p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p>\n<p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p>\n<p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p>\n<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>\n<p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p>\n<p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p>\n<h2 id=\"9、使用外置的Servlet容器\"><a href=\"#9、使用外置的Servlet容器\" class=\"headerlink\" title=\"9、使用外置的Servlet容器\"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p>\n<p>​        优点：简单、便携；</p>\n<p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p>\n<p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p>\n<p>2）、将嵌入式的Tomcat指定为provided；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//传入SpringBoot应用的主程序</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> application.sources(SpringBoot04WebJspApplication<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4）、启动服务器就可以使用；</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p>\n<p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p>\n<p>servlet3.0（Spring注解版）：</p>\n<p>8.2.4 Shared libraries / runtimes pluggability：</p>\n<p>规则：</p>\n<p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p>\n<p>​    2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p>\n<p>​    3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p>\n<p>流程：</p>\n<p>1）、启动Tomcat</p>\n<p>2）、org\\springframework\\spring-web\\4.3.14.RELEASE\\spring-web-4.3.14.RELEASE.jar!\\META-INF\\services\\javax.servlet.ServletContainerInitializer：</p>\n<p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p>\n<p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p>\n<p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p>\n<p><img src=\"/Users/wanglei/Desktop/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302221835.png\" alt=\"\"></p>\n<p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>\n<p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> WebApplicationContext <span class=\"title\">createRootApplicationContext</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ServletContext servletContext)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、创建SpringApplicationBuilder</span></span><br><span class=\"line\">   SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class=\"line\">   StandardServletEnvironment environment = <span class=\"keyword\">new</span> StandardServletEnvironment();</span><br><span class=\"line\">   environment.initPropertySources(servletContext, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">   builder.environment(environment);</span><br><span class=\"line\">   builder.main(getClass());</span><br><span class=\"line\">   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.logger.info(<span class=\"string\">\"Root context already created (using as parent).\"</span>);</span><br><span class=\"line\">      servletContext.setAttribute(</span><br><span class=\"line\">            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      builder.initializers(<span class=\"keyword\">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   builder.initializers(</span><br><span class=\"line\">         <span class=\"keyword\">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class=\"line\">   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span></span><br><span class=\"line\">   builder = configure(builder);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//使用builder创建一个Spring应用</span></span><br><span class=\"line\">   SpringApplication application = builder.build();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils</span><br><span class=\"line\">         .findAnnotation(getClass(), Configuration<span class=\"class\">.<span class=\"keyword\">class</span>) !</span>= <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      application.getSources().add(getClass());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   Assert.state(!application.getSources().isEmpty(),</span><br><span class=\"line\">         <span class=\"string\">\"No SpringApplication sources have been defined. Either override the \"</span></span><br><span class=\"line\">               + <span class=\"string\">\"configure method or add an @Configuration annotation\"</span>);</span><br><span class=\"line\">   <span class=\"comment\">// Ensure error pages are registered</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.registerErrorPageFilter) &#123;</span><br><span class=\"line\">      application.getSources().add(ErrorPageFilterConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">//启动Spring应用</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> run(application);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7）、Spring的应用就启动并且创建IOC容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">   StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">   stopWatch.start();</span><br><span class=\"line\">   ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   FailureAnalyzers analyzers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   configureHeadlessProperty();</span><br><span class=\"line\">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">   listeners.starting();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">            args);</span><br><span class=\"line\">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">            applicationArguments);</span><br><span class=\"line\">      Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">      context = createApplicationContext();</span><br><span class=\"line\">      analyzers = <span class=\"keyword\">new</span> FailureAnalyzers(context);</span><br><span class=\"line\">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">            printedBanner);</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//刷新IOC容器</span></span><br><span class=\"line\">      refreshContext(context);</span><br><span class=\"line\">      afterRefresh(context, applicationArguments);</span><br><span class=\"line\">      listeners.finished(context, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      stopWatch.stop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>==启动Servlet容器，再启动SpringBoot应用==</strong></p>\n"},{"title":"StringBoot配置文件（Yml、Properties）","date":"2018-01-06T10:26:55.000Z","_content":"\n\nSpringBoot使用一个全局的配置文件，配置文件名是固定的；\n\n•application.properties\n\n•application.yml\n\n\n\n配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；\n\n\n\nYAML（YAML Ain't Markup Language）\n\n​\tYAML  A Markup Language：是一个标记语言\n\n​\tYAML   isn't Markup Language：不是一个标记语言；\n\n标记语言：\n\n​\t以前的配置文件；大多都使用的是  **xxxx.xml**文件；\n\n​\tYAML：**以数据为中心**，比json、xml等更适合做配置文件；\n\n​\tYAML：配置例子\n\n```yaml\nserver:\n  port: 8081\n```\n\n​\tXML：\n\n```xml\n<server>\n\t<port>8081</port>\n</server>\n```\n\n\n\n## 2、YAML语法：\n\n### 1、基本语法\n\nk:(空格)v：表示一对键值对（空格必须有）；\n\n以**空格**的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的\n\n```yaml\nserver:\n    port: 8081\n    path: /hello\n```\n\n属性和值也是大小写敏感；\n\n\n\n### 2、值的写法\n\n#### 字面量：普通的值（数字，字符串，布尔）\n\n​\tk: v：字面直接来写；\n\n​\t\t字符串默认不用加上单引号或者双引号；\n\n​\t\t\"\"：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思\n\n​\t\t\t\tname:   \"wanglei \\n lisi\"：输出；wanglei 换行  lisi\n\n​\t\t''：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据\n\n​\t\t\t\tname:   ‘wanglei \\n lisi’：输出；wanglei \\n  lisi\n\n\n\n#### 对象、Map（属性和值）（键值对）：\n\n​\tk: v：在下一行来写对象的属性和值的关系；注意缩进\n\n​\t\t对象还是k: v的方式\n\n```yaml\nfriends:\n\t\tlastName: wanglei\n\t\tage: 20\n```\n\n行内写法：\n\n```yaml\nfriends: {lastName: wanglei,age: 18}\n```\n\n\n\n#### 数组（List、Set）：\n\n用- 值表示数组中的一个元素\n\n```yaml\npets:\n - cat\n - dog\n - pig\n```\n\n行内写法\n\n```yaml\npets: [cat,dog,pig]\n```\n\n\n","source":"_posts/StringBoot之配置文件.md","raw":"---\n\ntitle: StringBoot配置文件（Yml、Properties）\n\ndate: 2018/01/06 18:26:55\n\n---\n\n\nSpringBoot使用一个全局的配置文件，配置文件名是固定的；\n\n•application.properties\n\n•application.yml\n\n\n\n配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；\n\n\n\nYAML（YAML Ain't Markup Language）\n\n​\tYAML  A Markup Language：是一个标记语言\n\n​\tYAML   isn't Markup Language：不是一个标记语言；\n\n标记语言：\n\n​\t以前的配置文件；大多都使用的是  **xxxx.xml**文件；\n\n​\tYAML：**以数据为中心**，比json、xml等更适合做配置文件；\n\n​\tYAML：配置例子\n\n```yaml\nserver:\n  port: 8081\n```\n\n​\tXML：\n\n```xml\n<server>\n\t<port>8081</port>\n</server>\n```\n\n\n\n## 2、YAML语法：\n\n### 1、基本语法\n\nk:(空格)v：表示一对键值对（空格必须有）；\n\n以**空格**的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的\n\n```yaml\nserver:\n    port: 8081\n    path: /hello\n```\n\n属性和值也是大小写敏感；\n\n\n\n### 2、值的写法\n\n#### 字面量：普通的值（数字，字符串，布尔）\n\n​\tk: v：字面直接来写；\n\n​\t\t字符串默认不用加上单引号或者双引号；\n\n​\t\t\"\"：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思\n\n​\t\t\t\tname:   \"wanglei \\n lisi\"：输出；wanglei 换行  lisi\n\n​\t\t''：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据\n\n​\t\t\t\tname:   ‘wanglei \\n lisi’：输出；wanglei \\n  lisi\n\n\n\n#### 对象、Map（属性和值）（键值对）：\n\n​\tk: v：在下一行来写对象的属性和值的关系；注意缩进\n\n​\t\t对象还是k: v的方式\n\n```yaml\nfriends:\n\t\tlastName: wanglei\n\t\tage: 20\n```\n\n行内写法：\n\n```yaml\nfriends: {lastName: wanglei,age: 18}\n```\n\n\n\n#### 数组（List、Set）：\n\n用- 值表示数组中的一个元素\n\n```yaml\npets:\n - cat\n - dog\n - pig\n```\n\n行内写法\n\n```yaml\npets: [cat,dog,pig]\n```\n\n\n","slug":"StringBoot之配置文件","published":1,"updated":"2020-05-30T15:25:33.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hqw000gsx019zd1cv2s","content":"<p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p>\n<p>•application.properties</p>\n<p>•application.yml</p>\n<p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p>\n<p>YAML（YAML Ain’t Markup Language）</p>\n<p>​    YAML  A Markup Language：是一个标记语言</p>\n<p>​    YAML   isn’t Markup Language：不是一个标记语言；</p>\n<p>标记语言：</p>\n<p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p>\n<p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p>\n<p>​    YAML：配置例子</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n\n<p>​    XML：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8081<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2、YAML语法：\"><a href=\"#2、YAML语法：\" class=\"headerlink\" title=\"2、YAML语法：\"></a>2、YAML语法：</h2><h3 id=\"1、基本语法\"><a href=\"#1、基本语法\" class=\"headerlink\" title=\"1、基本语法\"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p>\n<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/hello</span></span><br></pre></td></tr></table></figure>\n\n<p>属性和值也是大小写敏感；</p>\n<h3 id=\"2、值的写法\"><a href=\"#2、值的写法\" class=\"headerlink\" title=\"2、值的写法\"></a>2、值的写法</h3><h4 id=\"字面量：普通的值（数字，字符串，布尔）\"><a href=\"#字面量：普通的值（数字，字符串，布尔）\" class=\"headerlink\" title=\"字面量：普通的值（数字，字符串，布尔）\"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p>\n<p>​        字符串默认不用加上单引号或者双引号；</p>\n<p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p>\n<p>​                name:   “wanglei \\n lisi”：输出；wanglei 换行  lisi</p>\n<p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>\n<p>​                name:   ‘wanglei \\n lisi’：输出；wanglei \\n  lisi</p>\n<h4 id=\"对象、Map（属性和值）（键值对）：\"><a href=\"#对象、Map（属性和值）（键值对）：\" class=\"headerlink\" title=\"对象、Map（属性和值）（键值对）：\"></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p>\n<p>​        对象还是k: v的方式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">friends:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">lastName:</span> <span class=\"string\">wanglei</span></span><br><span class=\"line\">\t\t<span class=\"attr\">age:</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<p>行内写法：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">friends:</span> <span class=\"string\">&#123;lastName:</span> <span class=\"string\">wanglei,age:</span> <span class=\"number\">18</span><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数组（List、Set）：\"><a href=\"#数组（List、Set）：\" class=\"headerlink\" title=\"数组（List、Set）：\"></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">cat</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">dog</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">pig</span></span><br></pre></td></tr></table></figure>\n\n<p>行内写法</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span> <span class=\"string\">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p>\n<p>•application.properties</p>\n<p>•application.yml</p>\n<p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p>\n<p>YAML（YAML Ain’t Markup Language）</p>\n<p>​    YAML  A Markup Language：是一个标记语言</p>\n<p>​    YAML   isn’t Markup Language：不是一个标记语言；</p>\n<p>标记语言：</p>\n<p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p>\n<p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p>\n<p>​    YAML：配置例子</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n\n<p>​    XML：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>8081<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2、YAML语法：\"><a href=\"#2、YAML语法：\" class=\"headerlink\" title=\"2、YAML语法：\"></a>2、YAML语法：</h2><h3 id=\"1、基本语法\"><a href=\"#1、基本语法\" class=\"headerlink\" title=\"1、基本语法\"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p>\n<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/hello</span></span><br></pre></td></tr></table></figure>\n\n<p>属性和值也是大小写敏感；</p>\n<h3 id=\"2、值的写法\"><a href=\"#2、值的写法\" class=\"headerlink\" title=\"2、值的写法\"></a>2、值的写法</h3><h4 id=\"字面量：普通的值（数字，字符串，布尔）\"><a href=\"#字面量：普通的值（数字，字符串，布尔）\" class=\"headerlink\" title=\"字面量：普通的值（数字，字符串，布尔）\"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p>\n<p>​        字符串默认不用加上单引号或者双引号；</p>\n<p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p>\n<p>​                name:   “wanglei \\n lisi”：输出；wanglei 换行  lisi</p>\n<p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>\n<p>​                name:   ‘wanglei \\n lisi’：输出；wanglei \\n  lisi</p>\n<h4 id=\"对象、Map（属性和值）（键值对）：\"><a href=\"#对象、Map（属性和值）（键值对）：\" class=\"headerlink\" title=\"对象、Map（属性和值）（键值对）：\"></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p>\n<p>​        对象还是k: v的方式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">friends:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">lastName:</span> <span class=\"string\">wanglei</span></span><br><span class=\"line\">\t\t<span class=\"attr\">age:</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<p>行内写法：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">friends:</span> <span class=\"string\">&#123;lastName:</span> <span class=\"string\">wanglei,age:</span> <span class=\"number\">18</span><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数组（List、Set）：\"><a href=\"#数组（List、Set）：\" class=\"headerlink\" title=\"数组（List、Set）：\"></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">cat</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">dog</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">pig</span></span><br></pre></td></tr></table></figure>\n\n<p>行内写法</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pets:</span> <span class=\"string\">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"项目管理禅道Linux","date":"2019-05-05T04:07:14.000Z","_content":"\n## \n\n- **官网：**http://www.zentao.net/book/zentaopmshelp/90.html\n\n- **下载安装**\n\n  ```shell\n  ##下载\n  wget http://dl.cnezsoft.com/zentao/11.6.4/ZenTaoPMS.11.6.4.zbox_64.tar.gz\n  ##解压\n  tar -zxvf ZenTaoPMS.11.6.4.zbox_64.tar.gz \n  #移动解压后台文件/opt\n  mv zbox /opt/\n  #添加文件权限\n  chmod 777 zbox/\n  ```\n\n  \n\n- **配置端口**\n\n  > ap参数 可以修改Apache的端口，-mp参数 可以修改Mysql的端口。\n  > 例如（apache端口改为8080，mysql端口改为3307）：\n  > /opt/zbox/zbox -ap 3307 -mp 3308\n  \n- **常用命令**\n\n  > 执行/opt/zbox/zbox start 命令开启Apache和Mysql。 执行/opt/zbox/zbox stop 命令停止Apache和Mysql。 执行/opt/zbox/zbox restart 命令重启Apache和Mysql。 /opt/zbox/zbox -h命令来获取关于zbox命令的帮助。 ##如果需要开机自动启动，可以把 /opt/zbox/zbox restart 加到操作系统的自启目录。\n\n- 登录\n\n  > 启动 Apache和Mysql服务后， 浏览器直接访问：http://62.234.166.188:3307/zentao 注：如果网页无法访问，请先关闭禅道所在电脑的防火墙和selinux再刷新网页访问试一下。 禅道默认管理员帐号是 admin，密码 123456 首次登录后，修改admin密码\n\n- **访问数据库**\n\n  > 添加数据库(不执行此步骤无法访问数据库) sh /opt/zbox/auth/adduser.sh 登录数据库：/opt/zbox/bin/mysql -u root -P mysql端口 -p  （比如：/opt/zbox/bin/mysql -u root -P 3306 -p） 导入数据库：/opt/zbox/bin/mysql -u root -P mysql端口 -p 要导入的库名 < XXXX.sql （比如：/opt/zbox/bin/mysql -u root -P 3306 -p zentao < zentao.sql）","source":"_posts/项目管理禅道Linux.md","raw":"---\ntitle: 项目管理禅道Linux\ndate: 2019/05/05 12:07:14\n\n---\n\n## \n\n- **官网：**http://www.zentao.net/book/zentaopmshelp/90.html\n\n- **下载安装**\n\n  ```shell\n  ##下载\n  wget http://dl.cnezsoft.com/zentao/11.6.4/ZenTaoPMS.11.6.4.zbox_64.tar.gz\n  ##解压\n  tar -zxvf ZenTaoPMS.11.6.4.zbox_64.tar.gz \n  #移动解压后台文件/opt\n  mv zbox /opt/\n  #添加文件权限\n  chmod 777 zbox/\n  ```\n\n  \n\n- **配置端口**\n\n  > ap参数 可以修改Apache的端口，-mp参数 可以修改Mysql的端口。\n  > 例如（apache端口改为8080，mysql端口改为3307）：\n  > /opt/zbox/zbox -ap 3307 -mp 3308\n  \n- **常用命令**\n\n  > 执行/opt/zbox/zbox start 命令开启Apache和Mysql。 执行/opt/zbox/zbox stop 命令停止Apache和Mysql。 执行/opt/zbox/zbox restart 命令重启Apache和Mysql。 /opt/zbox/zbox -h命令来获取关于zbox命令的帮助。 ##如果需要开机自动启动，可以把 /opt/zbox/zbox restart 加到操作系统的自启目录。\n\n- 登录\n\n  > 启动 Apache和Mysql服务后， 浏览器直接访问：http://62.234.166.188:3307/zentao 注：如果网页无法访问，请先关闭禅道所在电脑的防火墙和selinux再刷新网页访问试一下。 禅道默认管理员帐号是 admin，密码 123456 首次登录后，修改admin密码\n\n- **访问数据库**\n\n  > 添加数据库(不执行此步骤无法访问数据库) sh /opt/zbox/auth/adduser.sh 登录数据库：/opt/zbox/bin/mysql -u root -P mysql端口 -p  （比如：/opt/zbox/bin/mysql -u root -P 3306 -p） 导入数据库：/opt/zbox/bin/mysql -u root -P mysql端口 -p 要导入的库名 < XXXX.sql （比如：/opt/zbox/bin/mysql -u root -P 3306 -p zentao < zentao.sql）","slug":"项目管理禅道Linux","published":1,"updated":"2020-05-30T16:13:02.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hqx000hsx0115s81k3o","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><p><strong>官网：</strong><a href=\"http://www.zentao.net/book/zentaopmshelp/90.html\" target=\"_blank\" rel=\"noopener\">http://www.zentao.net/book/zentaopmshelp/90.html</a></p>\n</li>\n<li><p><strong>下载安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#下载</span></span></span><br><span class=\"line\">wget http://dl.cnezsoft.com/zentao/11.6.4/ZenTaoPMS.11.6.4.zbox_64.tar.gz</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#解压</span></span></span><br><span class=\"line\">tar -zxvf ZenTaoPMS.11.6.4.zbox_64.tar.gz </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">移动解压后台文件/opt</span></span><br><span class=\"line\">mv zbox /opt/</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加文件权限</span></span><br><span class=\"line\">chmod 777 zbox/</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>配置端口</strong></p>\n<blockquote>\n<p>ap参数 可以修改Apache的端口，-mp参数 可以修改Mysql的端口。<br>例如（apache端口改为8080，mysql端口改为3307）：<br>/opt/zbox/zbox -ap 3307 -mp 3308</p>\n</blockquote>\n</li>\n<li><p><strong>常用命令</strong></p>\n<blockquote>\n<p>执行/opt/zbox/zbox start 命令开启Apache和Mysql。 执行/opt/zbox/zbox stop 命令停止Apache和Mysql。 执行/opt/zbox/zbox restart 命令重启Apache和Mysql。 /opt/zbox/zbox -h命令来获取关于zbox命令的帮助。 ##如果需要开机自动启动，可以把 /opt/zbox/zbox restart 加到操作系统的自启目录。</p>\n</blockquote>\n</li>\n<li><p>登录</p>\n<blockquote>\n<p>启动 Apache和Mysql服务后， 浏览器直接访问：<a href=\"http://62.234.166.188:3307/zentao\" target=\"_blank\" rel=\"noopener\">http://62.234.166.188:3307/zentao</a> 注：如果网页无法访问，请先关闭禅道所在电脑的防火墙和selinux再刷新网页访问试一下。 禅道默认管理员帐号是 admin，密码 123456 首次登录后，修改admin密码</p>\n</blockquote>\n</li>\n<li><p><strong>访问数据库</strong></p>\n<blockquote>\n<p>添加数据库(不执行此步骤无法访问数据库) sh /opt/zbox/auth/adduser.sh 登录数据库：/opt/zbox/bin/mysql -u root -P mysql端口 -p  （比如：/opt/zbox/bin/mysql -u root -P 3306 -p） 导入数据库：/opt/zbox/bin/mysql -u root -P mysql端口 -p 要导入的库名 &lt; XXXX.sql （比如：/opt/zbox/bin/mysql -u root -P 3306 -p zentao &lt; zentao.sql）</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li><p><strong>官网：</strong><a href=\"http://www.zentao.net/book/zentaopmshelp/90.html\" target=\"_blank\" rel=\"noopener\">http://www.zentao.net/book/zentaopmshelp/90.html</a></p>\n</li>\n<li><p><strong>下载安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#下载</span></span></span><br><span class=\"line\">wget http://dl.cnezsoft.com/zentao/11.6.4/ZenTaoPMS.11.6.4.zbox_64.tar.gz</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#解压</span></span></span><br><span class=\"line\">tar -zxvf ZenTaoPMS.11.6.4.zbox_64.tar.gz </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">移动解压后台文件/opt</span></span><br><span class=\"line\">mv zbox /opt/</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加文件权限</span></span><br><span class=\"line\">chmod 777 zbox/</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>配置端口</strong></p>\n<blockquote>\n<p>ap参数 可以修改Apache的端口，-mp参数 可以修改Mysql的端口。<br>例如（apache端口改为8080，mysql端口改为3307）：<br>/opt/zbox/zbox -ap 3307 -mp 3308</p>\n</blockquote>\n</li>\n<li><p><strong>常用命令</strong></p>\n<blockquote>\n<p>执行/opt/zbox/zbox start 命令开启Apache和Mysql。 执行/opt/zbox/zbox stop 命令停止Apache和Mysql。 执行/opt/zbox/zbox restart 命令重启Apache和Mysql。 /opt/zbox/zbox -h命令来获取关于zbox命令的帮助。 ##如果需要开机自动启动，可以把 /opt/zbox/zbox restart 加到操作系统的自启目录。</p>\n</blockquote>\n</li>\n<li><p>登录</p>\n<blockquote>\n<p>启动 Apache和Mysql服务后， 浏览器直接访问：<a href=\"http://62.234.166.188:3307/zentao\" target=\"_blank\" rel=\"noopener\">http://62.234.166.188:3307/zentao</a> 注：如果网页无法访问，请先关闭禅道所在电脑的防火墙和selinux再刷新网页访问试一下。 禅道默认管理员帐号是 admin，密码 123456 首次登录后，修改admin密码</p>\n</blockquote>\n</li>\n<li><p><strong>访问数据库</strong></p>\n<blockquote>\n<p>添加数据库(不执行此步骤无法访问数据库) sh /opt/zbox/auth/adduser.sh 登录数据库：/opt/zbox/bin/mysql -u root -P mysql端口 -p  （比如：/opt/zbox/bin/mysql -u root -P 3306 -p） 导入数据库：/opt/zbox/bin/mysql -u root -P mysql端口 -p 要导入的库名 &lt; XXXX.sql （比如：/opt/zbox/bin/mysql -u root -P 3306 -p zentao &lt; zentao.sql）</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Hello SpringBoot","date":"2018-05-01T12:46:25.000Z","_content":"\n\n# **一、**Spring Boot 入门\n\n## 1、Spring Boot 简介\n\n> 简化Spring应用开发的一个框架；\n>\n> 整个Spring技术栈的一个大整合；\n>\n> J2EE开发的一站式解决方案；\n\n## 2、微服务\n\n2014，martin fowler\n\n微服务：架构风格（服务微化）\n\n一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；\n\n单体应用：ALL IN ONE\n\n微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；\n\n[详细参照微服务文档](https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa)\n\n\n\n## 3、环境准备\n\n环境约束\n\n–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version \"1.8.0_112\"\n\n–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9\n\n–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS\n\n–SpringBoot 1.5.9.RELEASE：1.5.9；\n\n统一环境；\n\n\n\n### 1、MAVEN设置；\n\n给maven 的settings.xml配置文件的profiles标签添加\n\n```xml\n<profile>\n  <id>jdk-1.8</id>\n  <activation>\n    <activeByDefault>true</activeByDefault>\n    <jdk>1.8</jdk>\n  </activation>\n  <properties>\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n    <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\n  </properties>\n</profile>\n```\n\n### 2、IDEA设置\n\n整合maven进来；\n\n## 4、Spring Boot HelloWorld\n\n一个功能：\n\n浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；\n\n\n\n### 1、创建一个maven工程；（jar）\n\n### 2、导入spring boot相关的依赖\n\n```xml\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n    </parent>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n```\n\n### 3、编写一个主程序；启动Spring Boot应用\n\n```java\n\n/**\n *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用\n */\n@SpringBootApplication\npublic class HelloWorldMainApplication {\n\n    public static void main(String[] args) {\n\n        // Spring应用启动起来\n        SpringApplication.run(HelloWorldMainApplication.class,args);\n    }\n}\n```\n\n### 4、编写相关的Controller、Service\n\n```java\n@Controller\npublic class HelloController {\n\n    @ResponseBody\n    @RequestMapping(\"/hello\")\n    public String hello(){\n        return \"Hello World!\";\n    }\n}\n\n```\n\n\n\n### 5、运行主程序测试\n\n### 6、简化部署\n\n```xml\n <!-- 这个插件，可以将应用打包成一个可执行的jar包；-->\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n\n将这个应用打成jar包，直接使用java -jar的命令进行执行；\n\n","source":"_posts/Hello-SpringBoot.md","raw":"---\n\ntitle: Hello SpringBoot\ndate: 2018-5-01 20:46:25\n---\n\n\n# **一、**Spring Boot 入门\n\n## 1、Spring Boot 简介\n\n> 简化Spring应用开发的一个框架；\n>\n> 整个Spring技术栈的一个大整合；\n>\n> J2EE开发的一站式解决方案；\n\n## 2、微服务\n\n2014，martin fowler\n\n微服务：架构风格（服务微化）\n\n一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；\n\n单体应用：ALL IN ONE\n\n微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；\n\n[详细参照微服务文档](https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa)\n\n\n\n## 3、环境准备\n\n环境约束\n\n–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version \"1.8.0_112\"\n\n–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9\n\n–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS\n\n–SpringBoot 1.5.9.RELEASE：1.5.9；\n\n统一环境；\n\n\n\n### 1、MAVEN设置；\n\n给maven 的settings.xml配置文件的profiles标签添加\n\n```xml\n<profile>\n  <id>jdk-1.8</id>\n  <activation>\n    <activeByDefault>true</activeByDefault>\n    <jdk>1.8</jdk>\n  </activation>\n  <properties>\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n    <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\n  </properties>\n</profile>\n```\n\n### 2、IDEA设置\n\n整合maven进来；\n\n## 4、Spring Boot HelloWorld\n\n一个功能：\n\n浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；\n\n\n\n### 1、创建一个maven工程；（jar）\n\n### 2、导入spring boot相关的依赖\n\n```xml\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n    </parent>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n```\n\n### 3、编写一个主程序；启动Spring Boot应用\n\n```java\n\n/**\n *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用\n */\n@SpringBootApplication\npublic class HelloWorldMainApplication {\n\n    public static void main(String[] args) {\n\n        // Spring应用启动起来\n        SpringApplication.run(HelloWorldMainApplication.class,args);\n    }\n}\n```\n\n### 4、编写相关的Controller、Service\n\n```java\n@Controller\npublic class HelloController {\n\n    @ResponseBody\n    @RequestMapping(\"/hello\")\n    public String hello(){\n        return \"Hello World!\";\n    }\n}\n\n```\n\n\n\n### 5、运行主程序测试\n\n### 6、简化部署\n\n```xml\n <!-- 这个插件，可以将应用打包成一个可执行的jar包；-->\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n\n将这个应用打成jar包，直接使用java -jar的命令进行执行；\n\n","slug":"Hello-SpringBoot","published":1,"updated":"2020-05-30T15:49:25.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaup8hqy000isx01ezu97987","content":"<h1 id=\"一、Spring-Boot-入门\"><a href=\"#一、Spring-Boot-入门\" class=\"headerlink\" title=\"一、Spring Boot 入门\"></a><strong>一、</strong>Spring Boot 入门</h1><h2 id=\"1、Spring-Boot-简介\"><a href=\"#1、Spring-Boot-简介\" class=\"headerlink\" title=\"1、Spring Boot 简介\"></a>1、Spring Boot 简介</h2><blockquote>\n<p>简化Spring应用开发的一个框架；</p>\n<p>整个Spring技术栈的一个大整合；</p>\n<p>J2EE开发的一站式解决方案；</p>\n</blockquote>\n<h2 id=\"2、微服务\"><a href=\"#2、微服务\" class=\"headerlink\" title=\"2、微服务\"></a>2、微服务</h2><p>2014，martin fowler</p>\n<p>微服务：架构风格（服务微化）</p>\n<p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>\n<p>单体应用：ALL IN ONE</p>\n<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>\n<p><a href=\"https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa\" target=\"_blank\" rel=\"noopener\">详细参照微服务文档</a></p>\n<h2 id=\"3、环境准备\"><a href=\"#3、环境准备\" class=\"headerlink\" title=\"3、环境准备\"></a>3、环境准备</h2><p>环境约束</p>\n<p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p>\n<p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p>\n<p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p>\n<p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p>\n<p>统一环境；</p>\n<h3 id=\"1、MAVEN设置；\"><a href=\"#1、MAVEN设置；\" class=\"headerlink\" title=\"1、MAVEN设置；\"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-1.8<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、IDEA设置\"><a href=\"#2、IDEA设置\" class=\"headerlink\" title=\"2、IDEA设置\"></a>2、IDEA设置</h3><p>整合maven进来；</p>\n<h2 id=\"4、Spring-Boot-HelloWorld\"><a href=\"#4、Spring-Boot-HelloWorld\" class=\"headerlink\" title=\"4、Spring Boot HelloWorld\"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p>\n<p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p>\n<h3 id=\"1、创建一个maven工程；（jar）\"><a href=\"#1、创建一个maven工程；（jar）\" class=\"headerlink\" title=\"1、创建一个maven工程；（jar）\"></a>1、创建一个maven工程；（jar）</h3><h3 id=\"2、导入spring-boot相关的依赖\"><a href=\"#2、导入spring-boot相关的依赖\" class=\"headerlink\" title=\"2、导入spring boot相关的依赖\"></a>2、导入spring boot相关的依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、编写一个主程序；启动Spring-Boot应用\"><a href=\"#3、编写一个主程序；启动Spring-Boot应用\" class=\"headerlink\" title=\"3、编写一个主程序；启动Spring Boot应用\"></a>3、编写一个主程序；启动Spring Boot应用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldMainApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Spring应用启动起来</span></span><br><span class=\"line\">        SpringApplication.run(HelloWorldMainApplication<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、编写相关的Controller、Service\"><a href=\"#4、编写相关的Controller、Service\" class=\"headerlink\" title=\"4、编写相关的Controller、Service\"></a>4、编写相关的Controller、Service</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5、运行主程序测试\"><a href=\"#5、运行主程序测试\" class=\"headerlink\" title=\"5、运行主程序测试\"></a>5、运行主程序测试</h3><h3 id=\"6、简化部署\"><a href=\"#6、简化部署\" class=\"headerlink\" title=\"6、简化部署\"></a>6、简化部署</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p>\n","site":{"data":{"butterfly":{"menu":{"Home":"/ || fa fa-home","Archives":"/archives/ || fa fa-archive","Tags":"/tags/ || fa fa-tags","Categories":"/categories/ || fa fa-folder-open","Link":"/link/ || fa fa-link","About":"/about/ || fa fa-heart","List||fa fa-list":["Music || /music/ || fa fa-music","Movie || /movies/ || fa fa-film"]},"highlight_theme":"default","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":false,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/jerryc127 || Github","fa fa-envelope":"mailto:xxxxxxx@gmail.com || Email","fa fa-rss":"/atom.xml || RSS"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"per_page":false},"katex":{"enable":false,"per_page":false,"hide_scrollbar":true},"mermaid":{"enable":false,"theme":"default"},"favicon":"/img/favicon.png","avatar":{"img":"/img/avatar.jpeg","effect":false},"index_img":null,"default_top_img":"https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg","archive_img":null,"tag_img":null,"category_img":null,"cover":{"index_enable":true,"aside_enable":true,"archives_enable":true,"position":"left","default_cover":["https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"]},"lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"error_404":{"enable":false,"subtitle":"Page Not Found","background":null},"post_meta":{"page":{"date_type":"created","categories":true,"tags":false},"post":{"date_type":"both","categories":true,"tags":true}},"wordcount":{"enable":false,"post_wordcount":true,"min2read":true,"total_wordcount":true},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":true,"decode":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":true,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":false,"shortname":null,"count":false},"disqusjs":{"enable":false,"shortname":null,"siteName":null,"apikey":null,"api":"https://disqus.skk.moe/disqus/","admin":null,"adminLabel":null,"count":false},"laibili":{"enable":false,"uid":null},"gitalk":{"enable":false,"client_id":null,"client_secret":null,"repo":null,"owner":null,"admin":null,"language":"zh-CN","perPage":10,"distractionFreeMode":false,"pagerDirection":"last","createIssueManually":false,"count":false},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","recordIP":false,"serverURLs":null,"emojiCDN":null,"enableQQ":false,"requiredFields":"nick,mail","bg":null,"count":false},"utterances":{"enable":false,"repo":null,"issue_term":"pathname","light_theme":"github-light","dark_theme":"photon-dark"},"facebook_comments":{"enable":false,"app_id":null,"user_id":null,"pageSize":10,"order_by":"social","lang":"en_US","count":false},"since":2020,"footer_custom_text":null,"footer_copyright":{"enable":true},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"google_adsense":{"enable":false,"js":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":null,"enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/img/wechat.png","text":"微信"}},{"itemlist":{"img":"/img/alipay.png","text":"支付寶"}}]},"related_post":{"enable":true,"limit":6,"date_type":"created"},"photofigcaption":false,"anchor":false,"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":false,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":false,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false,"colorful":true,"shake":true},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["I","LOVE","YOU"],"fontSize":"15px"},"display_mode":"light","beautify":{"enable":false,"field":"post","title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"effect":true,"loop":false,"source":false,"sub":["今日事&#44;今日畢","Never put off till tomorrow what you can do today"]},"fontawesome_v5":{"enable":false},"preloader":false,"aside":{"enable":true,"mobile":true,"position":"right","card_author":{"enable":true,"description":null},"card_announcement":{"enable":true,"content":"This is my Blog"},"card_recent_post":{"enable":true,"limit":5},"card_categories":{"enable":true,"limit":8},"card_tags":{"enable":true,"limit":40,"color":false},"card_archives":{"enable":true,"type":"monthly","format":"MMMM YYYY","order":-1,"limit":8},"card_webinfo":true},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"6/7/2018 00:00:00"},"translate":{"enable":true,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},"readmode":{"enable":true},"darkmode":{"enable":true,"button":true,"autoChangeMode":1},"medium_zoom":{"enable":false},"fancybox":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":false},"pangu":{"enable":false,"field":"page"},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":false,"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"fragment_cache":true,"inject":{"head":null,"bottom":null},"CDN":{"main_css":"/css/index.css","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","main":"/js/main.js","utils":"/js/utils.js","blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","disqusjs":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqus.js","disqusjs_css":"https://cdn.jsdelivr.net/npm/disqusjs@1.2/dist/disqusjs.css","utterances":"https://utteranc.es/client.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css","local_search":"/js/search/local-search.js","algolia_js":"/js/search/algolia.js","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.5/dist/instantsearch.min.css","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","mermaid":"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@3/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","pangu":"https://cdn.jsdelivr.net/npm/pangu/dist/browser/pangu.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","fontawesome_v4":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css","fontawesome_v5":"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css","translate":"/js/tw_cn.js"},"rootConfig":{"title":"正在奋斗的青年","subtitle":"","description":"正在奋斗的青年...","author":"Wanglei","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"butterfly","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/wanglei0530/wanglei0530.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":20,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h1 id=\"一、Spring-Boot-入门\"><a href=\"#一、Spring-Boot-入门\" class=\"headerlink\" title=\"一、Spring Boot 入门\"></a><strong>一、</strong>Spring Boot 入门</h1><h2 id=\"1、Spring-Boot-简介\"><a href=\"#1、Spring-Boot-简介\" class=\"headerlink\" title=\"1、Spring Boot 简介\"></a>1、Spring Boot 简介</h2><blockquote>\n<p>简化Spring应用开发的一个框架；</p>\n<p>整个Spring技术栈的一个大整合；</p>\n<p>J2EE开发的一站式解决方案；</p>\n</blockquote>\n<h2 id=\"2、微服务\"><a href=\"#2、微服务\" class=\"headerlink\" title=\"2、微服务\"></a>2、微服务</h2><p>2014，martin fowler</p>\n<p>微服务：架构风格（服务微化）</p>\n<p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>\n<p>单体应用：ALL IN ONE</p>\n<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>\n<p><a href=\"https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa\" target=\"_blank\" rel=\"noopener\">详细参照微服务文档</a></p>\n<h2 id=\"3、环境准备\"><a href=\"#3、环境准备\" class=\"headerlink\" title=\"3、环境准备\"></a>3、环境准备</h2><p>环境约束</p>\n<p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p>\n<p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p>\n<p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p>\n<p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p>\n<p>统一环境；</p>\n<h3 id=\"1、MAVEN设置；\"><a href=\"#1、MAVEN设置；\" class=\"headerlink\" title=\"1、MAVEN设置；\"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-1.8<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、IDEA设置\"><a href=\"#2、IDEA设置\" class=\"headerlink\" title=\"2、IDEA设置\"></a>2、IDEA设置</h3><p>整合maven进来；</p>\n<h2 id=\"4、Spring-Boot-HelloWorld\"><a href=\"#4、Spring-Boot-HelloWorld\" class=\"headerlink\" title=\"4、Spring Boot HelloWorld\"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p>\n<p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p>\n<h3 id=\"1、创建一个maven工程；（jar）\"><a href=\"#1、创建一个maven工程；（jar）\" class=\"headerlink\" title=\"1、创建一个maven工程；（jar）\"></a>1、创建一个maven工程；（jar）</h3><h3 id=\"2、导入spring-boot相关的依赖\"><a href=\"#2、导入spring-boot相关的依赖\" class=\"headerlink\" title=\"2、导入spring boot相关的依赖\"></a>2、导入spring boot相关的依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、编写一个主程序；启动Spring-Boot应用\"><a href=\"#3、编写一个主程序；启动Spring-Boot应用\" class=\"headerlink\" title=\"3、编写一个主程序；启动Spring Boot应用\"></a>3、编写一个主程序；启动Spring Boot应用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldMainApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Spring应用启动起来</span></span><br><span class=\"line\">        SpringApplication.run(HelloWorldMainApplication<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、编写相关的Controller、Service\"><a href=\"#4、编写相关的Controller、Service\" class=\"headerlink\" title=\"4、编写相关的Controller、Service\"></a>4、编写相关的Controller、Service</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5、运行主程序测试\"><a href=\"#5、运行主程序测试\" class=\"headerlink\" title=\"5、运行主程序测试\"></a>5、运行主程序测试</h3><h3 id=\"6、简化部署\"><a href=\"#6、简化部署\" class=\"headerlink\" title=\"6、简化部署\"></a>6、简化部署</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}